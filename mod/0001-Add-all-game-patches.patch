From 64c241f11c57a9d08ef1c47f4aa648b65da07693 Mon Sep 17 00:00:00 2001
From: pietroglyph <declanfreemangleason@gmail.com>
Date: Mon, 6 Aug 2018 00:05:59 -0700
Subject: [PATCH] Add all game patches.

---
 Assembly-CSharp.sln                           |  10 +-
 Assembly-CSharp/AIPathHandler.cs              |   4 +-
 Assembly-CSharp/ASE_Flurry.cs                 | 170 +++++++++
 Assembly-CSharp/AbstractMenu.cs               |  11 +-
 Assembly-CSharp/AbstractPopup.cs              |  12 +-
 Assembly-CSharp/Assembly-CSharp.csproj        |  10 +-
 Assembly-CSharp/BezierControlPoint.cs         |   4 +-
 Assembly-CSharp/BezierCurveManager.cs         |   4 +-
 Assembly-CSharp/BezierWaypoint.cs             |   4 +-
 Assembly-CSharp/Billboard.cs                  |   4 +-
 Assembly-CSharp/BlobShadowLod.cs              |   4 +-
 Assembly-CSharp/BonusEffect.cs                |   4 +-
 Assembly-CSharp/BonusEntity.cs                |   2 +-
 Assembly-CSharp/BonusMgr.cs                   | 278 ++++++++------
 Assembly-CSharp/BoostBonusEffect.cs           |   6 +-
 Assembly-CSharp/BoxBonusEntity.cs             |   4 +-
 Assembly-CSharp/BtnItemAdvantage.cs           |   2 +-
 Assembly-CSharp/BtnSlotAdvantage.cs           |   6 +-
 Assembly-CSharp/CameraBase.cs                 |   2 +-
 Assembly-CSharp/CarPresentationGameState.cs   |   2 +-
 Assembly-CSharp/CoinsDisplayManager.cs        |   6 +-
 Assembly-CSharp/CreditsScrollingLabel.cs      |   4 +-
 Assembly-CSharp/CreditsScrollingPanel.cs      |   6 +-
 Assembly-CSharp/Cryptography.cs               |   8 -
 Assembly-CSharp/DebugAiHandler.cs             |   4 +-
 Assembly-CSharp/DebugMgr.cs                   |   8 +-
 Assembly-CSharp/DebugRemoveMaterial.cs        |   2 +-
 Assembly-CSharp/EndRaceGameState.cs           |   2 +-
 Assembly-CSharp/EntryPoint.cs                 |  57 ++-
 Assembly-CSharp/Escape.cs                     |   2 +-
 Assembly-CSharp/ForecastClient.cs             |   2 +-
 Assembly-CSharp/FpsDisplay.cs                 |   4 +-
 Assembly-CSharp/GameEntryPoint.cs             |  45 ++-
 Assembly-CSharp/GameManager.cs                |  16 +
 Assembly-CSharp/GameMode.cs                   |  20 +-
 Assembly-CSharp/GameOptionManager.cs          |  87 ++++-
 Assembly-CSharp/GameSaveManager.cs            | 512 ++++++++++++++------------
 Assembly-CSharp/GameState.cs                  |   4 +-
 Assembly-CSharp/HUDBonus.cs                   |   4 +-
 Assembly-CSharp/HUDCountdown.cs               |   2 +-
 Assembly-CSharp/HUDFade.cs                    |   6 +-
 Assembly-CSharp/HUDFinish.cs                  |   2 +-
 Assembly-CSharp/HUDInGame.cs                  |   2 +-
 Assembly-CSharp/HUDNapAttackFade.cs           |   6 +-
 Assembly-CSharp/HUDNextButton.cs              |   2 +-
 Assembly-CSharp/HUDPause.cs                   |   8 +-
 Assembly-CSharp/HUDPosition.cs                |   2 +-
 Assembly-CSharp/HUDRadar.cs                   |   6 +-
 Assembly-CSharp/HUDResultsChallenge.cs        |   2 +-
 Assembly-CSharp/HUDTrackPresentation.cs       |   2 +-
 Assembly-CSharp/HoldMessageButton.cs          |   4 +-
 Assembly-CSharp/InGameGameMode.cs             |   2 +-
 Assembly-CSharp/Joystick.cs                   |   4 +-
 Assembly-CSharp/JumpBonusEffect.cs            |   2 +-
 Assembly-CSharp/Kart.cs                       |   8 +
 Assembly-CSharp/KartArcadeGearBox.cs          |   2 +-
 Assembly-CSharp/KartBonusMgr.cs               |  68 ++--
 Assembly-CSharp/KartFxMgr.cs                  |   8 +-
 Assembly-CSharp/KartHumanController.cs        | 105 +++++-
 Assembly-CSharp/LoadingManager.cs             |   6 +-
 Assembly-CSharp/Localization.cs               |  17 +-
 Assembly-CSharp/MagicBonusEntity.cs           |   2 +-
 Assembly-CSharp/MalusBonusEntity.cs           |   2 +-
 Assembly-CSharp/ManageRenderSettings.cs       |   6 +-
 Assembly-CSharp/MenuChampionship.cs           |   6 +-
 Assembly-CSharp/MenuEntryPoint.cs             |  27 +-
 Assembly-CSharp/MenuMulti.cs                  |  37 +-
 Assembly-CSharp/MenuMultiCreate.cs            |  45 +--
 Assembly-CSharp/MenuMultiJoin.cs              | 230 +++++++++---
 Assembly-CSharp/MenuMultiWaitingRoom.cs       | 214 ++++++++---
 Assembly-CSharp/MenuOption.cs                 |  17 +-
 Assembly-CSharp/MenuOptionInput.cs            | 190 +++++++++-
 Assembly-CSharp/MenuOptionLanguage.cs         |   2 +-
 Assembly-CSharp/MenuOptionSound.cs            |   2 +-
 Assembly-CSharp/MenuPlaySolo.cs               |  58 ++-
 Assembly-CSharp/MenuSelectKart.cs             | 138 +++----
 Assembly-CSharp/MenuSelectTrack.cs            |  21 +-
 Assembly-CSharp/MenuTutorial.cs               |   2 +-
 Assembly-CSharp/MenuWelcome.cs                |  71 +++-
 Assembly-CSharp/ModGUIHelper.cs               | 116 ++++++
 Assembly-CSharp/MoodBox.cs                    |  13 +-
 Assembly-CSharp/MoodBoxManager.cs             |  48 ++-
 Assembly-CSharp/NamePlate.cs                  |   4 +-
 Assembly-CSharp/NapBonusEffect.cs             |   8 +-
 Assembly-CSharp/NetworkMgr.cs                 | 259 ++++++++++---
 Assembly-CSharp/PanelDataKart.cs              |   4 +-
 Assembly-CSharp/ParfumeBonusEffect.cs         |   2 +-
 Assembly-CSharp/PathRecorder.cs               |   6 +-
 Assembly-CSharp/PlayerConfig.cs               |   2 +-
 Assembly-CSharp/PlayerCustom.cs               |   4 +-
 Assembly-CSharp/PodiumGameState.cs            |   2 +-
 Assembly-CSharp/PopupDialog.cs                |  12 +
 Assembly-CSharp/PriceConfig.cs                |   2 +-
 Assembly-CSharp/Properties/AssemblyInfo.cs    |   8 +-
 Assembly-CSharp/PulseColor.cs                 |   2 +-
 Assembly-CSharp/PuzzlePiece.cs                |   4 +-
 Assembly-CSharp/QuadShadow.cs                 |   6 +-
 Assembly-CSharp/QualityManager.cs             |  16 +-
 Assembly-CSharp/RaceCoin.cs                   |   2 +-
 Assembly-CSharp/RaceGameState.cs              |   2 +-
 Assembly-CSharp/RaceItem.cs                   |   2 +-
 Assembly-CSharp/RacePuzzlePiece.cs            |   2 +-
 Assembly-CSharp/RaceTutorialGameState.cs      |   4 +-
 Assembly-CSharp/RcHumanController.cs          |  12 +
 Assembly-CSharp/RcKinematicStatistics.cs      |   2 +-
 Assembly-CSharp/RcNetworkController.cs        |  14 +-
 Assembly-CSharp/RcRace.cs                     |   2 +-
 Assembly-CSharp/ResultGameState.cs            |   2 +-
 Assembly-CSharp/RewardManager.cs              |  12 +-
 Assembly-CSharp/Rotate.cs                     |   4 +-
 Assembly-CSharp/SceneEntryPoint.cs            |   2 +-
 Assembly-CSharp/SplashScreen.cs               | 132 +++++++
 Assembly-CSharp/SplineController.cs           |   2 +-
 Assembly-CSharp/SplineInterpolator.cs         |   4 +-
 Assembly-CSharp/StartGameState.cs             |   4 +-
 Assembly-CSharp/SteerButton.cs                |   4 +-
 Assembly-CSharp/TimeTrialConfig.cs            |   8 -
 Assembly-CSharp/TimeTrialGameMode.cs          |   2 +-
 Assembly-CSharp/TimeTrialUFO.cs               |   4 +-
 Assembly-CSharp/TrackPresentationGameState.cs |   4 +-
 Assembly-CSharp/TutorialGameMode.cs           |   2 +-
 Assembly-CSharp/TutorialGameState.cs          |   2 +-
 Assembly-CSharp/UFOAnimation.cs               |   6 +-
 Assembly-CSharp/UFOBonusEntity.cs             |  10 +
 Assembly-CSharp/UIAtlas.cs                    |   2 +-
 Assembly-CSharp/UIButtonScale.cs              |  12 +
 Assembly-CSharp/UICopySprite.cs               |  10 +-
 Assembly-CSharp/UIFont.cs                     |  12 +-
 Assembly-CSharp/UILabel.cs                    |  45 ++-
 Assembly-CSharp/UIPanel.cs                    |   6 +-
 Assembly-CSharp/UISprite.cs                   |   6 +-
 Assembly-CSharp/UISpriteAnimation.cs          |   4 +-
 Assembly-CSharp/UITexture.cs                  |   4 +-
 133 files changed, 2542 insertions(+), 995 deletions(-)
 create mode 100644 Assembly-CSharp/ASE_Flurry.cs
 create mode 100644 Assembly-CSharp/ModGUIHelper.cs
 create mode 100644 Assembly-CSharp/SplashScreen.cs

diff --git a/Assembly-CSharp.sln b/Assembly-CSharp.sln
index 135f985..8f8dd5e 100644
--- a/Assembly-CSharp.sln
+++ b/Assembly-CSharp.sln
@@ -1,7 +1,7 @@
 ï»¿
 Microsoft Visual Studio Solution File, Format Version 11.00
 # Visual Studio 2010
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Assembly-CSharp", "Assembly-CSharp\Assembly-CSharp.csproj", "{2A94E6AB-9479-419D-A350-A4AF26391DED}"
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "Assembly-CSharp", "Assembly-CSharp\Assembly-CSharp.csproj", "{40D081E2-9F4B-4188-8728-F7E971B371AC}"
 EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
@@ -9,10 +9,10 @@ Global
 		Release|Any CPU = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{2A94E6AB-9479-419D-A350-A4AF26391DED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{2A94E6AB-9479-419D-A350-A4AF26391DED}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{2A94E6AB-9479-419D-A350-A4AF26391DED}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{2A94E6AB-9479-419D-A350-A4AF26391DED}.Release|Any CPU.Build.0 = Release|Any CPU
+		{40D081E2-9F4B-4188-8728-F7E971B371AC}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{40D081E2-9F4B-4188-8728-F7E971B371AC}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{40D081E2-9F4B-4188-8728-F7E971B371AC}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{40D081E2-9F4B-4188-8728-F7E971B371AC}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/Assembly-CSharp/AIPathHandler.cs b/Assembly-CSharp/AIPathHandler.cs
index 597601e..c3d7815 100644
--- a/Assembly-CSharp/AIPathHandler.cs
+++ b/Assembly-CSharp/AIPathHandler.cs
@@ -225,7 +225,7 @@ public class AIPathHandler : MonoBehaviour
 		pAI.IdealPath = this.GetPath(pathType, pAI.Level);
 	}
 
-	protected virtual void Start()
+	public virtual void Start()
 	{
 		if (Application.isPlaying)
 		{
@@ -272,7 +272,7 @@ public class AIPathHandler : MonoBehaviour
 		return result;
 	}
 
-	protected virtual void OnDrawGizmos()
+	public virtual void OnDrawGizmos()
 	{
 		if (Application.isPlaying && Application.isEditor)
 		{
diff --git a/Assembly-CSharp/ASE_Flurry.cs b/Assembly-CSharp/ASE_Flurry.cs
new file mode 100644
index 0000000..5acf240
--- /dev/null
+++ b/Assembly-CSharp/ASE_Flurry.cs
@@ -0,0 +1,170 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.Runtime.InteropServices;
+
+public class ASE_Flurry
+{
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurryStartSession(string sApiKey);
+
+	public static void Init(string sApiKey)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	public static void Stop()
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurryLogEvent(string sEventName);
+
+	public static void LogEvent(string sEventName)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurryLogEventWithParameters(string sEventName, string[] sKeys, string[] sValues);
+
+	public static void LogEvent(string sEventName, Dictionary<string, string> dict)
+	{
+		if (ASE_Tools.Available)
+		{
+			string[] array;
+			string[] array2;
+			ASE_Tools.DictionaryToArrays(dict, out array, out array2);
+		}
+	}
+
+	public static void LogEvent(string sEventName, string[] sKeys, string[] sValues)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurryLogEventTimed(string sEventName, bool bTimed);
+
+	public static void LogEvent(string sEventName, bool bTimed)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurryLogEventTimedWithParameters(string sEventName, bool bTimed, string[] sKeys, string[] sValues);
+
+	public static void LogEvent(string sEventName, bool bTimed, Dictionary<string, string> dict)
+	{
+		if (ASE_Tools.Available)
+		{
+			string[] array;
+			string[] array2;
+			ASE_Tools.DictionaryToArrays(dict, out array, out array2);
+		}
+	}
+
+	public static void LogEvent(string sEventName, bool bTimed, string[] sKeys, string[] sValues)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurryEndTimedEvent(string sEventName);
+
+	public static void EndTimedEvent(string sEventName)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurryEndTimedEventWithParameters(string sEventName, string[] sKeys, string[] sValues);
+
+	public static void EndTimedEvent(string sEventName, Dictionary<string, string> dict)
+	{
+		if (ASE_Tools.Available)
+		{
+			string[] array;
+			string[] array2;
+			ASE_Tools.DictionaryToArrays(dict, out array, out array2);
+		}
+	}
+
+	public static void EndTimedEvent(string sEventName, string[] sKeys, string[] sValues)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurrySetEventLoggingEnabled(bool bValue);
+
+	public static void SetEventLoggingEnabled(bool bValue)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurrySetLogLevel(int nLevel);
+
+	public static void SetLogLevel(int nLevel)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurrySetGender(int nGender);
+
+	public static void SetGender(ASE_Flurry.Gender gender)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurrySetAge(int nAge);
+
+	public static void SetAge(int nAge)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	[DllImport("__Internal")]
+	private static extern void ASE_FlurrySetUserID(string sUserID);
+
+	public static void SetUserID(string sUserID)
+	{
+		if (ASE_Tools.Available)
+		{
+		}
+	}
+
+	public enum Gender
+	{
+		UNKNOWN = -1,
+		FEMALE,
+		MALE
+	}
+}
diff --git a/Assembly-CSharp/AbstractMenu.cs b/Assembly-CSharp/AbstractMenu.cs
index 457cc08..518a5d8 100644
--- a/Assembly-CSharp/AbstractMenu.cs
+++ b/Assembly-CSharp/AbstractMenu.cs
@@ -64,18 +64,15 @@ public class AbstractMenu : MonoBehaviour
 
 	public GameObject FindMenu(string GameObjectName)
 	{
-		GameObject gameObject = GameObject.Find(GameObjectName);
-		if (!gameObject)
-		{
-		}
-		return gameObject;
+		return GameObject.Find(GameObjectName);
 	}
 
-	public void ActSwapMenu(EMenus NextMenu)
+	public virtual void ActSwapMenu(EMenus NextMenu)
 	{
 		if (this.m_pMenuEntryPoint)
 		{
 			this.m_pMenuEntryPoint.SetState(NextMenu);
+			return;
 		}
 	}
 
@@ -99,7 +96,7 @@ public class AbstractMenu : MonoBehaviour
 
 	public Camera m_oCamera;
 
-	private UICamera m_oMenuCamera;
+	protected UICamera m_oMenuCamera;
 
 	protected LayerMask m_pLayerHud;
 }
diff --git a/Assembly-CSharp/AbstractPopup.cs b/Assembly-CSharp/AbstractPopup.cs
index f3ddf47..ef4e08c 100644
--- a/Assembly-CSharp/AbstractPopup.cs
+++ b/Assembly-CSharp/AbstractPopup.cs
@@ -23,11 +23,21 @@ public class AbstractPopup : MonoBehaviour
 		base.gameObject.SetActive(false);
 	}
 
-	public void OnQuit()
+	public virtual void OnQuit()
 	{
 		this.m_pMenuEntryPoint.QuitPopup();
 	}
 
+	public void ShowText(string text)
+	{
+		base.gameObject.SetActive(true);
+		UILabel component = this.Text.gameObject.GetComponent<UILabel>();
+		if (component)
+		{
+			component.text = text;
+		}
+	}
+
 	protected MenuEntryPoint m_pMenuEntryPoint;
 
 	public UILocalize Text;
diff --git a/Assembly-CSharp/Assembly-CSharp.csproj b/Assembly-CSharp/Assembly-CSharp.csproj
index 46c0ebc..79d06a2 100644
--- a/Assembly-CSharp/Assembly-CSharp.csproj
+++ b/Assembly-CSharp/Assembly-CSharp.csproj
@@ -3,7 +3,7 @@
   <PropertyGroup>
     <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
     <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProjectGuid>{2A94E6AB-9479-419D-A350-A4AF26391DED}</ProjectGuid>
+    <ProjectGuid>{40D081E2-9F4B-4188-8728-F7E971B371AC}</ProjectGuid>
     <OutputType>Library</OutputType>
     <AppDesignerFolder>Properties</AppDesignerFolder>
     <RootNamespace>AnimationOrTween</RootNamespace>
@@ -20,6 +20,7 @@
     <DefineConstants>DEBUG;TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
     <PlatformTarget>AnyCPU</PlatformTarget>
@@ -29,6 +30,7 @@
     <DefineConstants>TRACE</DefineConstants>
     <ErrorReport>prompt</ErrorReport>
     <WarningLevel>4</WarningLevel>
+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="Assembly-CSharp-firstpass">
@@ -37,6 +39,9 @@
     <Reference Include="Assembly-UnityScript-firstpass">
       <HintPath>..\..\..\..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Garfield Kart.Patched.PorFavor\GarfieldKartNoMulti_Data\Managed\Assembly-UnityScript-firstpass.dll</HintPath>
     </Reference>
+    <Reference Include="System">
+      <HintPath>..\..\..\..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Garfield Kart.Patched.PorFavor\GarfieldKartNoMulti_Data\Managed\System.dll</HintPath>
+    </Reference>
     <Reference Include="System.Core">
       <HintPath>..\..\..\..\..\..\..\..\..\Program Files (x86)\Steam\steamapps\common\Garfield Kart.Patched.PorFavor\GarfieldKartNoMulti_Data\Managed\System.Core.dll</HintPath>
     </Reference>
@@ -66,6 +71,7 @@
     <Compile Include="ASE_AdMob.cs" />
     <Compile Include="ASE_ChartBoost.cs" />
     <Compile Include="ASE_Facebook.cs" />
+    <Compile Include="ASE_Flurry.cs" />
     <Compile Include="ASE_Tools.cs" />
     <Compile Include="AtfFacebookEventListener.cs" />
     <Compile Include="AtfTwitterEventListener.cs" />
@@ -332,6 +338,7 @@
     <Compile Include="MenuWelcome.cs" />
     <Compile Include="MeshCombineUtility.cs" />
     <Compile Include="MessageButton.cs" />
+    <Compile Include="ModGUIHelper.cs" />
     <Compile Include="MoodBox.cs" />
     <Compile Include="MoodBoxData.cs" />
     <Compile Include="MoodBoxManager.cs" />
@@ -450,6 +457,7 @@
     <Compile Include="Singleton.cs" />
     <Compile Include="SoundManager.cs" />
     <Compile Include="SpinBonusEffect.cs" />
+    <Compile Include="SplashScreen.cs" />
     <Compile Include="SplineController.cs" />
     <Compile Include="SplineInterpolator.cs" />
     <Compile Include="SpringBonusEntity.cs" />
diff --git a/Assembly-CSharp/BezierControlPoint.cs b/Assembly-CSharp/BezierControlPoint.cs
index ad24078..8e247cc 100644
--- a/Assembly-CSharp/BezierControlPoint.cs
+++ b/Assembly-CSharp/BezierControlPoint.cs
@@ -23,7 +23,7 @@ public class BezierControlPoint : MonoBehaviour, IBezierControlPoint
 		}
 	}
 
-	private void OnDrawGizmos()
+	public void OnDrawGizmos()
 	{
 		if (base.transform.parent.parent != null)
 		{
@@ -35,7 +35,7 @@ public class BezierControlPoint : MonoBehaviour, IBezierControlPoint
 		}
 	}
 
-	private void OnDrawGizmosSelected()
+	public void OnDrawGizmosSelected()
 	{
 		if (base.transform.parent != null)
 		{
diff --git a/Assembly-CSharp/BezierCurveManager.cs b/Assembly-CSharp/BezierCurveManager.cs
index 6a03db6..fe42e12 100644
--- a/Assembly-CSharp/BezierCurveManager.cs
+++ b/Assembly-CSharp/BezierCurveManager.cs
@@ -4,7 +4,7 @@ using UnityEngine;
 
 public class BezierCurveManager : MonoBehaviour, IBezierCurveManager
 {
-	private void Awake()
+	public void Awake()
 	{
 		foreach (IBezierWaypoint item in base.gameObject.GetComponentsInChildren(typeof(IBezierWaypoint)))
 		{
@@ -13,7 +13,7 @@ public class BezierCurveManager : MonoBehaviour, IBezierCurveManager
 		this.bezier = new Bezier(this.waypointList.ToArray());
 	}
 
-	private void Start()
+	public void Start()
 	{
 		if (this.EnableDistanceCalculations)
 		{
diff --git a/Assembly-CSharp/BezierWaypoint.cs b/Assembly-CSharp/BezierWaypoint.cs
index 50cfe61..7faa312 100644
--- a/Assembly-CSharp/BezierWaypoint.cs
+++ b/Assembly-CSharp/BezierWaypoint.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class BezierWaypoint : MonoBehaviour, IBezierWaypoint
 {
-	private void Awake()
+	public void Awake()
 	{
 		this.SetControlPoints();
 	}
@@ -85,7 +85,7 @@ public class BezierWaypoint : MonoBehaviour, IBezierWaypoint
 		}
 	}
 
-	private void OnDrawGizmos()
+	public void OnDrawGizmos()
 	{
 		BezierCurveManager bezierCurveManager = base.transform.parent.GetComponent(typeof(BezierCurveManager)) as BezierCurveManager;
 		if (this.IsValid)
diff --git a/Assembly-CSharp/Billboard.cs b/Assembly-CSharp/Billboard.cs
index c621400..e87d0aa 100644
--- a/Assembly-CSharp/Billboard.cs
+++ b/Assembly-CSharp/Billboard.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class Billboard : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		if (this.m_Camera == null)
 		{
@@ -18,7 +18,7 @@ public class Billboard : MonoBehaviour
 		this.m_pCamTransform = C.transform;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		this.m_pTransform.LookAt(this.m_pTransform.position - this.m_pCamTransform.rotation * Vector3.back, this.m_pCamTransform.rotation * Vector3.up);
 	}
diff --git a/Assembly-CSharp/BlobShadowLod.cs b/Assembly-CSharp/BlobShadowLod.cs
index 2a88aca..dc0dcf9 100644
--- a/Assembly-CSharp/BlobShadowLod.cs
+++ b/Assembly-CSharp/BlobShadowLod.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class BlobShadowLod : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		if (!this.m_pBlobShadow)
 		{
@@ -15,7 +15,7 @@ public class BlobShadowLod : MonoBehaviour
 		}
 	}
 
-	private void Update()
+	public void Update()
 	{
 		this.m_pBlobShadow.enabled = false;
 	}
diff --git a/Assembly-CSharp/BonusEffect.cs b/Assembly-CSharp/BonusEffect.cs
index 0db48cb..108f052 100644
--- a/Assembly-CSharp/BonusEffect.cs
+++ b/Assembly-CSharp/BonusEffect.cs
@@ -49,7 +49,7 @@ public class BonusEffect : MonoBehaviour
 		}
 	}
 
-	protected virtual void OnDestroy()
+	public virtual void OnDestroy()
 	{
 	}
 
@@ -103,8 +103,8 @@ public class BonusEffect : MonoBehaviour
 
 	public bool Activated;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	public float EffectDuration;
 
 	protected float m_fCurrentDuration;
diff --git a/Assembly-CSharp/BonusEntity.cs b/Assembly-CSharp/BonusEntity.cs
index c8fd942..33717f6 100644
--- a/Assembly-CSharp/BonusEntity.cs
+++ b/Assembly-CSharp/BonusEntity.cs
@@ -133,7 +133,7 @@ public class BonusEntity : MonoBehaviour
 	{
 	}
 
-	protected virtual void OnDestroy()
+	public virtual void OnDestroy()
 	{
 	}
 
diff --git a/Assembly-CSharp/BonusMgr.cs b/Assembly-CSharp/BonusMgr.cs
index 935fe7b..6a4a353 100644
--- a/Assembly-CSharp/BonusMgr.cs
+++ b/Assembly-CSharp/BonusMgr.cs
@@ -10,8 +10,7 @@ public class BonusMgr : Singleton<BonusMgr>
 		{
 			if (Network.peerType != NetworkPeerType.Disconnected && this.m_cKarts.Count == 0)
 			{
-				Kart[] array = (Kart[])UnityEngine.Object.FindObjectsOfType(typeof(Kart));
-				foreach (Kart kart in array)
+				foreach (Kart kart in (Kart[])UnityEngine.Object.FindObjectsOfType(typeof(Kart)))
 				{
 					this.m_cKarts[kart.networkViewID] = kart;
 				}
@@ -52,11 +51,21 @@ public class BonusMgr : Singleton<BonusMgr>
 	{
 		if (this.m_pUFOEntity != null)
 		{
-			this.DestroyEntities(this.m_pPieEntities);
-			this.DestroyEntities(this.m_pAutolockPieEntities);
-			this.DestroyEntities(this.m_pSpringEntities);
-			this.DestroyEntities(this.m_pMagicEntities);
-			this.DestroyEntities(this.m_pDiamondEntities);
+			BonusEntity[] array = this.m_pPieEntities;
+			BonusEntity[] pEntities = array;
+			this.DestroyEntities(pEntities);
+			array = this.m_pAutolockPieEntities;
+			pEntities = array;
+			this.DestroyEntities(pEntities);
+			array = this.m_pSpringEntities;
+			pEntities = array;
+			this.DestroyEntities(pEntities);
+			array = this.m_pMagicEntities;
+			pEntities = array;
+			this.DestroyEntities(pEntities);
+			array = this.m_pDiamondEntities;
+			pEntities = array;
+			this.DestroyEntities(pEntities);
 			UnityEngine.Object.Destroy(this.m_pUFOEntity.transform.parent.gameObject);
 		}
 		this.nbPie = 0;
@@ -78,41 +87,6 @@ public class BonusMgr : Singleton<BonusMgr>
 		}
 	}
 
-	private void GenerateItem(EITEM _Item)
-	{
-		string path = string.Empty;
-		switch (_Item)
-		{
-		case EITEM.ITEM_PIE:
-			path = "Bonus/PieBonusEntity";
-			break;
-		case EITEM.ITEM_AUTOLOCK_PIE:
-			path = "Bonus/AutolockPieBonusEntity";
-			break;
-		case EITEM.ITEM_SPRING:
-			path = "Bonus/SpringBonusEntity";
-			break;
-		case EITEM.ITEM_DIAMOND:
-			path = "Bonus/DiamondBonusEntity";
-			break;
-		case EITEM.ITEM_UFO:
-			path = "Bonus/UfoBonusEntity";
-			break;
-		case EITEM.ITEM_MAGIC:
-			path = "Bonus/MagicBonusEntity";
-			break;
-		}
-		UnityEngine.Object @object = Resources.Load(path);
-		if (Network.isServer)
-		{
-			Network.Instantiate(@object, Vector3.zero, Quaternion.identity, 0);
-		}
-		else if (Network.peerType == NetworkPeerType.Disconnected)
-		{
-			UnityEngine.Object.Instantiate(@object);
-		}
-	}
-
 	public void AddBonus(GameObject _Bonus, EITEM _Item)
 	{
 		string name = string.Empty;
@@ -120,25 +94,29 @@ public class BonusMgr : Singleton<BonusMgr>
 		{
 		case EITEM.ITEM_PIE:
 			name = "Pie" + this.nbPie;
-			goto IL_CE;
+			break;
 		case EITEM.ITEM_AUTOLOCK_PIE:
 			name = "AutolockPie" + this.nbAutolockPie;
-			goto IL_CE;
+			break;
 		case EITEM.ITEM_SPRING:
 			name = "Spring" + this.nbSpring;
-			goto IL_CE;
+			break;
+		case EITEM.ITEM_LASAGNA:
+		case EITEM.ITEM_NAP:
+		case EITEM.ITEM_PARFUME:
+			return;
 		case EITEM.ITEM_DIAMOND:
 			name = "Diamond" + this.nbDiamond;
-			goto IL_CE;
+			break;
 		case EITEM.ITEM_UFO:
 			name = "UFO0";
-			goto IL_CE;
+			break;
 		case EITEM.ITEM_MAGIC:
 			name = "Magic" + this.nbMagic;
-			goto IL_CE;
+			break;
+		default:
+			return;
 		}
-		return;
-		IL_CE:
 		GameObject gameObject = new GameObject(name);
 		_Bonus.transform.parent = gameObject.transform;
 		switch (_Item)
@@ -147,33 +125,52 @@ public class BonusMgr : Singleton<BonusMgr>
 			this.m_pPieEntities[this.nbPie] = _Bonus.GetComponentInChildren<PieBonusEntity>();
 			this.m_pPieEntities[this.nbPie].Index = this.nbPie;
 			this.nbPie++;
-			break;
+			return;
 		case EITEM.ITEM_AUTOLOCK_PIE:
 			this.m_pAutolockPieEntities[this.nbAutolockPie] = _Bonus.GetComponentInChildren<AutolockPieBonusEntity>();
 			this.m_pAutolockPieEntities[this.nbAutolockPie].Index = this.nbAutolockPie;
 			this.nbAutolockPie++;
-			break;
+			return;
 		case EITEM.ITEM_SPRING:
-			this.m_pSpringEntities[this.nbSpring++] = _Bonus.GetComponentInChildren<SpringBonusEntity>();
-			break;
+		{
+			SpringBonusEntity[] pSpringEntities = this.m_pSpringEntities;
+			int num = this.nbSpring;
+			this.nbSpring = num + 1;
+			pSpringEntities[num] = _Bonus.GetComponentInChildren<SpringBonusEntity>();
+			return;
+		}
+		case EITEM.ITEM_LASAGNA:
+		case EITEM.ITEM_NAP:
+		case EITEM.ITEM_PARFUME:
+			return;
 		case EITEM.ITEM_DIAMOND:
-			this.m_pDiamondEntities[this.nbDiamond++] = _Bonus.GetComponentInChildren<DiamondBonusEntity>();
-			break;
+		{
+			DiamondBonusEntity[] pDiamondEntities = this.m_pDiamondEntities;
+			int num2 = this.nbDiamond;
+			this.nbDiamond = num2 + 1;
+			pDiamondEntities[num2] = _Bonus.GetComponentInChildren<DiamondBonusEntity>();
+			return;
+		}
 		case EITEM.ITEM_UFO:
 			this.m_pUFOEntity = _Bonus.GetComponentInChildren<UFOBonusEntity>();
-			break;
+			return;
 		case EITEM.ITEM_MAGIC:
 		{
 			BonusEntity bonusEntity = null;
-			int num = 0;
-			while (num < _Bonus.transform.childCount && bonusEntity == null)
+			int num3 = 0;
+			while (num3 < _Bonus.transform.childCount && bonusEntity == null)
 			{
-				bonusEntity = _Bonus.transform.GetChild(num).GetComponent<MagicBonusEntity>();
-				num++;
+				bonusEntity = _Bonus.transform.GetChild(num3).GetComponent<MagicBonusEntity>();
+				num3++;
 			}
-			this.m_pMagicEntities[this.nbMagic++] = (MagicBonusEntity)bonusEntity;
-			break;
+			MagicBonusEntity[] pMagicEntities = this.m_pMagicEntities;
+			int num4 = this.nbMagic;
+			this.nbMagic = num4 + 1;
+			pMagicEntities[num4] = (MagicBonusEntity)bonusEntity;
+			return;
 		}
+		default:
+			return;
 		}
 	}
 
@@ -184,66 +181,64 @@ public class BonusMgr : Singleton<BonusMgr>
 		case EITEM.ITEM_PIE:
 			if (Network.peerType == NetworkPeerType.Disconnected)
 			{
-				BonusEntity bonusEntity = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity as PieBonusEntity).Launch(_Behind);
+				(this.ActiveLastUsed(_Item, _Kart) as PieBonusEntity).Launch(_Behind);
+				return;
 			}
-			else if (Network.isServer)
+			if (Network.isServer)
 			{
-				BonusEntity bonusEntity2 = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity2 as PieBonusEntity).NetLaunch(_Kart.networkViewID, _Behind);
+				(this.ActiveLastUsed(_Item, _Kart) as PieBonusEntity).NetLaunch(_Kart.networkViewID, _Behind);
+				return;
 			}
 			break;
 		case EITEM.ITEM_AUTOLOCK_PIE:
 			if (Network.peerType == NetworkPeerType.Disconnected)
 			{
-				BonusEntity bonusEntity3 = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity3 as AutolockPieBonusEntity).Launch(_Kart, _Behind);
+				(this.ActiveLastUsed(_Item, _Kart) as AutolockPieBonusEntity).Launch(_Kart, _Behind);
+				return;
 			}
-			else if (Network.isServer)
+			if (Network.isServer)
 			{
-				BonusEntity bonusEntity4 = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity4 as AutolockPieBonusEntity).NetLaunch(_Kart.networkViewID, _Behind);
+				(this.ActiveLastUsed(_Item, _Kart) as AutolockPieBonusEntity).NetLaunch(_Kart.networkViewID, _Behind);
+				return;
 			}
 			break;
 		case EITEM.ITEM_SPRING:
-			if (_Behind)
+			if (!_Behind)
 			{
-				if (Network.peerType == NetworkPeerType.Disconnected)
-				{
-					BonusEntity bonusEntity5 = this.ActiveLastUsed(_Item, _Kart);
-					(bonusEntity5 as SpringBonusEntity).Launch();
-				}
-				else if (Network.isServer)
-				{
-					BonusEntity bonusEntity6 = this.ActiveLastUsed(_Item, _Kart);
-					(bonusEntity6 as SpringBonusEntity).NetLaunch(_Kart.networkViewID);
-				}
+				_Kart.GetBonusMgr().GetBonusEffectMgr().ActivateBonusEffect(EBonusEffect.BONUSEFFECT_JUMP);
+				return;
 			}
-			else
+			if (Network.peerType == NetworkPeerType.Disconnected)
 			{
-				_Kart.GetBonusMgr().GetBonusEffectMgr().ActivateBonusEffect(EBonusEffect.BONUSEFFECT_JUMP);
+				(this.ActiveLastUsed(_Item, _Kart) as SpringBonusEntity).Launch();
+				return;
+			}
+			if (Network.isServer)
+			{
+				(this.ActiveLastUsed(_Item, _Kart) as SpringBonusEntity).NetLaunch(_Kart.networkViewID);
+				return;
 			}
 			break;
 		case EITEM.ITEM_LASAGNA:
 			_Kart.GetBonusMgr().GetBonusEffectMgr().ActivateBonusEffect(EBonusEffect.BONUSEFFECT_BOOST);
 			_Kart.KartSound.PlaySound(17);
-			break;
+			return;
 		case EITEM.ITEM_DIAMOND:
 			if (Network.peerType == NetworkPeerType.Disconnected)
 			{
-				BonusEntity bonusEntity7 = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity7 as DiamondBonusEntity).Launch(_Behind);
+				(this.ActiveLastUsed(_Item, _Kart) as DiamondBonusEntity).Launch(_Behind);
+				return;
 			}
-			else if (Network.isServer)
+			if (Network.isServer)
 			{
-				BonusEntity bonusEntity8 = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity8 as DiamondBonusEntity).NetLaunch(_Kart.networkViewID, _Behind);
+				(this.ActiveLastUsed(_Item, _Kart) as DiamondBonusEntity).NetLaunch(_Kart.networkViewID, _Behind);
+				return;
 			}
 			break;
 		case EITEM.ITEM_UFO:
 			this.m_pUFOEntity.Launcher = _Kart;
 			this.m_pUFOEntity.Launch();
-			break;
+			return;
 		case EITEM.ITEM_NAP:
 		{
 			int rank = _Kart.RaceStats.GetRank();
@@ -253,37 +248,35 @@ public class BonusMgr : Singleton<BonusMgr>
 			for (int i = 0; i < Singleton<GameManager>.Instance.GameMode.PlayerCount; i++)
 			{
 				Kart kart = Singleton<GameManager>.Instance.GameMode.GetKart(i);
-				if (kart != null && kart.Index != _Kart.Index)
+				if (kart != null && kart.Index != _Kart.Index && kart.RaceStats.GetRank() < rank)
 				{
-					int rank2 = kart.RaceStats.GetRank();
-					if (rank2 < rank)
+					ParfumeBonusEffect parfumeBonusEffect = (ParfumeBonusEffect)kart.GetBonusMgr().GetBonusEffectMgr().GetBonusEffect(EBonusEffect.BONUSEFFECT_ATTRACTED);
+					if (!parfumeBonusEffect.Activated || parfumeBonusEffect.StinkParfume)
 					{
-						ParfumeBonusEffect parfumeBonusEffect = (ParfumeBonusEffect)kart.GetBonusMgr().GetBonusEffectMgr().GetBonusEffect(EBonusEffect.BONUSEFFECT_ATTRACTED);
-						if (!parfumeBonusEffect.Activated || parfumeBonusEffect.StinkParfume)
-						{
-							((NapBonusEffect)kart.GetBonusMgr().GetBonusEffectMgr().GetBonusEffect(EBonusEffect.BONUSEFFECT_SLEPT)).Launcher = _Kart;
-							kart.GetBonusMgr().GetBonusEffectMgr().ActivateBonusEffect(EBonusEffect.BONUSEFFECT_SLEPT);
-						}
+						((NapBonusEffect)kart.GetBonusMgr().GetBonusEffectMgr().GetBonusEffect(EBonusEffect.BONUSEFFECT_SLEPT)).Launcher = _Kart;
+						kart.GetBonusMgr().GetBonusEffectMgr().ActivateBonusEffect(EBonusEffect.BONUSEFFECT_SLEPT);
 					}
 				}
 			}
-			break;
+			return;
 		}
 		case EITEM.ITEM_PARFUME:
 			_Kart.GetBonusMgr().GetBonusEffectMgr().ActivateBonusEffect(EBonusEffect.BONUSEFFECT_ATTRACTED);
-			break;
+			return;
 		case EITEM.ITEM_MAGIC:
 			if (Network.peerType == NetworkPeerType.Disconnected)
 			{
-				BonusEntity bonusEntity9 = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity9 as MagicBonusEntity).Launch();
+				(this.ActiveLastUsed(_Item, _Kart) as MagicBonusEntity).Launch();
+				return;
 			}
-			else if (Network.isServer)
+			if (Network.isServer)
 			{
-				BonusEntity bonusEntity10 = this.ActiveLastUsed(_Item, _Kart);
-				(bonusEntity10 as MagicBonusEntity).NetLaunch(_Kart.networkViewID);
+				(this.ActiveLastUsed(_Item, _Kart) as MagicBonusEntity).NetLaunch(_Kart.networkViewID);
+				return;
 			}
 			break;
+		default:
+			return;
 		}
 	}
 
@@ -310,21 +303,41 @@ public class BonusMgr : Singleton<BonusMgr>
 		switch (_Item)
 		{
 		case EITEM.ITEM_PIE:
-			_Tab = this.m_pPieEntities;
+		{
+			BonusEntity[] array = this.m_pPieEntities;
+			BonusEntity[] array2 = array;
+			_Tab = array2;
 			break;
+		}
 		case EITEM.ITEM_AUTOLOCK_PIE:
-			_Tab = this.m_pAutolockPieEntities;
+		{
+			BonusEntity[] array = this.m_pAutolockPieEntities;
+			BonusEntity[] array3 = array;
+			_Tab = array3;
 			break;
+		}
 		case EITEM.ITEM_SPRING:
-			_Tab = this.m_pSpringEntities;
+		{
+			BonusEntity[] array = this.m_pSpringEntities;
+			BonusEntity[] array4 = array;
+			_Tab = array4;
 			break;
+		}
 		case EITEM.ITEM_DIAMOND:
-			_Tab = this.m_pDiamondEntities;
+		{
+			BonusEntity[] array = this.m_pDiamondEntities;
+			BonusEntity[] array5 = array;
+			_Tab = array5;
 			break;
+		}
 		case EITEM.ITEM_MAGIC:
-			_Tab = this.m_pMagicEntities;
+		{
+			BonusEntity[] array = this.m_pMagicEntities;
+			BonusEntity[] array6 = array;
+			_Tab = array6;
 			break;
 		}
+		}
 		for (int i = 0; i < _Tab.Length; i++)
 		{
 			if (!_Tab[i].gameObject.activeSelf)
@@ -372,6 +385,43 @@ public class BonusMgr : Singleton<BonusMgr>
 		}
 	}
 
+	private UnityEngine.Object GenerateItem(EITEM _Item)
+	{
+		string path = string.Empty;
+		switch (_Item)
+		{
+		case EITEM.ITEM_PIE:
+			path = "Bonus/PieBonusEntity";
+			break;
+		case EITEM.ITEM_AUTOLOCK_PIE:
+			path = "Bonus/AutolockPieBonusEntity";
+			break;
+		case EITEM.ITEM_SPRING:
+			path = "Bonus/SpringBonusEntity";
+			break;
+		case EITEM.ITEM_DIAMOND:
+			path = "Bonus/DiamondBonusEntity";
+			break;
+		case EITEM.ITEM_UFO:
+			path = "Bonus/UfoBonusEntity";
+			break;
+		case EITEM.ITEM_MAGIC:
+			path = "Bonus/MagicBonusEntity";
+			break;
+		}
+		UnityEngine.Object @object = Resources.Load(path);
+		UnityEngine.Object result = null;
+		if (Network.isServer)
+		{
+			result = Network.Instantiate(@object, Vector3.zero, Quaternion.identity, 0);
+		}
+		else if (Network.peerType == NetworkPeerType.Disconnected)
+		{
+			result = UnityEngine.Object.Instantiate(@object);
+		}
+		return result;
+	}
+
 	public const int MAX_BONUS_ENTITY = 20;
 
 	public const int MAX_BONUS_DIAMOND = 8;
diff --git a/Assembly-CSharp/BoostBonusEffect.cs b/Assembly-CSharp/BoostBonusEffect.cs
index 894663b..096f7df 100644
--- a/Assembly-CSharp/BoostBonusEffect.cs
+++ b/Assembly-CSharp/BoostBonusEffect.cs
@@ -11,7 +11,7 @@ public class BoostBonusEffect : BonusEffect
 		this.m_bStoppedByAnim = false;
 	}
 
-	protected override void OnDestroy()
+	public override void OnDestroy()
 	{
 	}
 
@@ -39,11 +39,11 @@ public class BoostBonusEffect : BonusEffect
 		return true;
 	}
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	public float SpeedUp;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	public float Acceleration;
 }
diff --git a/Assembly-CSharp/BoxBonusEntity.cs b/Assembly-CSharp/BoxBonusEntity.cs
index 00074b8..be4ad2e 100644
--- a/Assembly-CSharp/BoxBonusEntity.cs
+++ b/Assembly-CSharp/BoxBonusEntity.cs
@@ -206,8 +206,8 @@ public class BoxBonusEntity : BonusEntity
 
 	public List<EITEM> MoreToLostPlayers = new List<EITEM>();
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	public int[] TwoBonusChance = new int[6];
 
 	[SerializeField]
@@ -218,8 +218,8 @@ public class BoxBonusEntity : BonusEntity
 	[HideInInspector]
 	public int[] BonusRatio = new int[6 * Enum.GetValues(typeof(EBonusCategory)).Length];
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	public int[] BonusRatioAI = new int[6 * Enum.GetValues(typeof(EBonusCategory)).Length];
 
 	public LayerMask layer;
diff --git a/Assembly-CSharp/BtnItemAdvantage.cs b/Assembly-CSharp/BtnItemAdvantage.cs
index 07f83b8..15cd5bc 100644
--- a/Assembly-CSharp/BtnItemAdvantage.cs
+++ b/Assembly-CSharp/BtnItemAdvantage.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class BtnItemAdvantage : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		Transform parent = base.transform.parent;
 		while (parent)
diff --git a/Assembly-CSharp/BtnSlotAdvantage.cs b/Assembly-CSharp/BtnSlotAdvantage.cs
index ce75617..5e8ac54 100644
--- a/Assembly-CSharp/BtnSlotAdvantage.cs
+++ b/Assembly-CSharp/BtnSlotAdvantage.cs
@@ -19,7 +19,7 @@ public class BtnSlotAdvantage : MonoBehaviour
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 		Transform parent = base.transform.parent;
 		while (parent)
@@ -37,10 +37,6 @@ public class BtnSlotAdvantage : MonoBehaviour
 		this.m_pIcon.gameObject.SetActive(false);
 	}
 
-	private void Update()
-	{
-	}
-
 	public void SetEnable(bool bIsEnabled)
 	{
 		base.gameObject.SetActive(bIsEnabled);
diff --git a/Assembly-CSharp/CameraBase.cs b/Assembly-CSharp/CameraBase.cs
index 89dbdc7..586c6b5 100644
--- a/Assembly-CSharp/CameraBase.cs
+++ b/Assembly-CSharp/CameraBase.cs
@@ -49,7 +49,7 @@ public class CameraBase : MonoBehaviour
 		this.CurrentState = this.m_StartState;
 	}
 
-	private void FixedUpdate()
+	public void FixedUpdate()
 	{
 		if (this.CurrentState == ECamState.None)
 		{
diff --git a/Assembly-CSharp/CarPresentationGameState.cs b/Assembly-CSharp/CarPresentationGameState.cs
index 181938f..9262407 100644
--- a/Assembly-CSharp/CarPresentationGameState.cs
+++ b/Assembly-CSharp/CarPresentationGameState.cs
@@ -40,7 +40,7 @@ public class CarPresentationGameState : GameState
 	{
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		this._presentationTimer -= Time.deltaTime;
 		if (this._presentationTimer < 0f || Input.anyKeyDown)
diff --git a/Assembly-CSharp/CoinsDisplayManager.cs b/Assembly-CSharp/CoinsDisplayManager.cs
index c6bf810..4f0da2e 100644
--- a/Assembly-CSharp/CoinsDisplayManager.cs
+++ b/Assembly-CSharp/CoinsDisplayManager.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class CoinsDisplayManager : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
 		this.m_pLabel = base.GetComponent<UILabel>();
 		CoinsDisplayManager.m_fMoney = (double)((float)Singleton<GameSaveManager>.Instance.GetCoins());
@@ -11,7 +11,7 @@ public class CoinsDisplayManager : MonoBehaviour
 		this.m_fSoundRequest = 0f;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (!this.m_pLabel)
 		{
@@ -32,7 +32,7 @@ public class CoinsDisplayManager : MonoBehaviour
 		}
 	}
 
-	private void OnEnable()
+	public void OnEnable()
 	{
 		this.DisplayMoney();
 	}
diff --git a/Assembly-CSharp/CreditsScrollingLabel.cs b/Assembly-CSharp/CreditsScrollingLabel.cs
index dd6ac10..064ddda 100644
--- a/Assembly-CSharp/CreditsScrollingLabel.cs
+++ b/Assembly-CSharp/CreditsScrollingLabel.cs
@@ -16,12 +16,12 @@ public class CreditsScrollingLabel : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		this.Label = base.GetComponent<UILabel>();
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this.Updatable)
 		{
diff --git a/Assembly-CSharp/CreditsScrollingPanel.cs b/Assembly-CSharp/CreditsScrollingPanel.cs
index 1ba3554..436f8f9 100644
--- a/Assembly-CSharp/CreditsScrollingPanel.cs
+++ b/Assembly-CSharp/CreditsScrollingPanel.cs
@@ -4,7 +4,7 @@ using UnityEngine;
 
 public class CreditsScrollingPanel : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
 		if (!this.CreditsMenu)
 		{
@@ -70,7 +70,7 @@ public class CreditsScrollingPanel : MonoBehaviour
 		}
 	}
 
-	private void OnEnable()
+	public void OnEnable()
 	{
 		this.Reset();
 		this.Load();
@@ -158,7 +158,7 @@ public class CreditsScrollingPanel : MonoBehaviour
 		return null;
 	}
 
-	private void Reset()
+	public void Reset()
 	{
 		this.m_iEndedLabels = 0;
 		for (int i = 0; i < this.ScrollingLabels.Count; i++)
diff --git a/Assembly-CSharp/Cryptography.cs b/Assembly-CSharp/Cryptography.cs
index b6cf476..e999253 100644
--- a/Assembly-CSharp/Cryptography.cs
+++ b/Assembly-CSharp/Cryptography.cs
@@ -6,14 +6,6 @@ using UnityEngine;
 
 public class Cryptography : MonoBehaviour
 {
-	private void Start()
-	{
-	}
-
-	private void Update()
-	{
-	}
-
 	public static string Encrypt(string pDataToEncrypt)
 	{
 		return Cryptography.Encrypt(pDataToEncrypt, Cryptography._sharedKey);
diff --git a/Assembly-CSharp/DebugAiHandler.cs b/Assembly-CSharp/DebugAiHandler.cs
index ea65c63..bb74e9a 100644
--- a/Assembly-CSharp/DebugAiHandler.cs
+++ b/Assembly-CSharp/DebugAiHandler.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class DebugAiHandler : AIPathHandler
 {
-	protected override void Start()
+	public override void Start()
 	{
 		if (Application.isPlaying)
 		{
@@ -29,7 +29,7 @@ public class DebugAiHandler : AIPathHandler
 		pAI.IdealPath = new RcFastValuePath(this.StartPath);
 	}
 
-	protected override void OnDrawGizmos()
+	public override void OnDrawGizmos()
 	{
 		base.OnDrawGizmos();
 	}
diff --git a/Assembly-CSharp/DebugMgr.cs b/Assembly-CSharp/DebugMgr.cs
index 4c9aa45..fddde3b 100644
--- a/Assembly-CSharp/DebugMgr.cs
+++ b/Assembly-CSharp/DebugMgr.cs
@@ -23,7 +23,7 @@ public class DebugMgr
 			}
 			if (this._dbgData == null)
 			{
-				Debug.LogWarning("Resources.Load('DebugSettings.asset') returns null");
+				UnityEngine.Debug.LogWarning("Resources.Load('DebugSettings.asset') returns null");
 			}
 			return this._dbgData;
 		}
@@ -84,7 +84,7 @@ public class DebugMgr
 	{
 		if (DebugMgr.Instance.dbgData.Categories[(int)cat])
 		{
-			Debug.Log(DebugMgr.GetHeader(frame, cat) + message + "\n\n--------------------\n");
+			UnityEngine.Debug.Log(DebugMgr.GetHeader(frame, cat) + message + "\n\n--------------------\n");
 		}
 	}
 
@@ -103,14 +103,14 @@ public class DebugMgr
 	{
 		if (DebugMgr.Instance.dbgData.Categories[(int)cat])
 		{
-			Debug.LogWarning(DebugMgr.GetHeader(frame, cat) + message + "\n\n--------------------\n");
+			UnityEngine.Debug.LogWarning(DebugMgr.GetHeader(frame, cat) + message + "\n\n--------------------\n");
 		}
 	}
 
 	[Conditional("DEBUG_MGR")]
 	public static void LogError(object message)
 	{
-		Debug.LogError(DebugMgr.GetHeader(2, EDbgCategory.ERROR) + message + "\n\n--------------------\n");
+		UnityEngine.Debug.LogError(DebugMgr.GetHeader(2, EDbgCategory.ERROR) + message + "\n\n--------------------\n");
 	}
 
 	[Conditional("DEBUG_MGR")]
diff --git a/Assembly-CSharp/DebugRemoveMaterial.cs b/Assembly-CSharp/DebugRemoveMaterial.cs
index 3c43c0b..6435fba 100644
--- a/Assembly-CSharp/DebugRemoveMaterial.cs
+++ b/Assembly-CSharp/DebugRemoveMaterial.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class DebugRemoveMaterial : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.RemoveMaterial(base.gameObject);
 	}
diff --git a/Assembly-CSharp/EndRaceGameState.cs b/Assembly-CSharp/EndRaceGameState.cs
index 9e8650a..a95e9a2 100644
--- a/Assembly-CSharp/EndRaceGameState.cs
+++ b/Assembly-CSharp/EndRaceGameState.cs
@@ -26,7 +26,7 @@ public class EndRaceGameState : GameState
 		}
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		if (!Singleton<GameManager>.Instance.SoundManager.SoundsList[3].isPlaying && !Singleton<GameManager>.Instance.SoundManager.SoundsList[4].isPlaying)
 		{
diff --git a/Assembly-CSharp/EntryPoint.cs b/Assembly-CSharp/EntryPoint.cs
index 2755df4..9267ce0 100644
--- a/Assembly-CSharp/EntryPoint.cs
+++ b/Assembly-CSharp/EntryPoint.cs
@@ -68,7 +68,7 @@ public class EntryPoint : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		if (LogManager.Instance != null)
 		{
@@ -90,7 +90,7 @@ public class EntryPoint : MonoBehaviour
 		instance.OnProductDataReceived = (Action<List<InAppProductData>>)Delegate.Remove(instance.OnProductDataReceived, new Action<List<InAppProductData>>(this.InAppProductDataReceived));
 	}
 
-	private void Start()
+	public void Start()
 	{
 		UnityEngine.Object[] array = Resources.LoadAll("InApp", typeof(InAppCarac));
 		Singleton<GameManager>.Instance.Init();
@@ -128,11 +128,12 @@ public class EntryPoint : MonoBehaviour
 			ASE_ChartBoost.CacheInterstitial("Default");
 			ASE_ChartBoost.CacheMoreApps();
 			ASE_Facebook.Connect(Singleton<GameConfigurator>.Instance.FacebookAppID);
+			ASE_Flurry.Init(this.FlurryApiID);
 		}
 		this.m_eFacebookState = EntryPoint.eFacebookState.None;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		DebugMgr.Instance.NullSafe(delegate(DebugMgr i)
 		{
@@ -143,7 +144,7 @@ public class EntryPoint : MonoBehaviour
 		});
 	}
 
-	private void LateUpdate()
+	public void LateUpdate()
 	{
 		Singleton<InputManager>.Instance.Update();
 	}
@@ -340,6 +341,52 @@ public class EntryPoint : MonoBehaviour
 		}
 	}
 
+	public void OnApplicationQuit()
+	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.Stop();
+		}
+	}
+
+	public void OnApplicationPause(bool goingPause)
+	{
+		if (ASE_Tools.Available)
+		{
+			if (goingPause)
+			{
+				ASE_Flurry.Stop();
+			}
+			else
+			{
+				ASE_Flurry.Init(this.FlurryApiID);
+			}
+		}
+	}
+
+	private void SetupScreen()
+	{
+		if (SystemInfo.deviceModel == "Amazon KFAPWA" || SystemInfo.deviceModel == "Amazon KFAPWI" || SystemInfo.deviceModel == "Amazon KFTHWA" || SystemInfo.deviceModel == "Amazon KFTHWI" || SystemInfo.deviceModel == "Amazon KFSOWI")
+		{
+			if (Input.deviceOrientation == DeviceOrientation.LandscapeLeft)
+			{
+				Screen.orientation = ScreenOrientation.LandscapeRight;
+			}
+			else if (Input.deviceOrientation == DeviceOrientation.LandscapeRight)
+			{
+				Screen.orientation = ScreenOrientation.LandscapeLeft;
+			}
+		}
+		else if (Input.deviceOrientation == DeviceOrientation.LandscapeLeft)
+		{
+			Screen.orientation = ScreenOrientation.LandscapeLeft;
+		}
+		else if (Input.deviceOrientation == DeviceOrientation.LandscapeRight)
+		{
+			Screen.orientation = ScreenOrientation.LandscapeRight;
+		}
+	}
+
 	public string StartScene = "MenuRoot";
 
 	private List<InAppProductData> m_pInAppProduct = new List<InAppProductData>();
@@ -358,6 +405,8 @@ public class EntryPoint : MonoBehaviour
 
 	public string FacebookAppID = "YOUR_FACEBOOK_ID";
 
+	public string FlurryApiID = "YOUR_FLURRY_API_KEY";
+
 	private bool m_bDisplayHighlightTutorial;
 
 	private bool m_bAskForRating;
diff --git a/Assembly-CSharp/Escape.cs b/Assembly-CSharp/Escape.cs
index 9dc30ae..1184603 100644
--- a/Assembly-CSharp/Escape.cs
+++ b/Assembly-CSharp/Escape.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class Escape : MonoBehaviour
 {
-	private void Update()
+	public void Update()
 	{
 		if (Input.GetKeyDown(KeyCode.Escape))
 		{
diff --git a/Assembly-CSharp/ForecastClient.cs b/Assembly-CSharp/ForecastClient.cs
index 4c9ab25..80964db 100644
--- a/Assembly-CSharp/ForecastClient.cs
+++ b/Assembly-CSharp/ForecastClient.cs
@@ -88,7 +88,7 @@ public class ForecastClient : ForecastedCar
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 		RcVehicle vehicle = this.Vehicle;
 		vehicle.OnTeleported = (Action)Delegate.Combine(vehicle.OnTeleported, new Action(this.NeedResetBorderPositions));
diff --git a/Assembly-CSharp/FpsDisplay.cs b/Assembly-CSharp/FpsDisplay.cs
index 399c4c9..e774ce3 100644
--- a/Assembly-CSharp/FpsDisplay.cs
+++ b/Assembly-CSharp/FpsDisplay.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class FpsDisplay : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		if (!base.guiText)
 		{
@@ -13,7 +13,7 @@ public class FpsDisplay : MonoBehaviour
 		this.timeleft = this.updateInterval;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		this.timeleft -= Time.deltaTime;
 		this.accum += Time.timeScale / Time.deltaTime;
diff --git a/Assembly-CSharp/GameEntryPoint.cs b/Assembly-CSharp/GameEntryPoint.cs
index 017992d..56131a9 100644
--- a/Assembly-CSharp/GameEntryPoint.cs
+++ b/Assembly-CSharp/GameEntryPoint.cs
@@ -12,8 +12,18 @@ public class GameEntryPoint : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
+		string path;
+		if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
+		{
+			path = "Camera/followCamMobile";
+		}
+		else
+		{
+			path = "Camera/followCam";
+		}
+		UnityEngine.Object.Instantiate(Resources.Load(path) as GameObject);
 		this.m_eState = GameEntryPoint.ECreationState.None;
 		this.networkMgr = (NetworkMgr)UnityEngine.Object.FindObjectOfType(typeof(NetworkMgr));
 		this.m_pSounds = (GameObject)UnityEngine.Object.Instantiate(Resources.Load("Sounds"));
@@ -25,7 +35,7 @@ public class GameEntryPoint : MonoBehaviour
 		Screen.sleepTimeout = -1;
 	}
 
-	private IEnumerator Start()
+	public IEnumerator Start()
 	{
 		if (DebugMgr.Instance != null && Singleton<GameConfigurator>.Instance.StartScene.Equals("MenuRoot"))
 		{
@@ -49,7 +59,7 @@ public class GameEntryPoint : MonoBehaviour
 		yield break;
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		Screen.sleepTimeout = -2;
 		Singleton<BonusMgr>.DestroyInstance();
@@ -60,9 +70,10 @@ public class GameEntryPoint : MonoBehaviour
 	{
 		if (this.m_eState == GameEntryPoint.ECreationState.SceneLoaded)
 		{
-			foreach (RcPortalTrigger rcPortalTrigger in UnityEngine.Object.FindSceneObjectsOfType(typeof(RcPortalTrigger)))
+			UnityEngine.Object[] array = UnityEngine.Object.FindSceneObjectsOfType(typeof(RcPortalTrigger));
+			for (int j = 0; j < array.Length; j++)
 			{
-				rcPortalTrigger.enabled = false;
+				((RcPortalTrigger)array[j]).enabled = false;
 			}
 			if (Network.peerType == NetworkPeerType.Disconnected || !this.networkMgr.WaitingSynchronization)
 			{
@@ -73,20 +84,26 @@ public class GameEntryPoint : MonoBehaviour
 				{
 					this.networkMgr.StartSynchronization();
 				}
+				return;
 			}
 		}
-		else if (this.m_eState == GameEntryPoint.ECreationState.PlayersCreated && this.m_iStep++ > 5 && (Network.peerType == NetworkPeerType.Disconnected || !this.networkMgr.WaitingSynchronization))
+		else if (this.m_eState == GameEntryPoint.ECreationState.PlayersCreated)
 		{
-			if (GameEntryPoint.OnVehicleCreated != null)
+			int iStep = this.m_iStep;
+			this.m_iStep = iStep + 1;
+			if (iStep > 5 && (Network.peerType == NetworkPeerType.Disconnected || !this.networkMgr.WaitingSynchronization))
 			{
-				GameEntryPoint.OnVehicleCreated();
+				if (GameEntryPoint.OnVehicleCreated != null)
+				{
+					GameEntryPoint.OnVehicleCreated();
+				}
+				Singleton<GameManager>.Instance.GameMode.StartScene();
+				Singleton<BonusMgr>.Instance.NullSafe(delegate(BonusMgr i)
+				{
+					i.StartScene();
+				});
+				this.m_eState = GameEntryPoint.ECreationState.SceneStarted;
 			}
-			Singleton<GameManager>.Instance.GameMode.StartScene();
-			Singleton<BonusMgr>.Instance.NullSafe(delegate(BonusMgr i)
-			{
-				i.StartScene();
-			});
-			this.m_eState = GameEntryPoint.ECreationState.SceneStarted;
 		}
 	}
 
diff --git a/Assembly-CSharp/GameManager.cs b/Assembly-CSharp/GameManager.cs
index 9ef8927..e4ef77e 100644
--- a/Assembly-CSharp/GameManager.cs
+++ b/Assembly-CSharp/GameManager.cs
@@ -98,6 +98,7 @@ public class GameManager : Singleton<GameManager>
 
 	public void CreatePlayers()
 	{
+		Debug.Log(this.m_pGameMode);
 		this.m_pGameMode.CreatePlayers();
 	}
 
@@ -112,4 +113,19 @@ public class GameManager : Singleton<GameManager>
 	private SoundManager m_pSoundManager;
 
 	private NetworkView m_pNetworkView;
+
+	public GameManager.MultiplayerModifiers Modifiers;
+
+	public static string CHEATER_NAME = "Dirty Cheater";
+
+	public struct MultiplayerModifiers
+	{
+		public bool KickCheaters;
+
+		public bool BottomlessPowerups;
+
+		public bool SleepsOnly;
+
+		public bool JumpyBots;
+	}
 }
diff --git a/Assembly-CSharp/GameMode.cs b/Assembly-CSharp/GameMode.cs
index 001ce80..ba29f49 100644
--- a/Assembly-CSharp/GameMode.cs
+++ b/Assembly-CSharp/GameMode.cs
@@ -241,7 +241,7 @@ public abstract class GameMode : MonoBehaviour
 		{
 			if (this.m_pPlayers[i] != null && this.m_pPlayers[i].Item2 != null && this.m_pPlayers[i].Item1 != null)
 			{
-				bool flag = this.m_pPlayers[i].Item2.GetControlType() != RcVehicle.ControlType.Human;
+				bool flag = this.m_pPlayers[i].Item2.GetControlType() > RcVehicle.ControlType.Human;
 				CharacterCarac componentInChildren = this.m_pPlayers[i].Item1.GetComponentInChildren<CharacterCarac>();
 				if (((bOnlyAI && flag) || !bOnlyAI) && componentInChildren && componentInChildren.Owner == _Character)
 				{
@@ -282,7 +282,7 @@ public abstract class GameMode : MonoBehaviour
 		{
 			if (this.m_pPlayers[i] != null && this.m_pPlayers[i].Item2 != null && this.m_pPlayers[i].Item1 != null)
 			{
-				bool flag = this.m_pPlayers[i].Item2.GetControlType() != RcVehicle.ControlType.Human;
+				bool flag = this.m_pPlayers[i].Item2.GetControlType() > RcVehicle.ControlType.Human;
 				CharacterCarac componentInChildren = this.m_pPlayers[i].Item1.GetComponentInChildren<CharacterCarac>();
 				if (((bOnlyAI && flag) || !bOnlyAI) && componentInChildren && componentInChildren.Owner == _Character)
 				{
@@ -324,7 +324,7 @@ public abstract class GameMode : MonoBehaviour
 			{
 				this.m_pPlayers[i].Item1 = _Player;
 				this.m_pPlayers[i].Item2 = _Kart;
-				break;
+				return;
 			}
 		}
 	}
@@ -371,15 +371,13 @@ public abstract class GameMode : MonoBehaviour
 		if (Network.peerType == NetworkPeerType.Disconnected)
 		{
 			this.DoSelectAdvantage(iIndex, (int)eAdvantage);
+			return;
 		}
-		else
+		base.networkView.RPC("DoSelectAdvantage", RPCMode.All, new object[]
 		{
-			base.networkView.RPC("DoSelectAdvantage", RPCMode.All, new object[]
-			{
-				iIndex,
-				(int)eAdvantage
-			});
-		}
+			iIndex,
+			(int)eAdvantage
+		});
 	}
 
 	[RPC]
@@ -396,7 +394,7 @@ public abstract class GameMode : MonoBehaviour
 		}
 	}
 
-	protected Tuple<GameObject, Kart>[] m_pPlayers;
+	public Tuple<GameObject, Kart>[] m_pPlayers;
 
 	protected HUDInGame _hud;
 
diff --git a/Assembly-CSharp/GameOptionManager.cs b/Assembly-CSharp/GameOptionManager.cs
index 5461c33..731e4d3 100644
--- a/Assembly-CSharp/GameOptionManager.cs
+++ b/Assembly-CSharp/GameOptionManager.cs
@@ -1,10 +1,49 @@
 ï»¿using System;
+using System.IO;
+using System.Linq;
+using System.Text.RegularExpressions;
 using UnityEngine;
 
 public class GameOptionManager : Singleton<GameOptionManager>
 {
 	public void Init()
 	{
+		string text = string.Empty;
+		if (Application.platform != RuntimePlatform.Android && Application.platform != RuntimePlatform.IPhonePlayer)
+		{
+			string text2 = Application.dataPath + "/../External/Language.csv";
+			if (!File.Exists(text2))
+			{
+				Debug.LogWarning(text2 + " not exist");
+			}
+			string[] array = File.ReadAllText(text2).Split(new char[]
+			{
+				';'
+			});
+			if ((array.Length == 1 && array[0] != string.Empty) || (array.Length == 2 && array[1] == string.Empty && array[0] != string.Empty))
+			{
+				string[] array2 = GameOptionManager.SplitCsvLine(array[0]);
+				text = array2[0];
+			}
+		}
+		if (text == string.Empty)
+		{
+			this.m_oLanguageList = Array.ConvertAll<UnityEngine.Object, TextAsset>(Resources.LoadAll("Localization", typeof(TextAsset)), (UnityEngine.Object o) => (TextAsset)o);
+		}
+		else
+		{
+			this.m_oLanguageList = new TextAsset[1];
+			TextAsset textAsset = Resources.Load("Localization/" + text, typeof(TextAsset)) as TextAsset;
+			if (textAsset != null)
+			{
+				this.m_oLanguageList[0] = textAsset;
+			}
+			else
+			{
+				this.m_oLanguageList[0] = (Resources.Load("Localization/Lang_DB_UK", typeof(TextAsset)) as TextAsset);
+			}
+		}
+		Localization.instance.languages = this.m_oLanguageList;
 		this.Load(out this._language, out this._sfxVolume, out this._musicVolume, out this._gyroSensibility, out this._inputType, out this._gameSave);
 		this.Save();
 	}
@@ -55,7 +94,8 @@ public class GameOptionManager : Singleton<GameOptionManager>
 		{
 			eLangId = GameOptionManager.ELangID.French;
 		}
-		string @string = opGameSave.GetString("lang_", this.ConvertLangIdToString(eLangId));
+		string gameLanguage = this.GetGameLanguage(eLangId);
+		string @string = opGameSave.GetString("lang_", gameLanguage);
 		this.SetLanguage(@string, false);
 		opLanguage = this.GetCurrentLangId();
 		opSfxVolume = opGameSave.GetFloat("sfx_", 0.5f);
@@ -134,9 +174,10 @@ public class GameOptionManager : Singleton<GameOptionManager>
 
 	public void SetLanguage(GameOptionManager.ELangID eLanguage, bool pSave)
 	{
-		this._language = eLanguage;
-		Localization.instance.currentLanguage = this.ConvertLangIdToString(eLanguage);
-		this._gameSave.SetString("lang_", this.ConvertLangIdToString(eLanguage));
+		string gameLanguage = this.GetGameLanguage(eLanguage);
+		this._language = this.ConvertLangStringToId(gameLanguage);
+		Localization.instance.currentLanguage = gameLanguage;
+		this._gameSave.SetString("lang_", gameLanguage);
 		if (pSave)
 		{
 			this.Save();
@@ -156,17 +197,17 @@ public class GameOptionManager : Singleton<GameOptionManager>
 	public string ConvertLangIdToString(GameOptionManager.ELangID eLangId)
 	{
 		uint num = (uint)eLangId;
-		if ((ulong)num >= (ulong)((long)GameOptionManager.m_oLanguageList.Length))
+		if ((ulong)num >= (ulong)((long)GameOptionManager.m_oLanguageCodeList.Length))
 		{
 			num = 1u;
 		}
-		return GameOptionManager.m_oLanguageList[(int)((UIntPtr)num)];
+		return GameOptionManager.m_oLanguageCodeList[(int)((UIntPtr)num)];
 	}
 
 	public GameOptionManager.ELangID ConvertLangStringToId(string sLang)
 	{
 		int num = 0;
-		foreach (string a in GameOptionManager.m_oLanguageList)
+		foreach (string a in GameOptionManager.m_oLanguageCodeList)
 		{
 			if (a == sLang)
 			{
@@ -177,6 +218,34 @@ public class GameOptionManager : Singleton<GameOptionManager>
 		return GameOptionManager.ELangID.English;
 	}
 
+	public int GetLanguagesNumber()
+	{
+		return this.m_oLanguageList.Length;
+	}
+
+	public string GetGameLanguage(GameOptionManager.ELangID eLangId)
+	{
+		string text = this.ConvertLangIdToString(eLangId);
+		for (int i = 0; i < this.m_oLanguageList.Length; i++)
+		{
+			if (text == this.m_oLanguageList[i].name)
+			{
+				return text;
+			}
+		}
+		if (this.m_oLanguageList.Length > 0)
+		{
+			return this.m_oLanguageList[0].name;
+		}
+		return string.Empty;
+	}
+
+	public static string[] SplitCsvLine(string line)
+	{
+		return (from Match m in Regex.Matches(line, "(((?<x>(?=[,\\r\\n]+))|\"(?<x>([^\"]|\"\")+)\"|(?<x>[^,\\r\\n]+)),?)", RegexOptions.ExplicitCapture)
+		select m.Groups[1].Value).ToArray<string>();
+	}
+
 	private const string _LANGUAGE = "lang_";
 
 	private const string _SFXVOL = "sfx_";
@@ -201,7 +270,9 @@ public class GameOptionManager : Singleton<GameOptionManager>
 
 	private E_InputType _inputType;
 
-	private static string[] m_oLanguageList = new string[]
+	private TextAsset[] m_oLanguageList;
+
+	private static string[] m_oLanguageCodeList = new string[]
 	{
 		"Lang_DB_FR",
 		"Lang_DB_UK",
diff --git a/Assembly-CSharp/GameSaveManager.cs b/Assembly-CSharp/GameSaveManager.cs
index 2ee901d..85a996b 100644
--- a/Assembly-CSharp/GameSaveManager.cs
+++ b/Assembly-CSharp/GameSaveManager.cs
@@ -6,7 +6,7 @@ public class GameSaveManager : Singleton<GameSaveManager>
 {
 	public void Init()
 	{
-		this.Load(out this._coins, out this._collectedCoins, out this._comicStrips, out this._puzzlePieces, out this._timeTrialRecords, out this._hats, out this._customs, out this._championShipsRecords, out this._characters, out this._karts, out this._championsShips, out this._timeTrialInfos, out this._advantagesQuantity, out this._advantages, out this._timeTrialMedals, out this._timeTrialBestTimes, out this._challenge, out this._pseudo, out this._gameSave, out this._playerConfig, out this._showTuto, out this._firstTime, out this._askRating, out this._askSharing);
+		this.Load(out this._coins, out this._collectedCoins, out this._comicStrips, out this._puzzlePieces, out this._timeTrialRecords, out this._hats, out this._customs, out this._championShipsRecords, out this._characters, out this._karts, out this._championsShips, out this._timeTrialInfos, out this._advantagesQuantity, out this._advantages, out this._timeTrialMedals, out this._timeTrialBestTimes, out this._challenge, out this._pseudo, out this._gameSave, out this._playerConfig, out this._showTuto, out this._firstTime, out this._askRating, out this._askSharing, out this._matchmakingServer);
 		this.Save();
 		this.CheckEasyChampionShipStar(false);
 		this.CheckNormalChampionShipStar(false);
@@ -15,235 +15,6 @@ public class GameSaveManager : Singleton<GameSaveManager>
 		this.CheckEndStar(false);
 	}
 
-	public void Load(out int opCoins, out int opCollectedCoins, out Dictionary<string, E_UnlockableItemSate> opComicStrips, out Dictionary<string, bool> opPuzzlePieces, out Dictionary<string, int> opTimeTrialRecords, out Dictionary<string, E_UnlockableItemSate> opHats, out Dictionary<string, E_UnlockableItemSate> opCustoms, out Dictionary<string, int> opChampionShipsRecords, out Dictionary<string, E_UnlockableItemSate> opCharacters, out Dictionary<string, E_UnlockableItemSate> opKarts, out Dictionary<string, E_UnlockableItemSate> opChampionShips, out Dictionary<string, string> opTimeTrialInfos, out Dictionary<string, int> opAdvantagesQuantity, out Dictionary<string, E_UnlockableItemSate> opAdvantages, out Dictionary<string, E_TimeTrialMedal> opMedals, out Dictionary<string, int> opBestTimes, out string opChallenge, out string opPseudo, out GameSave opGameSave, out string opPlayerConfig, out bool opShowTuto, out bool opFirstTime, out int opAskRating, out bool opAskSharing)
-	{
-		opCoins = 0;
-		opCollectedCoins = 0;
-		opComicStrips = new Dictionary<string, E_UnlockableItemSate>();
-		opPuzzlePieces = new Dictionary<string, bool>();
-		opTimeTrialRecords = new Dictionary<string, int>();
-		opHats = new Dictionary<string, E_UnlockableItemSate>();
-		opCustoms = new Dictionary<string, E_UnlockableItemSate>();
-		opChampionShipsRecords = new Dictionary<string, int>();
-		opCharacters = new Dictionary<string, E_UnlockableItemSate>();
-		opKarts = new Dictionary<string, E_UnlockableItemSate>();
-		opChampionShips = new Dictionary<string, E_UnlockableItemSate>();
-		opTimeTrialInfos = new Dictionary<string, string>();
-		opAdvantagesQuantity = new Dictionary<string, int>();
-		opAdvantages = new Dictionary<string, E_UnlockableItemSate>();
-		opMedals = new Dictionary<string, E_TimeTrialMedal>();
-		opBestTimes = new Dictionary<string, int>();
-		opChallenge = string.Empty;
-		opGameSave = GameSave.Load("progession");
-		opPseudo = string.Empty;
-		opPseudo = opGameSave.GetString("PSEUDO", string.Empty);
-		string text = string.Format("{0};{1};{2};{3}", new object[]
-		{
-			ECharacter.GARFIELD,
-			ECharacter.HARRY,
-			"None",
-			"None"
-		});
-		opPlayerConfig = text;
-		opPlayerConfig = opGameSave.GetString("CONFIG", text);
-		opShowTuto = opGameSave.GetBool("SHOWTUTO", true);
-		opFirstTime = opGameSave.GetBool("FIRSTTIME", true);
-		opAskRating = opGameSave.GetInt("ASKRATING", 0);
-		opAskSharing = opGameSave.GetBool("ASKSHARING", true);
-		opCoins = opGameSave.GetInt("coins", 400);
-		opCollectedCoins = opGameSave.GetInt("col_coins", 0);
-		UnityEngine.Object @object = Resources.Load("Tracks", typeof(TrackList));
-		string[] tracks = ((TrackList)@object).Tracks;
-		foreach (string str in tracks)
-		{
-			string text2 = "ct_" + str;
-			int @int = opGameSave.GetInt(text2, 0);
-			if (!opComicStrips.ContainsKey(text2))
-			{
-				opComicStrips.Add(text2, (E_UnlockableItemSate)@int);
-			}
-			for (int j = 0; j < 3; j++)
-			{
-				string text3 = "pp_" + str + "_" + j.ToString();
-				bool @bool = opGameSave.GetBool(text3, false);
-				if (!opPuzzlePieces.ContainsKey(text3))
-				{
-					opPuzzlePieces.Add(text3, @bool);
-				}
-			}
-			string text4 = "tt_" + str;
-			int int2 = opGameSave.GetInt(text4, -1);
-			if (!opTimeTrialRecords.ContainsKey(text4))
-			{
-				opTimeTrialRecords.Add(text4, int2);
-			}
-			string text5 = text4.Replace("tt_", "tf_");
-			string pDefaultValue = string.Format("{0};{1};{2};{3}", new object[]
-			{
-				ECharacter.NONE,
-				ECharacter.NONE,
-				"None",
-				"None"
-			});
-			string @string = opGameSave.GetString(text5, pDefaultValue);
-			if (!opTimeTrialInfos.ContainsKey(text5))
-			{
-				opTimeTrialInfos.Add(text5, @string);
-			}
-			string text6 = text4.Replace("tt_", "tb_");
-			int int3 = opGameSave.GetInt(text6, -1);
-			if (!opBestTimes.ContainsKey(text6))
-			{
-				opBestTimes.Add(text6, int3);
-			}
-			string text7 = text4.Replace("tt_", "tm_");
-			int int4 = opGameSave.GetInt(text7, 0);
-			opMedals.Add(text7, (E_TimeTrialMedal)int4);
-		}
-		UnityEngine.Object[] array2 = Resources.LoadAll("Hat", typeof(BonusCustom));
-		foreach (UnityEngine.Object object2 in array2)
-		{
-			string text8 = "ht_" + object2.name;
-			int int5 = opGameSave.GetInt(text8, (int)((BonusCustom)object2).State);
-			if (!opHats.ContainsKey(text8))
-			{
-				opHats.Add(text8, (E_UnlockableItemSate)int5);
-			}
-		}
-		UnityEngine.Object[] array4 = Resources.LoadAll("Kart", typeof(KartCustom));
-		foreach (UnityEngine.Object object3 in array4)
-		{
-			string text9 = "cm_" + object3.name;
-			int int6 = opGameSave.GetInt(text9, (int)((KartCustom)object3).State);
-			if (!opCustoms.ContainsKey(text9))
-			{
-				opCustoms.Add(text9, (E_UnlockableItemSate)int6);
-			}
-		}
-		UnityEngine.Object[] array6 = Resources.LoadAll("ChampionShip", typeof(ChampionShipData));
-		string name = array6[0].name;
-		foreach (UnityEngine.Object object4 in array6)
-		{
-			string str2 = "cr_" + object4.name;
-			string text10 = str2 + "_Easy";
-			int int7 = opGameSave.GetInt(text10, -1);
-			if (!opChampionShipsRecords.ContainsKey(text10))
-			{
-				opChampionShipsRecords.Add(text10, int7);
-			}
-			string text11 = str2 + "_Normal";
-			int int8 = opGameSave.GetInt(text11, -1);
-			if (!opChampionShipsRecords.ContainsKey(text11))
-			{
-				opChampionShipsRecords.Add(text11, int8);
-			}
-			string text12 = str2 + "_Hard";
-			int int9 = opGameSave.GetInt(text12, -1);
-			if (!opChampionShipsRecords.ContainsKey(text12))
-			{
-				opChampionShipsRecords.Add(text12, int9);
-			}
-			string str3 = "cs_" + object4.name;
-			string text13 = str3 + "_Easy";
-			int int10 = opGameSave.GetInt(text13, (int)((ChampionShipData)object4).EasyState);
-			if (!opChampionShips.ContainsKey(text13))
-			{
-				opChampionShips.Add(text13, (E_UnlockableItemSate)int10);
-			}
-			string text14 = str3 + "_Normal";
-			int int11 = opGameSave.GetInt(text14, (int)((ChampionShipData)object4).NormalState);
-			if (!opChampionShips.ContainsKey(text14))
-			{
-				opChampionShips.Add(text14, (E_UnlockableItemSate)int11);
-			}
-			string text15 = str3 + "_Hard";
-			int int12 = opGameSave.GetInt(text15, (int)((ChampionShipData)object4).HardState);
-			if (!opChampionShips.ContainsKey(text15))
-			{
-				opChampionShips.Add(text15, (E_UnlockableItemSate)int12);
-			}
-		}
-		UnityEngine.Object[] array8 = Resources.LoadAll("Character", typeof(CharacterCarac));
-		for (int n = 0; n < array8.Length; n++)
-		{
-			if (array8[n] is CharacterCarac)
-			{
-				CharacterCarac characterCarac = (CharacterCarac)array8[n];
-				string str4 = characterCarac.Owner.ToString();
-				string text16 = "ch_" + str4;
-				int int13 = opGameSave.GetInt(text16, (int)characterCarac.State);
-				if (!opCharacters.ContainsKey(text16))
-				{
-					opCharacters.Add(text16, (E_UnlockableItemSate)int13);
-				}
-			}
-		}
-		UnityEngine.Object[] array9 = Resources.LoadAll("Kart", typeof(KartCarac));
-		for (int num = 0; num < array9.Length; num++)
-		{
-			if (array9[num] is KartCarac)
-			{
-				KartCarac kartCarac = (KartCarac)array9[num];
-				string str5 = kartCarac.Owner.ToString();
-				string text17 = "kt_" + str5;
-				int int14 = opGameSave.GetInt(text17, (int)kartCarac.State);
-				if (!opKarts.ContainsKey(text17))
-				{
-					opKarts.Add(text17, (E_UnlockableItemSate)int14);
-				}
-			}
-		}
-		UnityEngine.Object[] array10 = Resources.LoadAll("Advantages", typeof(AdvantageData));
-		for (int num2 = 0; num2 < array10.Length; num2++)
-		{
-			if (array10[num2] is AdvantageData)
-			{
-				AdvantageData advantageData = (AdvantageData)array10[num2];
-				string str6 = advantageData.AdvantageType.ToString();
-				string text18 = "av_" + str6;
-				int int15 = opGameSave.GetInt(text18, (int)advantageData.State);
-				if (!opAdvantages.ContainsKey(text18))
-				{
-					opAdvantages.Add(text18, (E_UnlockableItemSate)int15);
-				}
-				string text19 = "aq_" + str6;
-				int pDefaultValue2 = 0;
-				if (advantageData.State != E_UnlockableItemSate.Hidden)
-				{
-					pDefaultValue2 = 2;
-				}
-				int int16 = opGameSave.GetInt(text19, pDefaultValue2);
-				if (!opAdvantagesQuantity.ContainsKey(text19))
-				{
-					opAdvantagesQuantity.Add(text19, int16);
-				}
-			}
-		}
-		string format = "{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{15};{16}";
-		object[] array11 = new object[17];
-		int num3 = 0;
-		DateTime dateTime = new DateTime(2000, 1, 1);
-		array11[num3] = dateTime.ToString("ddMMyyyy");
-		array11[1] = E_GameModeType.SINGLE.ToString();
-		array11[2] = EChallengeFirstObjective.FinishAtPosX.ToString();
-		array11[3] = ECharacter.NONE.ToString();
-		array11[4] = EChallengeSingleRaceObjective.EarnXCoins.ToString();
-		array11[5] = EChallengeChampionshipObjective.EarnXCoins.ToString();
-		array11[6] = E_TimeTrialMedal.None.ToString();
-		array11[7] = ECharacter.NONE.ToString();
-		array11[8] = ECharacter.NONE.ToString();
-		array11[9] = name;
-		array11[10] = 0.ToString();
-		array11[11] = EChallengeState.NotPlayed;
-		array11[12] = true.ToString();
-		array11[13] = EDifficulty.NORMAL;
-		array11[14] = string.Empty;
-		array11[15] = E_RewardType.Custom;
-		array11[16] = ERarity.Base;
-		string pDefaultValue3 = string.Format(format, array11);
-		opChallenge = opGameSave.GetString("chal", pDefaultValue3);
-	}
-
 	public void Save()
 	{
 		this._gameSave.Save();
@@ -577,7 +348,7 @@ public class GameSaveManager : Singleton<GameSaveManager>
 
 	public bool IsPuzzlePieceUnlocked(string pPiece)
 	{
-		return this._puzzlePieces["pp_" + pPiece];
+		return Network.isClient || Network.isServer || this._puzzlePieces["pp_" + pPiece];
 	}
 
 	public void UnlockPuzzlePiece(string pPiece, bool pSave)
@@ -609,6 +380,10 @@ public class GameSaveManager : Singleton<GameSaveManager>
 
 	public E_UnlockableItemSate GetHatState(string pHat)
 	{
+		if (Network.isClient || Network.isServer)
+		{
+			return E_UnlockableItemSate.Unlocked;
+		}
 		return this._hats["ht_" + pHat];
 	}
 
@@ -639,6 +414,10 @@ public class GameSaveManager : Singleton<GameSaveManager>
 
 	public E_UnlockableItemSate GetCustomState(string pCustom)
 	{
+		if (Network.isClient || Network.isServer)
+		{
+			return E_UnlockableItemSate.Unlocked;
+		}
 		return this._customs["cm_" + pCustom];
 	}
 
@@ -669,6 +448,10 @@ public class GameSaveManager : Singleton<GameSaveManager>
 
 	public E_UnlockableItemSate GetCharacterState(ECharacter pCharacter)
 	{
+		if (Network.isClient || Network.isServer)
+		{
+			return E_UnlockableItemSate.Unlocked;
+		}
 		return this._characters["ch_" + pCharacter.ToString()];
 	}
 
@@ -685,6 +468,10 @@ public class GameSaveManager : Singleton<GameSaveManager>
 
 	public E_UnlockableItemSate GetKartState(ECharacter pKart)
 	{
+		if (Network.isClient || Network.isServer)
+		{
+			return E_UnlockableItemSate.Unlocked;
+		}
 		return this._karts["kt_" + pKart.ToString()];
 	}
 
@@ -748,12 +535,14 @@ public class GameSaveManager : Singleton<GameSaveManager>
 			if (pDifficulty == EDifficulty.EASY && !Singleton<GameConfigurator>.Instance.PlayerConfig.HasEasyChampionShipStar)
 			{
 				this.CheckEasyChampionShipStar(true);
+				return;
 			}
-			else if (pDifficulty == EDifficulty.NORMAL && !Singleton<GameConfigurator>.Instance.PlayerConfig.HasNormalChampionShipStar)
+			if (pDifficulty == EDifficulty.NORMAL && !Singleton<GameConfigurator>.Instance.PlayerConfig.HasNormalChampionShipStar)
 			{
 				this.CheckNormalChampionShipStar(true);
+				return;
 			}
-			else if (pDifficulty == EDifficulty.HARD && !Singleton<GameConfigurator>.Instance.PlayerConfig.HasHardChampionShipStar)
+			if (pDifficulty == EDifficulty.HARD && !Singleton<GameConfigurator>.Instance.PlayerConfig.HasHardChampionShipStar)
 			{
 				this.CheckHardChampionShipStar(true);
 			}
@@ -762,6 +551,10 @@ public class GameSaveManager : Singleton<GameSaveManager>
 
 	public E_UnlockableItemSate GetChampionShipState(string pChampionShip, EDifficulty pDifficulty)
 	{
+		if (Network.isClient || Network.isServer)
+		{
+			return E_UnlockableItemSate.Unlocked;
+		}
 		string str = this.DifficultyToString(pDifficulty);
 		string key = "cs_" + pChampionShip + str;
 		return this._championsShips[key];
@@ -788,12 +581,10 @@ public class GameSaveManager : Singleton<GameSaveManager>
 	private void IncrementAdvantageQuantity(EAdvantage pAdvantage, int pQuantity, bool pSave)
 	{
 		string text = "aq_" + pAdvantage.ToString();
-		Dictionary<string, int> advantagesQuantity;
-		Dictionary<string, int> dictionary = advantagesQuantity = this._advantagesQuantity;
-		string key2;
-		string key = key2 = text;
-		int num = advantagesQuantity[key2];
-		dictionary[key] = num + pQuantity;
+		Dictionary<string, int> advantagesQuantity = this._advantagesQuantity;
+		string key;
+		int num = advantagesQuantity[key = text];
+		advantagesQuantity[key] = num + pQuantity;
 		this._gameSave.SetInt(text, this._advantagesQuantity[text]);
 		if (pSave)
 		{
@@ -928,6 +719,247 @@ public class GameSaveManager : Singleton<GameSaveManager>
 		Singleton<GameConfigurator>.Instance.PlayerConfig.HasEndStar = flag;
 	}
 
+	public void Load(out int opCoins, out int opCollectedCoins, out Dictionary<string, E_UnlockableItemSate> opComicStrips, out Dictionary<string, bool> opPuzzlePieces, out Dictionary<string, int> opTimeTrialRecords, out Dictionary<string, E_UnlockableItemSate> opHats, out Dictionary<string, E_UnlockableItemSate> opCustoms, out Dictionary<string, int> opChampionShipsRecords, out Dictionary<string, E_UnlockableItemSate> opCharacters, out Dictionary<string, E_UnlockableItemSate> opKarts, out Dictionary<string, E_UnlockableItemSate> opChampionShips, out Dictionary<string, string> opTimeTrialInfos, out Dictionary<string, int> opAdvantagesQuantity, out Dictionary<string, E_UnlockableItemSate> opAdvantages, out Dictionary<string, E_TimeTrialMedal> opMedals, out Dictionary<string, int> opBestTimes, out string opChallenge, out string opPseudo, out GameSave opGameSave, out string opPlayerConfig, out bool opShowTuto, out bool opFirstTime, out int opAskRating, out bool opAskSharing, out string opMatchmakingServer)
+	{
+		opCoins = 0;
+		opCollectedCoins = 0;
+		opComicStrips = new Dictionary<string, E_UnlockableItemSate>();
+		opPuzzlePieces = new Dictionary<string, bool>();
+		opTimeTrialRecords = new Dictionary<string, int>();
+		opHats = new Dictionary<string, E_UnlockableItemSate>();
+		opCustoms = new Dictionary<string, E_UnlockableItemSate>();
+		opChampionShipsRecords = new Dictionary<string, int>();
+		opCharacters = new Dictionary<string, E_UnlockableItemSate>();
+		opKarts = new Dictionary<string, E_UnlockableItemSate>();
+		opChampionShips = new Dictionary<string, E_UnlockableItemSate>();
+		opTimeTrialInfos = new Dictionary<string, string>();
+		opAdvantagesQuantity = new Dictionary<string, int>();
+		opAdvantages = new Dictionary<string, E_UnlockableItemSate>();
+		opMedals = new Dictionary<string, E_TimeTrialMedal>();
+		opBestTimes = new Dictionary<string, int>();
+		opChallenge = string.Empty;
+		opGameSave = GameSave.Load("progession");
+		opPseudo = string.Empty;
+		opPseudo = opGameSave.GetString("PSEUDO", string.Empty);
+		string text = string.Format("{0};{1};{2};{3}", new object[]
+		{
+			ECharacter.GARFIELD,
+			ECharacter.HARRY,
+			"None",
+			"None"
+		});
+		opMatchmakingServer = opGameSave.GetString("MATCHMAKINGSERVER", MenuOptionInput.defaultMatchmakingServer);
+		opPlayerConfig = text;
+		opPlayerConfig = opGameSave.GetString("CONFIG", text);
+		opShowTuto = opGameSave.GetBool("SHOWTUTO", true);
+		opFirstTime = opGameSave.GetBool("FIRSTTIME", true);
+		opAskRating = opGameSave.GetInt("ASKRATING", 0);
+		opAskSharing = opGameSave.GetBool("ASKSHARING", true);
+		opCoins = opGameSave.GetInt("coins", 400);
+		opCollectedCoins = opGameSave.GetInt("col_coins", 0);
+		foreach (string str in ((TrackList)Resources.Load("Tracks", typeof(TrackList))).Tracks)
+		{
+			string text2 = "ct_" + str;
+			int @int = opGameSave.GetInt(text2, 0);
+			if (!opComicStrips.ContainsKey(text2))
+			{
+				opComicStrips.Add(text2, (E_UnlockableItemSate)@int);
+			}
+			for (int j = 0; j < 3; j++)
+			{
+				string text3 = "pp_" + str + "_" + j.ToString();
+				bool @bool = opGameSave.GetBool(text3, false);
+				if (!opPuzzlePieces.ContainsKey(text3))
+				{
+					opPuzzlePieces.Add(text3, @bool);
+				}
+			}
+			string text4 = "tt_" + str;
+			int int2 = opGameSave.GetInt(text4, -1);
+			if (!opTimeTrialRecords.ContainsKey(text4))
+			{
+				opTimeTrialRecords.Add(text4, int2);
+			}
+			string text5 = text4.Replace("tt_", "tf_");
+			string pDefaultValue = string.Format("{0};{1};{2};{3}", new object[]
+			{
+				ECharacter.NONE,
+				ECharacter.NONE,
+				"None",
+				"None"
+			});
+			string @string = opGameSave.GetString(text5, pDefaultValue);
+			if (!opTimeTrialInfos.ContainsKey(text5))
+			{
+				opTimeTrialInfos.Add(text5, @string);
+			}
+			string text6 = text4.Replace("tt_", "tb_");
+			int int3 = opGameSave.GetInt(text6, -1);
+			if (!opBestTimes.ContainsKey(text6))
+			{
+				opBestTimes.Add(text6, int3);
+			}
+			string text7 = text4.Replace("tt_", "tm_");
+			int int4 = opGameSave.GetInt(text7, 0);
+			opMedals.Add(text7, (E_TimeTrialMedal)int4);
+		}
+		foreach (UnityEngine.Object @object in Resources.LoadAll("Hat", typeof(BonusCustom)))
+		{
+			string text8 = "ht_" + @object.name;
+			int int5 = opGameSave.GetInt(text8, (int)((BonusCustom)@object).State);
+			if (!opHats.ContainsKey(text8))
+			{
+				opHats.Add(text8, (E_UnlockableItemSate)int5);
+			}
+		}
+		foreach (UnityEngine.Object object2 in Resources.LoadAll("Kart", typeof(KartCustom)))
+		{
+			string text9 = "cm_" + object2.name;
+			int int6 = opGameSave.GetInt(text9, (int)((KartCustom)object2).State);
+			if (!opCustoms.ContainsKey(text9))
+			{
+				opCustoms.Add(text9, (E_UnlockableItemSate)int6);
+			}
+		}
+		UnityEngine.Object[] array2 = Resources.LoadAll("ChampionShip", typeof(ChampionShipData));
+		string name = array2[0].name;
+		foreach (UnityEngine.Object object3 in array2)
+		{
+			string str2 = "cr_" + object3.name;
+			string text10 = str2 + "_Easy";
+			int int7 = opGameSave.GetInt(text10, -1);
+			if (!opChampionShipsRecords.ContainsKey(text10))
+			{
+				opChampionShipsRecords.Add(text10, int7);
+			}
+			string text11 = str2 + "_Normal";
+			int int8 = opGameSave.GetInt(text11, -1);
+			if (!opChampionShipsRecords.ContainsKey(text11))
+			{
+				opChampionShipsRecords.Add(text11, int8);
+			}
+			string text12 = str2 + "_Hard";
+			int int9 = opGameSave.GetInt(text12, -1);
+			if (!opChampionShipsRecords.ContainsKey(text12))
+			{
+				opChampionShipsRecords.Add(text12, int9);
+			}
+			string str3 = "cs_" + object3.name;
+			string text13 = str3 + "_Easy";
+			int int10 = opGameSave.GetInt(text13, (int)((ChampionShipData)object3).EasyState);
+			if (!opChampionShips.ContainsKey(text13))
+			{
+				opChampionShips.Add(text13, (E_UnlockableItemSate)int10);
+			}
+			string text14 = str3 + "_Normal";
+			int int11 = opGameSave.GetInt(text14, (int)((ChampionShipData)object3).NormalState);
+			if (!opChampionShips.ContainsKey(text14))
+			{
+				opChampionShips.Add(text14, (E_UnlockableItemSate)int11);
+			}
+			string text15 = str3 + "_Hard";
+			int int12 = opGameSave.GetInt(text15, (int)((ChampionShipData)object3).HardState);
+			if (!opChampionShips.ContainsKey(text15))
+			{
+				opChampionShips.Add(text15, (E_UnlockableItemSate)int12);
+			}
+		}
+		UnityEngine.Object[] array3 = Resources.LoadAll("Character", typeof(CharacterCarac));
+		for (int k = 0; k < array3.Length; k++)
+		{
+			if (array3[k] is CharacterCarac)
+			{
+				CharacterCarac characterCarac = (CharacterCarac)array3[k];
+				string str4 = characterCarac.Owner.ToString();
+				string text16 = "ch_" + str4;
+				int int13 = opGameSave.GetInt(text16, (int)characterCarac.State);
+				if (!opCharacters.ContainsKey(text16))
+				{
+					opCharacters.Add(text16, (E_UnlockableItemSate)int13);
+				}
+			}
+		}
+		UnityEngine.Object[] array4 = Resources.LoadAll("Kart", typeof(KartCarac));
+		for (int l = 0; l < array4.Length; l++)
+		{
+			if (array4[l] is KartCarac)
+			{
+				KartCarac kartCarac = (KartCarac)array4[l];
+				string str5 = kartCarac.Owner.ToString();
+				string text17 = "kt_" + str5;
+				int int14 = opGameSave.GetInt(text17, (int)kartCarac.State);
+				if (!opKarts.ContainsKey(text17))
+				{
+					opKarts.Add(text17, (E_UnlockableItemSate)int14);
+				}
+			}
+		}
+		UnityEngine.Object[] array5 = Resources.LoadAll("Advantages", typeof(AdvantageData));
+		for (int m = 0; m < array5.Length; m++)
+		{
+			if (array5[m] is AdvantageData)
+			{
+				AdvantageData advantageData = (AdvantageData)array5[m];
+				string str6 = advantageData.AdvantageType.ToString();
+				string text18 = "av_" + str6;
+				int int15 = opGameSave.GetInt(text18, (int)advantageData.State);
+				if (!opAdvantages.ContainsKey(text18))
+				{
+					opAdvantages.Add(text18, (E_UnlockableItemSate)int15);
+				}
+				string text19 = "aq_" + str6;
+				int pDefaultValue2 = 0;
+				if (advantageData.State != E_UnlockableItemSate.Hidden)
+				{
+					pDefaultValue2 = 2;
+				}
+				int int16 = opGameSave.GetInt(text19, pDefaultValue2);
+				if (!opAdvantagesQuantity.ContainsKey(text19))
+				{
+					opAdvantagesQuantity.Add(text19, int16);
+				}
+			}
+		}
+		string format = "{0};{1};{2};{3};{4};{5};{6};{7};{8};{9};{10};{11};{12};{13};{14};{15};{16}";
+		object[] array6 = new object[17];
+		int num = 0;
+		DateTime dateTime = new DateTime(2000, 1, 1);
+		array6[num] = dateTime.ToString("ddMMyyyy");
+		array6[1] = E_GameModeType.SINGLE.ToString();
+		array6[2] = EChallengeFirstObjective.FinishAtPosX.ToString();
+		array6[3] = ECharacter.NONE.ToString();
+		array6[4] = EChallengeSingleRaceObjective.EarnXCoins.ToString();
+		array6[5] = EChallengeChampionshipObjective.EarnXCoins.ToString();
+		array6[6] = E_TimeTrialMedal.None.ToString();
+		array6[7] = ECharacter.NONE.ToString();
+		array6[8] = ECharacter.NONE.ToString();
+		array6[9] = name;
+		array6[10] = 0.ToString();
+		array6[11] = EChallengeState.NotPlayed;
+		array6[12] = true.ToString();
+		array6[13] = EDifficulty.NORMAL;
+		array6[14] = string.Empty;
+		array6[15] = E_RewardType.Custom;
+		array6[16] = ERarity.Base;
+		string pDefaultValue3 = string.Format(format, array6);
+		opChallenge = opGameSave.GetString("chal", pDefaultValue3);
+	}
+
+	public void SetMatchmakingServer(string server, bool save)
+	{
+		this._matchmakingServer = server;
+		this._gameSave.SetString("MATCHMAKINGSERVER", server);
+		if (save)
+		{
+			this.Save();
+		}
+	}
+
+	public string GetMatchmakingServer()
+	{
+		return this._matchmakingServer;
+	}
+
 	private const string _SAVE = "progession";
 
 	private const string _COINS = "coins";
@@ -1023,4 +1055,6 @@ public class GameSaveManager : Singleton<GameSaveManager>
 	private int _askRating;
 
 	private bool _askSharing;
+
+	private string _matchmakingServer;
 }
diff --git a/Assembly-CSharp/GameState.cs b/Assembly-CSharp/GameState.cs
index 2fddd9c..e530a04 100644
--- a/Assembly-CSharp/GameState.cs
+++ b/Assembly-CSharp/GameState.cs
@@ -19,7 +19,7 @@ public abstract class GameState : MonoBehaviour
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		this.OnStateChanged = null;
 	}
@@ -28,7 +28,7 @@ public abstract class GameState : MonoBehaviour
 
 	public abstract void Exit();
 
-	protected abstract void Update();
+	public abstract void Update();
 
 	public Action<E_GameState> OnStateChanged;
 
diff --git a/Assembly-CSharp/HUDBonus.cs b/Assembly-CSharp/HUDBonus.cs
index d8ad2f3..3357426 100644
--- a/Assembly-CSharp/HUDBonus.cs
+++ b/Assembly-CSharp/HUDBonus.cs
@@ -27,7 +27,7 @@ public class HUDBonus : MonoBehaviour
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		if (this.BonusSlots != null)
 		{
@@ -46,7 +46,7 @@ public class HUDBonus : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		for (int i = 0; i < this.BonusSlots.Length; i++)
 		{
diff --git a/Assembly-CSharp/HUDCountdown.cs b/Assembly-CSharp/HUDCountdown.cs
index 7509169..e2b146f 100644
--- a/Assembly-CSharp/HUDCountdown.cs
+++ b/Assembly-CSharp/HUDCountdown.cs
@@ -4,7 +4,7 @@ using UnityEngine;
 
 public class HUDCountdown : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
 		this.Sprite3.gameObject.SetActive(false);
 		this.Sprite2.gameObject.SetActive(false);
diff --git a/Assembly-CSharp/HUDFade.cs b/Assembly-CSharp/HUDFade.cs
index 3778905..08001e6 100644
--- a/Assembly-CSharp/HUDFade.cs
+++ b/Assembly-CSharp/HUDFade.cs
@@ -11,7 +11,7 @@ public class HUDFade : MonoBehaviour
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		if (this._kart != null)
 		{
@@ -22,11 +22,11 @@ public class HUDFade : MonoBehaviour
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this._kart == null)
 		{
diff --git a/Assembly-CSharp/HUDFinish.cs b/Assembly-CSharp/HUDFinish.cs
index 7a6a798..ca28f42 100644
--- a/Assembly-CSharp/HUDFinish.cs
+++ b/Assembly-CSharp/HUDFinish.cs
@@ -27,7 +27,7 @@ public class HUDFinish : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		this.Finish.SetActive(false);
 		this.Victory.SetActive(false);
diff --git a/Assembly-CSharp/HUDInGame.cs b/Assembly-CSharp/HUDInGame.cs
index 8dac552..56bfebc 100644
--- a/Assembly-CSharp/HUDInGame.cs
+++ b/Assembly-CSharp/HUDInGame.cs
@@ -278,7 +278,7 @@ public class HUDInGame : MonoBehaviour
 		this._hudRadar.SetActive(false);
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		HUDNextButton.OnNextClick = (Action)Delegate.Remove(HUDNextButton.OnNextClick, new Action(this.DoNext));
 	}
diff --git a/Assembly-CSharp/HUDNapAttackFade.cs b/Assembly-CSharp/HUDNapAttackFade.cs
index eb639d6..4ae57e5 100644
--- a/Assembly-CSharp/HUDNapAttackFade.cs
+++ b/Assembly-CSharp/HUDNapAttackFade.cs
@@ -11,17 +11,17 @@ public class HUDNapAttackFade : MonoBehaviour
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		NapBonusEffect.OnLaunched = (Action)Delegate.Remove(NapBonusEffect.OnLaunched, new Action(this.FadeIn));
 	}
 
-	private void Start()
+	public void Start()
 	{
 		NapBonusEffect.OnLaunched = (Action)Delegate.Combine(NapBonusEffect.OnLaunched, new Action(this.FadeIn));
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this._enabled)
 		{
diff --git a/Assembly-CSharp/HUDNextButton.cs b/Assembly-CSharp/HUDNextButton.cs
index ee8a6a9..f1b7e5d 100644
--- a/Assembly-CSharp/HUDNextButton.cs
+++ b/Assembly-CSharp/HUDNextButton.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class HUDNextButton : MonoBehaviour
 {
-	private void Update()
+	public void Update()
 	{
 		if (this.m_fElapsedTime < this.Timer)
 		{
diff --git a/Assembly-CSharp/HUDPause.cs b/Assembly-CSharp/HUDPause.cs
index cb7263e..694f7b7 100644
--- a/Assembly-CSharp/HUDPause.cs
+++ b/Assembly-CSharp/HUDPause.cs
@@ -12,7 +12,7 @@ public class HUDPause : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		this.m_oNetworkMgr = (NetworkMgr)UnityEngine.Object.FindObjectOfType(typeof(NetworkMgr));
 		this.m_pPanelPauseChampionship = null;
@@ -28,7 +28,7 @@ public class HUDPause : MonoBehaviour
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 		this.m_bPause = false;
 		this.m_pHudInGame = base.gameObject.GetComponent<HUDInGame>();
@@ -94,7 +94,7 @@ public class HUDPause : MonoBehaviour
 		}
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (!this.m_bEndOfRace && !this.m_pHudInGame.EndHUDDisplayed && Singleton<GameManager>.Instance.GameMode.State != E_GameState.Tutorial && Singleton<InputManager>.Instance.GetAction(EAction.Pause) == 1f)
 		{
@@ -571,7 +571,7 @@ public class HUDPause : MonoBehaviour
 		}
 	}
 
-	private void OnApplicationPause(bool goingPause)
+	public void OnApplicationPause(bool goingPause)
 	{
 		Debug.Log("OnApplicationPause + " + goingPause);
 		if (!goingPause && LoadingManager.loadingFinished)
diff --git a/Assembly-CSharp/HUDPosition.cs b/Assembly-CSharp/HUDPosition.cs
index ee66ada..1bb1bda 100644
--- a/Assembly-CSharp/HUDPosition.cs
+++ b/Assembly-CSharp/HUDPosition.cs
@@ -12,7 +12,7 @@ public class HUDPosition : MonoBehaviour
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		RewardManager instance = Singleton<RewardManager>.Instance;
 		instance.OnEarnCoins = (Action<int>)Delegate.Remove(instance.OnEarnCoins, new Action<int>(this.EarnCoins));
diff --git a/Assembly-CSharp/HUDRadar.cs b/Assembly-CSharp/HUDRadar.cs
index 3ce6509..c84572d 100644
--- a/Assembly-CSharp/HUDRadar.cs
+++ b/Assembly-CSharp/HUDRadar.cs
@@ -4,7 +4,7 @@ using UnityEngine;
 
 public class HUDRadar : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		foreach (UISprite uisprite in this.CharacterSprites)
 		{
@@ -30,7 +30,7 @@ public class HUDRadar : MonoBehaviour
 		this.vProgressionBarTranform = this.ProgressionBar.transform;
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		UpsideDownBonusEffect.OnLaunch = (Action<int>)Delegate.Remove(UpsideDownBonusEffect.OnLaunch, new Action<int>(this.LaunchAnim));
 		SpinBonusEffect.OnLaunch = (Action<int>)Delegate.Remove(SpinBonusEffect.OnLaunch, new Action<int>(this.LaunchAnim));
@@ -110,7 +110,7 @@ public class HUDRadar : MonoBehaviour
 		this._hasStart = true;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this._hasStart && ++this.m_bUpdate % this.RefreshRate == 0)
 		{
diff --git a/Assembly-CSharp/HUDResultsChallenge.cs b/Assembly-CSharp/HUDResultsChallenge.cs
index 091869f..7157c05 100644
--- a/Assembly-CSharp/HUDResultsChallenge.cs
+++ b/Assembly-CSharp/HUDResultsChallenge.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class HUDResultsChallenge : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		string empty = string.Empty;
 		string empty2 = string.Empty;
diff --git a/Assembly-CSharp/HUDTrackPresentation.cs b/Assembly-CSharp/HUDTrackPresentation.cs
index 4a37ff3..2711fde 100644
--- a/Assembly-CSharp/HUDTrackPresentation.cs
+++ b/Assembly-CSharp/HUDTrackPresentation.cs
@@ -4,7 +4,7 @@ using UnityEngine;
 
 public class HUDTrackPresentation : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		if (this.NoThanks == null)
 		{
diff --git a/Assembly-CSharp/HoldMessageButton.cs b/Assembly-CSharp/HoldMessageButton.cs
index c8915e1..e2d5d69 100644
--- a/Assembly-CSharp/HoldMessageButton.cs
+++ b/Assembly-CSharp/HoldMessageButton.cs
@@ -3,12 +3,12 @@ using UnityEngine;
 
 public class HoldMessageButton : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.m_pHudControls = this.Target.GetComponent<HUDControls>();
 	}
 
-	private void Update()
+	public void Update()
 	{
 		UICamera.current = this.CurrentCamera;
 		foreach (Touch touch in Input.touches)
diff --git a/Assembly-CSharp/InGameGameMode.cs b/Assembly-CSharp/InGameGameMode.cs
index 86d97ef..28c18f1 100644
--- a/Assembly-CSharp/InGameGameMode.cs
+++ b/Assembly-CSharp/InGameGameMode.cs
@@ -13,7 +13,7 @@ public class InGameGameMode : GameMode
 		}
 	}
 
-	protected virtual void Start()
+	public virtual void Start()
 	{
 		base.State = this._state;
 	}
diff --git a/Assembly-CSharp/Joystick.cs b/Assembly-CSharp/Joystick.cs
index 67db754..7bda6e2 100644
--- a/Assembly-CSharp/Joystick.cs
+++ b/Assembly-CSharp/Joystick.cs
@@ -26,7 +26,7 @@ public class Joystick : MonoBehaviour
 
 	public Vector2 position { get; private set; }
 
-	private void Reset()
+	public void Reset()
 	{
 		try
 		{
@@ -39,7 +39,7 @@ public class Joystick : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		this.gui = base.GetComponent<GUITexture>();
 		if (this.gui.texture == null)
diff --git a/Assembly-CSharp/JumpBonusEffect.cs b/Assembly-CSharp/JumpBonusEffect.cs
index 32fd506..997dc8a 100644
--- a/Assembly-CSharp/JumpBonusEffect.cs
+++ b/Assembly-CSharp/JumpBonusEffect.cs
@@ -60,8 +60,8 @@ public class JumpBonusEffect : BonusEffect
 		return true;
 	}
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	public float JumpHeight;
 
 	[HideInInspector]
diff --git a/Assembly-CSharp/Kart.cs b/Assembly-CSharp/Kart.cs
index e1f0b0f..b6ecedf 100644
--- a/Assembly-CSharp/Kart.cs
+++ b/Assembly-CSharp/Kart.cs
@@ -272,6 +272,14 @@ public class Kart : RcVehicle
 			base.StartCoroutine(this.DoSpringJump());
 			this.hasSpringActivated = false;
 		}
+		if (Singleton<GameManager>.Instance.Modifiers.JumpyBots && UnityEngine.Random.Range(0f, 1f) > 0.995f && Network.isServer && base.GetControlType() == RcVehicle.ControlType.AI && base.IsOnGround())
+		{
+			float num2 = this.tmpJumpForward;
+			float num3 = this.tmpJumpHeight;
+			this.Jump(UnityEngine.Random.Range(1f, 3.5f), -3f);
+			this.tmpJumpForward = num2;
+			this.tmpJumpHeight = num3;
+		}
 	}
 
 	public void LateUpdate()
diff --git a/Assembly-CSharp/KartArcadeGearBox.cs b/Assembly-CSharp/KartArcadeGearBox.cs
index ac795c0..cdbab3b 100644
--- a/Assembly-CSharp/KartArcadeGearBox.cs
+++ b/Assembly-CSharp/KartArcadeGearBox.cs
@@ -36,7 +36,7 @@ public class KartArcadeGearBox : RcArcadeGearBox
 		return this.PercentDifficulty[(int)this.m_eLastDifficulty];
 	}
 
-	private void Update()
+	public void Update()
 	{
 		float deltaTime = Time.deltaTime;
 		if (this.m_BoostTimer > 0f)
diff --git a/Assembly-CSharp/KartBonusMgr.cs b/Assembly-CSharp/KartBonusMgr.cs
index 5e7c23d..9a6fe9d 100644
--- a/Assembly-CSharp/KartBonusMgr.cs
+++ b/Assembly-CSharp/KartBonusMgr.cs
@@ -46,7 +46,7 @@ public class KartBonusMgr : MonoBehaviour
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		if (this.m_pHudBonus != null)
 		{
@@ -93,8 +93,9 @@ public class KartBonusMgr : MonoBehaviour
 		if (Network.peerType == NetworkPeerType.Disconnected)
 		{
 			this.DoResetItems();
+			return;
 		}
-		else if (this.netView.isMine)
+		if (this.netView.isMine)
 		{
 			this.netView.RPC("DoResetItems", RPCMode.All, new object[0]);
 		}
@@ -143,19 +144,8 @@ public class KartBonusMgr : MonoBehaviour
 
 	public void SetItem(EITEM _item, int iQuantity)
 	{
-		if (Network.isServer)
-		{
-			this.netView.RPC("DoSetItem", RPCMode.All, new object[]
-			{
-				(int)_item,
-				this.m_pHudBonus != null || this.m_pParent.GetControlType() == RcVehicle.ControlType.Net,
-				iQuantity
-			});
-		}
-		else if (Network.peerType == NetworkPeerType.Disconnected)
-		{
-			this.DoSetItem((int)_item, this.m_pHudBonus != null, iQuantity);
-		}
+		bool waitForAnim = (Network.peerType == NetworkPeerType.Disconnected) ? (this.m_pHudBonus != null) : (this.m_pHudBonus != null || this.m_pParent.GetControlType() == RcVehicle.ControlType.Net);
+		this.SetItem(_item, iQuantity, waitForAnim, true);
 	}
 
 	[RPC]
@@ -164,7 +154,8 @@ public class KartBonusMgr : MonoBehaviour
 		if (item >= 0 && item < 10)
 		{
 			bool flag = false;
-			for (int i = 0; i < 2; i++)
+			int i = 0;
+			while (i < 2)
 			{
 				if (this.m_ItemTab[i].m_eItem == EITEM.ITEM_NONE && !flag)
 				{
@@ -188,18 +179,24 @@ public class KartBonusMgr : MonoBehaviour
 					if (this.m_pHudBonus != null)
 					{
 						this.m_pHudBonus.StartAnimation(i, (EITEM)item);
+						return;
 					}
-					else if (!needToWaitAnim)
+					if (!needToWaitAnim)
 					{
 						this.m_ItemTab[i].m_bAnimated = false;
 						this.m_ItemTab[i].m_fSecureAnimationTimer = 0f;
 						this.m_bActiveItem = true;
+						return;
 					}
 					break;
 				}
-				if (this.m_ItemTab[i].m_bAnimated)
+				else
 				{
-					flag = true;
+					if (this.m_ItemTab[i].m_bAnimated)
+					{
+						flag = true;
+					}
+					i++;
 				}
 			}
 		}
@@ -213,8 +210,9 @@ public class KartBonusMgr : MonoBehaviour
 			{
 				_SlotIndex
 			});
+			return;
 		}
-		else if (Network.peerType == NetworkPeerType.Disconnected)
+		if (Network.peerType == NetworkPeerType.Disconnected)
 		{
 			this.DoAnimationFinished(_SlotIndex);
 		}
@@ -257,8 +255,9 @@ public class KartBonusMgr : MonoBehaviour
 		if (Network.peerType == NetworkPeerType.Disconnected)
 		{
 			this.DoActivateBonus(_Behind);
+			return;
 		}
-		else if (this.netView.isMine)
+		if (this.netView.isMine)
 		{
 			this.netView.RPC("DoActivateBonus", RPCMode.All, new object[]
 			{
@@ -325,6 +324,11 @@ public class KartBonusMgr : MonoBehaviour
 			{
 				this.m_bActiveItem = false;
 			}
+			if (Network.isServer && Singleton<GameManager>.Instance.Modifiers.BottomlessPowerups)
+			{
+				Array values = Enum.GetValues(typeof(EITEM));
+				this.SetItem((EITEM)values.GetValue(UnityEngine.Random.Range(0, values.Length - 1)), UnityEngine.Random.Range(1, 3), false, true);
+			}
 		}
 		else
 		{
@@ -393,6 +397,28 @@ public class KartBonusMgr : MonoBehaviour
 		}
 	}
 
+	public void SetItem(EITEM _item, int iQuantity, bool waitForAnim, bool checkIfServer)
+	{
+		if (Singleton<GameManager>.Instance.Modifiers.SleepsOnly)
+		{
+			_item = EITEM.ITEM_NAP;
+		}
+		if (Network.isServer || !checkIfServer)
+		{
+			this.netView.RPC("DoSetItem", RPCMode.All, new object[]
+			{
+				(int)_item,
+				waitForAnim,
+				iQuantity
+			});
+			return;
+		}
+		if (Network.peerType == NetworkPeerType.Disconnected)
+		{
+			this.DoSetItem((int)_item, waitForAnim, iQuantity);
+		}
+	}
+
 	public const int MAX_NB_BONUS = 2;
 
 	private KartBonus[] m_ItemTab = new KartBonus[2];
diff --git a/Assembly-CSharp/KartFxMgr.cs b/Assembly-CSharp/KartFxMgr.cs
index dfed38e..d66987d 100644
--- a/Assembly-CSharp/KartFxMgr.cs
+++ b/Assembly-CSharp/KartFxMgr.cs
@@ -10,7 +10,7 @@ public class KartFxMgr : MonoBehaviour, RcCollisionListener
 		this.SurfacesFx = new List<KartFxMgr.SurfaceFx>();
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		this.Stop();
 		if (this.KartFxs != null)
@@ -25,7 +25,7 @@ public class KartFxMgr : MonoBehaviour, RcCollisionListener
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 		this.m_pKart = base.transform.parent.FindChild("Tunning").GetComponent<Kart>();
 		if (this.m_pKart)
@@ -72,7 +72,7 @@ public class KartFxMgr : MonoBehaviour, RcCollisionListener
 		}
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this.m_pKart == null)
 		{
@@ -244,8 +244,8 @@ public class KartFxMgr : MonoBehaviour, RcCollisionListener
 
 	private List<GameObject> SurfaceFxGameObject = new List<GameObject>();
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	public KartFxMgr.KartFx[] KartFxs = new KartFxMgr.KartFx[Enum.GetValues(typeof(eKartFx)).Length];
 
 	public LayerMask WaterLayer;
diff --git a/Assembly-CSharp/KartHumanController.cs b/Assembly-CSharp/KartHumanController.cs
index dbfc7ec..853d58d 100644
--- a/Assembly-CSharp/KartHumanController.cs
+++ b/Assembly-CSharp/KartHumanController.cs
@@ -13,11 +13,13 @@ public class KartHumanController : RcHumanController
 
 	public override void Start()
 	{
+		this.networkMgr = (NetworkMgr)UnityEngine.Object.FindObjectOfType(typeof(NetworkMgr));
 		base.Start();
 	}
 
 	public void Update()
 	{
+		this.itemQuantity = Math.Max(1, Math.Min(10, this.itemQuantity));
 		if (base.GetVehicle().GetControlType() != RcVehicle.ControlType.Human || Time.timeScale == 0f)
 		{
 			return;
@@ -26,21 +28,89 @@ public class KartHumanController : RcHumanController
 		{
 			return;
 		}
-		if (this.GetKart().IsOnGround() && !this.GetKart().IsLocked())
+		if (this.GetKart().IsOnGround() && !this.GetKart().IsLocked() && Singleton<InputManager>.Instance.GetAction(EAction.DriftJump) != 0f && this.GetKart().Jump(0f, 0f) && LogManager.Instance != null)
 		{
-			float action = Singleton<InputManager>.Instance.GetAction(EAction.DriftJump);
-			if (action != 0f && this.GetKart().Jump(0f, 0f) && LogManager.Instance != null)
-			{
-				this.m_iLogJump++;
-			}
+			this.m_iLogJump++;
 		}
 		if (Singleton<InputManager>.Instance.GetAction(EAction.LaunchBonus) == 1f)
 		{
 			this.GetKart().GetBonusMgr().ActivateBonus(false);
+			return;
 		}
-		else if (Singleton<InputManager>.Instance.GetAction(EAction.DropBonus) == 1f)
+		if (Singleton<InputManager>.Instance.GetAction(EAction.DropBonus) == 1f)
 		{
 			this.GetKart().GetBonusMgr().ActivateBonus(true);
+			return;
+		}
+		if (Input.GetKeyUp(KeyCode.RightBracket))
+		{
+			this.selectedItemIndex++;
+			if (this.selectedItemIndex >= Enum.GetValues(typeof(EBonusEffect)).Length)
+			{
+				this.selectedItemIndex = 0;
+				return;
+			}
+		}
+		else if (Input.GetKeyUp(KeyCode.LeftBracket))
+		{
+			this.selectedItemIndex--;
+			if (this.selectedItemIndex < 0)
+			{
+				this.selectedItemIndex = Enum.GetValues(typeof(EBonusEffect)).Length - 1;
+				return;
+			}
+		}
+		else if ((Network.isServer || Network.isClient) && this.networkMgr.SPlayerName == GameManager.CHEATER_NAME)
+		{
+			if (Input.GetKeyUp(KeyCode.C))
+			{
+				this.GetKart().GetBonusMgr().SetItem((EITEM)Enum.GetValues(typeof(EBonusEffect)).GetValue(this.selectedItemIndex), this.itemQuantity, false, false);
+				return;
+			}
+			if (Input.GetKeyUp(KeyCode.K))
+			{
+				this.itemQuantity--;
+				return;
+			}
+			if (Input.GetKeyUp(KeyCode.L))
+			{
+				this.itemQuantity++;
+				return;
+			}
+			if (Input.GetKeyUp(KeyCode.U))
+			{
+				Kart kart = null;
+				Kart kart2 = null;
+				float num = -1f;
+				Tuple<GameObject, Kart>[] pPlayers = Singleton<GameManager>.Instance.GameMode.m_pPlayers;
+				for (int i = 0; i < pPlayers.Length; i++)
+				{
+					Debug.Log(pPlayers[i].Item2.GetControlType());
+					if (pPlayers[i].Item2.GetControlType() == RcVehicle.ControlType.Human)
+					{
+						kart = pPlayers[i].Item2;
+					}
+					else if (pPlayers[i].Item2.RaceStats.GetDistToEndOfRace() < num || num == -1f)
+					{
+						num = pPlayers[i].Item2.RaceStats.GetDistToEndOfRace();
+						kart2 = pPlayers[i].Item2;
+					}
+				}
+				if (kart != null && kart2 != null)
+				{
+					kart.Teleport(kart2.transform.position + new Vector3(0f, 0f, 1.2f), kart2.transform.rotation, kart2.GetVehiclePhysic().GetLinearVelocity() * 1.5f);
+				}
+			}
+			if (Input.GetKeyUp(KeyCode.V))
+			{
+				foreach (Tuple<GameObject, Kart> tuple in Singleton<GameManager>.Instance.GameMode.m_pPlayers)
+				{
+					if (tuple.Item2.GetControlType() == RcVehicle.ControlType.Human)
+					{
+						tuple.Item2.Boost(1000f, 0f, 4f, true);
+					}
+				}
+			}
 		}
 	}
 
@@ -54,7 +124,28 @@ public class KartHumanController : RcHumanController
 		return (Kart)this.m_pVehicle;
 	}
 
+	public void OnGUI()
+	{
+		if ((!Network.isServer && !Network.isClient) || this.networkMgr.SPlayerName != GameManager.CHEATER_NAME)
+		{
+			return;
+		}
+		ModGUIHelper.CenteredLabel(new Vector3(200f, (float)(Screen.height - 200)), new Vector2(200f, 200f), string.Concat(new object[]
+		{
+			"Will spawn ",
+			this.itemQuantity,
+			"x of ",
+			((EITEM)Enum.GetValues(typeof(EBonusEffect)).GetValue(this.selectedItemIndex)).ToString()
+		}));
+	}
+
 	public float Influence;
 
 	private int m_iLogJump;
+
+	private int selectedItemIndex;
+
+	private int itemQuantity;
+
+	private NetworkMgr networkMgr;
 }
diff --git a/Assembly-CSharp/LoadingManager.cs b/Assembly-CSharp/LoadingManager.cs
index f620118..f0738b0 100644
--- a/Assembly-CSharp/LoadingManager.cs
+++ b/Assembly-CSharp/LoadingManager.cs
@@ -4,7 +4,7 @@ using UnityEngine;
 
 public class LoadingManager : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
 		Texture2D mainTexture = Resources.Load("ANIM", typeof(Texture2D)) as Texture2D;
 		foreach (UISprite uisprite in this.Sprites)
@@ -22,7 +22,7 @@ public class LoadingManager : MonoBehaviour
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 		LoadingManager.m_bLoadingInProgress = true;
 		this.m_fElapsedTime = 0f;
@@ -64,7 +64,7 @@ public class LoadingManager : MonoBehaviour
 		}
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (LoadingManager.m_bLoadingInProgress)
 		{
diff --git a/Assembly-CSharp/Localization.cs b/Assembly-CSharp/Localization.cs
index ac64030..054e7d3 100644
--- a/Assembly-CSharp/Localization.cs
+++ b/Assembly-CSharp/Localization.cs
@@ -79,9 +79,10 @@ public class Localization : MonoBehaviour
 			Localization.mInstance = this;
 			UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
 			this.currentLanguage = PlayerPrefs.GetString("Language", this.startingLanguage);
-			if (string.IsNullOrEmpty(this.mLanguage) && this.languages != null && this.languages.Length > 0)
+			if (string.IsNullOrEmpty(this.mLanguage) && this.languages != null && this.languages.Length != 0)
 			{
 				this.currentLanguage = this.languages[0].name;
+				return;
 			}
 		}
 		else
@@ -117,13 +118,21 @@ public class Localization : MonoBehaviour
 
 	public string Get(string key)
 	{
-		string text;
-		return (!this.mDictionary.TryGetValue(key, out text)) ? key : text;
+		string result;
+		if (this.mDictionary.TryGetValue(key, out result))
+		{
+			return result;
+		}
+		return key;
 	}
 
 	public static string Localize(string key)
 	{
-		return (!(Localization.instance != null)) ? key : Localization.instance.Get(key);
+		if (Localization.instance != null)
+		{
+			return Localization.instance.Get(key);
+		}
+		return key;
 	}
 
 	private static Localization mInstance;
diff --git a/Assembly-CSharp/MagicBonusEntity.cs b/Assembly-CSharp/MagicBonusEntity.cs
index 550ba6f..197bdf3 100644
--- a/Assembly-CSharp/MagicBonusEntity.cs
+++ b/Assembly-CSharp/MagicBonusEntity.cs
@@ -29,7 +29,7 @@ public class MagicBonusEntity : BonusEntity
 		base.ActivateGameObject(false);
 	}
 
-	protected override void OnDestroy()
+	public override void OnDestroy()
 	{
 		if (this._attackEffect != null)
 		{
diff --git a/Assembly-CSharp/MalusBonusEntity.cs b/Assembly-CSharp/MalusBonusEntity.cs
index 10488b0..5300516 100644
--- a/Assembly-CSharp/MalusBonusEntity.cs
+++ b/Assembly-CSharp/MalusBonusEntity.cs
@@ -121,7 +121,7 @@ public class MalusBonusEntity : BonusEntity
 		base.SetActive(_Active);
 	}
 
-	protected override void OnDestroy()
+	public override void OnDestroy()
 	{
 	}
 
diff --git a/Assembly-CSharp/ManageRenderSettings.cs b/Assembly-CSharp/ManageRenderSettings.cs
index 063c3e8..eb1bca2 100644
--- a/Assembly-CSharp/ManageRenderSettings.cs
+++ b/Assembly-CSharp/ManageRenderSettings.cs
@@ -3,11 +3,7 @@ using UnityEngine;
 
 public class ManageRenderSettings : MonoBehaviour
 {
-	private void Start()
-	{
-	}
-
-	private void Update()
+	public void Update()
 	{
 		RenderSettings.fog = true;
 		RenderSettings.fogMode = FogMode.Linear;
diff --git a/Assembly-CSharp/MenuChampionship.cs b/Assembly-CSharp/MenuChampionship.cs
index 674ca05..9fabd99 100644
--- a/Assembly-CSharp/MenuChampionship.cs
+++ b/Assembly-CSharp/MenuChampionship.cs
@@ -91,7 +91,7 @@ public class MenuChampionship : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_SOLO);
+			this.ActSwapMenu(EMenus.MENU_SOLO);
 		}
 	}
 
@@ -188,7 +188,7 @@ public class MenuChampionship : AbstractMenu
 	{
 		Singleton<GameConfigurator>.Instance.SetChampionshipData(this.ChampionshipDataComp[iId], false);
 		Singleton<GameConfigurator>.Instance.CurrentTrackIndex = 0;
-		base.ActSwapMenu(EMenus.MENU_SELECT_TRACK);
+		this.ActSwapMenu(EMenus.MENU_SELECT_TRACK);
 	}
 
 	public void OnSelectRandomChampionship()
@@ -238,7 +238,7 @@ public class MenuChampionship : AbstractMenu
 	public void PurchaseItem(object oParam)
 	{
 		Singleton<GameConfigurator>.Instance.SetChampionshipData(this.ChampionshipDataComp[(int)oParam], true);
-		base.ActSwapMenu(EMenus.MENU_SELECT_TRACK);
+		this.ActSwapMenu(EMenus.MENU_SELECT_TRACK);
 	}
 
 	public void OnShop()
diff --git a/Assembly-CSharp/MenuEntryPoint.cs b/Assembly-CSharp/MenuEntryPoint.cs
index 54e28d9..e75fe92 100644
--- a/Assembly-CSharp/MenuEntryPoint.cs
+++ b/Assembly-CSharp/MenuEntryPoint.cs
@@ -5,8 +5,25 @@ using UnityEngine;
 
 public class MenuEntryPoint : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
+		string path;
+		string path2;
+		if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
+		{
+			path = "Camera/CameraCustomMobile";
+			path2 = "Camera/CameraShopMobile";
+		}
+		else
+		{
+			path = "Camera/CameraCustom";
+			path2 = "Camera/CameraShop";
+		}
+		GameObject gameObject = UnityEngine.Object.Instantiate(Resources.Load(path) as GameObject) as GameObject;
+		GameObject gameObject2 = UnityEngine.Object.Instantiate(Resources.Load(path2) as GameObject) as GameObject;
+		this.m_oCurrentCamera = gameObject2.GetComponent<Camera>();
+		this.m_oDefaultCamera = gameObject2.GetComponent<Camera>();
+		this.MenuRefList[4].m_oCamera = gameObject.GetComponent<Camera>();
 		this.mainMenuBackGround = GameObject.Find("GARFIELD");
 		this.menuBackGroundUFO = GameObject.Find("UFO");
 		this.menuBackGroundPIE = GameObject.Find("PIE");
@@ -31,9 +48,9 @@ public class MenuEntryPoint : MonoBehaviour
 		}
 		this.menuBackGroundUFO.SetActive(false);
 		this.menuBackGroundPIE.SetActive(false);
-		foreach (GameObject gameObject in this.menuBackGroundChars)
+		foreach (GameObject gameObject3 in this.menuBackGroundChars)
 		{
-			gameObject.SetActive(false);
+			gameObject3.SetActive(false);
 		}
 	}
 
@@ -115,7 +132,7 @@ public class MenuEntryPoint : MonoBehaviour
 		character.SetActive(false);
 	}
 
-	private void Start()
+	public void Start()
 	{
 		Singleton<GameConfigurator>.Instance.ResetChampionShip();
 		if (Singleton<ChallengeManager>.Instance.IsActive)
@@ -142,7 +159,7 @@ public class MenuEntryPoint : MonoBehaviour
 		}
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this.soundToPlay.Count > 0 && LoadingManager.loadingFinished)
 		{
diff --git a/Assembly-CSharp/MenuMulti.cs b/Assembly-CSharp/MenuMulti.cs
index e34bd11..76ea340 100644
--- a/Assembly-CSharp/MenuMulti.cs
+++ b/Assembly-CSharp/MenuMulti.cs
@@ -16,10 +16,9 @@ public class MenuMulti : AbstractMenu
 		{
 			this.Input.text = Singleton<GameSaveManager>.Instance.GetPseudo();
 			this.Input.defaultText = Localization.instance.Get("MENU_PLAYER");
-			this.Input.maxChars = 8;
+			this.Input.maxChars = 14;
 			this.Input.selected = false;
 		}
-		base.StartCoroutine(this.networkMgr.CheckIP());
 	}
 
 	public override void OnExit()
@@ -30,27 +29,38 @@ public class MenuMulti : AbstractMenu
 
 	public void OnButtonLocal()
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("MJ_SELECTION_LOCAL");
+		}
 		this.OnSubmit();
 		this.networkMgr.BLanOnly = true;
-		base.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
+		this.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
 	}
 
 	public void OnButtonOnLine()
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("MJ_SELECTION_EN_LIGNE");
+		}
 		this.OnSubmit();
 		this.networkMgr.BLanOnly = false;
-		base.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
+		this.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
 	}
 
 	private void OnSubmit()
 	{
 		if (this.Input != null)
 		{
-			string text = NGUITools.StripSymbols(this.Input.text);
-			string text2 = text.Trim();
-			if (!string.IsNullOrEmpty(text2) && text2 != Localization.instance.Get("MENU_PLAYER"))
+			if (ASE_Tools.Available)
+			{
+				ASE_Flurry.LogEvent("MJ_TON_NOM");
+			}
+			string text = NGUITools.StripSymbols(this.Input.text).Trim();
+			if (!string.IsNullOrEmpty(text) && text != Localization.instance.Get("MENU_PLAYER"))
 			{
-				Singleton<GameSaveManager>.Instance.SetPseudo(text2, true);
+				Singleton<GameSaveManager>.Instance.SetPseudo(text, true);
 			}
 			else if (this.Input.text.Equals(string.Empty))
 			{
@@ -64,8 +74,17 @@ public class MenuMulti : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && UnityEngine.Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_WELCOME);
+			this.ActSwapMenu(EMenus.MENU_WELCOME);
+		}
+	}
+
+	public override void ActSwapMenu(EMenus NextMenu)
+	{
+		if (ASE_Tools.Available && NextMenu == EMenus.MENU_WELCOME)
+		{
+			ASE_Flurry.LogEvent("MJ_RETOUR_MENU_PRINCIPAL");
 		}
+		base.ActSwapMenu(NextMenu);
 	}
 
 	private NetworkMgr networkMgr;
diff --git a/Assembly-CSharp/MenuMultiCreate.cs b/Assembly-CSharp/MenuMultiCreate.cs
index ce45caf..423fafd 100644
--- a/Assembly-CSharp/MenuMultiCreate.cs
+++ b/Assembly-CSharp/MenuMultiCreate.cs
@@ -32,8 +32,7 @@ public class MenuMultiCreate : AbstractMenu
 	{
 		Network.Disconnect();
 		Network.maxConnections = this.networkMgr.maxPlayers;
-		NetworkConnectionError networkConnectionError = Network.InitializeServer(this.networkMgr.maxPlayers, this.networkMgr.port, !Network.HavePublicAddress());
-		if (networkConnectionError != NetworkConnectionError.NoError)
+		if (Network.InitializeServer(this.networkMgr.maxPlayers, this.networkMgr.port, !Network.HavePublicAddress()) != NetworkConnectionError.NoError)
 		{
 			PopupDialog popupDialog = (PopupDialog)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG, false);
 			if (popupDialog)
@@ -104,7 +103,7 @@ public class MenuMultiCreate : AbstractMenu
 
 	public void OnFailedToConnectToMasterServer(NetworkConnectionError Error)
 	{
-		base.ActSwapMenu(EMenus.MENU_SOLO);
+		this.ActSwapMenu(EMenus.MENU_SOLO);
 		PopupDialog popupDialog = (PopupDialog)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG, false);
 		if (popupDialog)
 		{
@@ -117,44 +116,28 @@ public class MenuMultiCreate : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && UnityEngine.Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_MULTI);
+			this.ActSwapMenu(EMenus.MENU_MULTI);
 		}
 		if (this.networkMgr.DoneTesting)
 		{
+			this.networkMgr.GameStage = "waitPlayers";
 			if (this.m_bNeedToCreateSolo)
 			{
-				MasterServer.RegisterHost("GK12", "GK12", string.Concat(new string[]
-				{
-					"Single race,",
-					(!this.networkMgr.BLanOnly) ? "WAN," : "LAN,",
-					this.networkMgr.SGameName,
-					",",
-					this.networkMgr.ExternalIP,
-					",waitPlayers,",
-					((int)this.networkMgr.ConnectionStatus).ToString()
-				}));
-				base.ActSwapMenu(EMenus.MENU_MULTI_PLAYERS_LIST);
-				MenuMultiWaitingRoom menuMultiWaitingRoom = this.m_pMenuEntryPoint.MenuRefList[7] as MenuMultiWaitingRoom;
-				menuMultiWaitingRoom.Init(EMenus.MENU_MULTI_CREATE, 0, this.networkMgr.SGameName, 0);
+				this.networkMgr.GameType = "Single race";
+				this.networkMgr.RegisterHost();
+				this.ActSwapMenu(EMenus.MENU_MULTI_PLAYERS_LIST);
+				(this.m_pMenuEntryPoint.MenuRefList[7] as MenuMultiWaitingRoom).Init(EMenus.MENU_MULTI_CREATE, 0, this.networkMgr.SGameName, 0);
 				Singleton<GameConfigurator>.Instance.GameModeType = E_GameModeType.SINGLE;
 				Singleton<GameConfigurator>.Instance.CurrentTrackIndex = UnityEngine.Random.Range(0, 3);
 				this.m_bNeedToCreateSolo = false;
+				return;
 			}
-			else if (this.m_bNeedToCreateChampionship)
+			if (this.m_bNeedToCreateChampionship)
 			{
-				MasterServer.RegisterHost("GK12", "GK12", string.Concat(new string[]
-				{
-					"Championship,",
-					(!this.networkMgr.BLanOnly) ? "WAN," : "LAN,",
-					this.networkMgr.SGameName,
-					",",
-					this.networkMgr.ExternalIP,
-					",waitPlayers,",
-					((int)this.networkMgr.ConnectionStatus).ToString()
-				}));
-				base.ActSwapMenu(EMenus.MENU_MULTI_PLAYERS_LIST);
-				MenuMultiWaitingRoom menuMultiWaitingRoom2 = this.m_pMenuEntryPoint.MenuRefList[7] as MenuMultiWaitingRoom;
-				menuMultiWaitingRoom2.Init(EMenus.MENU_MULTI_CREATE, 0, this.networkMgr.SGameName, 1);
+				this.networkMgr.GameType = "Championship";
+				this.networkMgr.RegisterHost();
+				this.ActSwapMenu(EMenus.MENU_MULTI_PLAYERS_LIST);
+				(this.m_pMenuEntryPoint.MenuRefList[7] as MenuMultiWaitingRoom).Init(EMenus.MENU_MULTI_CREATE, 0, this.networkMgr.SGameName, 1);
 				Singleton<GameConfigurator>.Instance.GameModeType = E_GameModeType.CHAMPIONSHIP;
 				Singleton<GameConfigurator>.Instance.CurrentTrackIndex = 0;
 				this.m_bNeedToCreateChampionship = false;
diff --git a/Assembly-CSharp/MenuMultiJoin.cs b/Assembly-CSharp/MenuMultiJoin.cs
index 5b57500..2f4ff0c 100644
--- a/Assembly-CSharp/MenuMultiJoin.cs
+++ b/Assembly-CSharp/MenuMultiJoin.cs
@@ -1,5 +1,6 @@
 ï»¿using System;
 using System.Collections.Generic;
+using System.Security.Cryptography;
 using UnityEngine;
 
 public class MenuMultiJoin : AbstractMenu
@@ -38,7 +39,7 @@ public class MenuMultiJoin : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_MULTI);
+			this.ActSwapMenu(EMenus.MENU_MULTI);
 		}
 		float deltaTime = Time.deltaTime;
 		this.m_fTimeScroll -= deltaTime;
@@ -90,9 +91,21 @@ public class MenuMultiJoin : AbstractMenu
 					});
 					if (hostData.guid == keyValuePair.Value.guid && array4.Length > 4 && array4[4] == "waitPlayers")
 					{
-						BtnServer component2 = this.m_oButtonServerList[keyValuePair.Key].GetComponent<BtnServer>();
-						keyValuePair.Value.connectedPlayers = hostData.connectedPlayers;
-						component2.SetPlayerCount(hostData.connectedPlayers);
+						GameObject gameObject;
+						if (this.m_oButtonServerList.TryGetValue(keyValuePair.Key, out gameObject))
+						{
+							BtnServer component2 = gameObject.GetComponent<BtnServer>();
+							keyValuePair.Value.connectedPlayers = hostData.connectedPlayers;
+							component2.SetPlayerCount(hostData.connectedPlayers);
+							if (array4.Length >= 7 && array4[6] != "")
+							{
+								this.RemoveServerFromGUI(keyValuePair.Key);
+							}
+						}
+						else if (array4.Length >= 7 && array4[6] == "")
+						{
+							this.AddServerToGUI(keyValuePair.Key, keyValuePair.Value, this.GameTypeStringToInt(array4[0]), array4[2]);
+						}
 						flag = true;
 						break;
 					}
@@ -102,23 +115,28 @@ public class MenuMultiJoin : AbstractMenu
 					list.Add(keyValuePair.Key);
 				}
 			}
-			foreach (int iId in list)
+			foreach (int num in list)
 			{
-				this.RemoveServer(iId);
+				this.RemoveServerFromGUI(num);
+				this.m_oHostDataDic.Remove(num);
 			}
 			List<HostData> list2 = new List<HostData>();
 			foreach (HostData hostData2 in array2)
 			{
-				string[] array6 = hostData2.comment.Split(new char[]
+				string[] array5 = hostData2.comment.Split(new char[]
 				{
 					','
 				});
 				bool flag2 = false;
-				if (array6.Length <= 4 || !(array6[4] == "startGame"))
+				if (array5.Length <= 4 || !(array5[4] == "startGame"))
 				{
 					foreach (KeyValuePair<int, HostData> keyValuePair2 in this.m_oHostDataDic)
 					{
-						if (hostData2.guid == keyValuePair2.Value.guid)
+						string[] array6 = keyValuePair2.Value.comment.Split(new char[]
+						{
+							','
+						});
+						if (hostData2.guid == keyValuePair2.Value.guid && (array5.Length < 7 || array6.Length < 7 || (array5.Length >= 7 && array6.Length >= 7 && array6[6] == array5[6])))
 						{
 							flag2 = true;
 							break;
@@ -146,7 +164,10 @@ public class MenuMultiJoin : AbstractMenu
 				}
 				if (!flag3 || text2.Equals(this.networkMgr.ExternalIP))
 				{
-					this.AddServer(this.m_iNextId++, hostData3, type, sGameName);
+					int iNextId = this.m_iNextId;
+					this.m_iNextId = iNextId + 1;
+					this.m_oHostDataDic.Add(iNextId, hostData3);
+					this.AddServerToGUI(iNextId, hostData3, type, sGameName);
 				}
 			}
 		}
@@ -156,40 +177,19 @@ public class MenuMultiJoin : AbstractMenu
 		}
 	}
 
-	public void AddServer(int iId, HostData host, int type, string sGameName)
-	{
-		this.m_oHostDataDic.Add(iId, host);
-		this.AddServer(iId, sGameName, host.connectedPlayers, type);
-	}
-
-	public void AddServer(int iId, string sServerName, int iNbPlayers, int iGameType)
+	private void AddServerToGUI(int iId, HostData host, int type, string sGameName)
 	{
-		if (!this.m_oScrollPanel)
+		string[] array = host.comment.Split(new char[]
 		{
-			return;
-		}
-		GameObject gameObject = this.m_oScrollPanel.transform.GetChild(0).gameObject;
-		GameObject gameObject2 = (GameObject)UnityEngine.Object.Instantiate(this.m_oButtonServerTemplate);
-		if (!gameObject2)
-		{
-			return;
-		}
-		gameObject2.transform.parent = gameObject.transform;
-		this.m_oButtonServerList.Add(iId, gameObject2);
-		BtnServer component = gameObject2.GetComponent<BtnServer>();
-		if (!component)
-		{
-			return;
-		}
-		component.Init(iId, sServerName, iNbPlayers, iGameType, base.gameObject, this.m_oScrollPanel);
-		gameObject.SendMessage("Reposition");
-		if (this.NoGame && this.NoGame.activeSelf)
+			','
+		});
+		if (array.Length < 7 || (array.Length >= 7 && array[6] == ""))
 		{
-			this.NoGame.SetActive(false);
+			this.AddServerToGUI(iId, sGameName, host.connectedPlayers, type);
 		}
 	}
 
-	public void RemoveServer(int iId)
+	public void RemoveServerFromGUI(int iId)
 	{
 		GameObject obj;
 		if (this.m_oButtonServerList.TryGetValue(iId, out obj))
@@ -197,9 +197,7 @@ public class MenuMultiJoin : AbstractMenu
 			UnityEngine.Object.Destroy(obj);
 			this.m_oButtonServerList.Remove(iId);
 		}
-		this.m_oHostDataDic.Remove(iId);
-		GameObject gameObject = this.m_oScrollPanel.transform.GetChild(0).gameObject;
-		gameObject.SendMessage("Reposition");
+		this.m_oScrollPanel.transform.GetChild(0).gameObject.SendMessage("Reposition");
 		if (this.m_oButtonServerList.Count == 0 && this.NoGame && !this.NoGame.activeSelf)
 		{
 			this.NoGame.SetActive(true);
@@ -232,24 +230,28 @@ public class MenuMultiJoin : AbstractMenu
 
 	public void OnServer(int iId)
 	{
-		GameObject gameObject;
-		if (this.m_oButtonServerList.TryGetValue(iId, out gameObject))
+		HostData hostData;
+		if (this.m_oHostDataDic.TryGetValue(iId, out hostData))
 		{
-			BtnServer component = gameObject.GetComponent<BtnServer>();
-			if (component && this.serverId == -1)
+			string[] array = hostData.comment.Split(new char[]
 			{
-				if (component.GetPlayerCount() >= 6)
+				','
+			});
+			if (array.Length >= 5 && this.serverId == -1)
+			{
+				if (hostData.connectedPlayers >= 6)
 				{
 					PopupDialog popupDialog = (PopupDialog)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG, false);
 					if (popupDialog)
 					{
 						popupDialog.Show("MENU_POPUP_FULL");
+						return;
 					}
 				}
 				else
 				{
-					this.sServerName = component.GetServerName();
-					this.iGameType = component.GetGameType();
+					this.sServerName = array[2];
+					this.iGameType = this.GameTypeStringToInt(array[0]);
 					Network.Disconnect();
 					if (this.ConnectingLabel != null)
 					{
@@ -273,9 +275,8 @@ public class MenuMultiJoin : AbstractMenu
 		{
 			this.ConnectingLabel.enabled = false;
 		}
-		MenuMultiWaitingRoom menuMultiWaitingRoom = this.m_pMenuEntryPoint.MenuRefList[7] as MenuMultiWaitingRoom;
-		menuMultiWaitingRoom.Init(EMenus.MENU_MULTI_JOIN, this.serverId, this.sServerName, this.iGameType);
-		base.ActSwapMenu(EMenus.MENU_MULTI_PLAYERS_LIST);
+		(this.m_pMenuEntryPoint.MenuRefList[7] as MenuMultiWaitingRoom).Init(EMenus.MENU_MULTI_JOIN, this.serverId, this.sServerName, this.iGameType);
+		this.ActSwapMenu(EMenus.MENU_MULTI_PLAYERS_LIST);
 		Singleton<GameConfigurator>.Instance.GameModeType = ((this.iGameType != 0) ? E_GameModeType.CHAMPIONSHIP : E_GameModeType.SINGLE);
 	}
 
@@ -291,7 +292,7 @@ public class MenuMultiJoin : AbstractMenu
 
 	public void OnFailedToConnectToMasterServer(NetworkConnectionError Error)
 	{
-		base.ActSwapMenu(EMenus.MENU_SOLO);
+		this.ActSwapMenu(EMenus.MENU_SOLO);
 		PopupDialog popupDialog = (PopupDialog)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG, false);
 		if (popupDialog)
 		{
@@ -300,6 +301,116 @@ public class MenuMultiJoin : AbstractMenu
 		Network.Disconnect();
 	}
 
+	private void AddServerToGUI(int iId, string sServerName, int iNbPlayers, int iGameType)
+	{
+		if (!this.m_oScrollPanel)
+		{
+			return;
+		}
+		GameObject gameObject = this.m_oScrollPanel.transform.GetChild(0).gameObject;
+		GameObject gameObject2 = (GameObject)UnityEngine.Object.Instantiate(this.m_oButtonServerTemplate);
+		if (!gameObject2)
+		{
+			return;
+		}
+		gameObject2.transform.parent = gameObject.transform;
+		this.m_oButtonServerList.Add(iId, gameObject2);
+		BtnServer component = gameObject2.GetComponent<BtnServer>();
+		if (!component)
+		{
+			return;
+		}
+		component.Init(iId, sServerName, iNbPlayers, iGameType, base.gameObject, this.m_oScrollPanel);
+		gameObject.SendMessage("Reposition");
+		if (this.NoGame && this.NoGame.activeSelf)
+		{
+			this.NoGame.SetActive(false);
+		}
+	}
+
+	public override void Start()
+	{
+		foreach (BoxCollider boxCollider in base.GetComponentsInChildren<BoxCollider>())
+		{
+			if (boxCollider.name == "ButtonRefresh")
+			{
+				this.m_directConnectButtonPosition = this.m_oMenuCamera.camera.WorldToScreenPoint(boxCollider.bounds.center);
+				this.m_directConnectButtonPosition.y = (float)Screen.height - this.m_directConnectButtonPosition.y;
+			}
+		}
+		foreach (Component component in base.GetComponentsInChildren<Component>())
+		{
+			if (component.name == "ButtonRefresh")
+			{
+				component.active = false;
+			}
+		}
+	}
+
+	public void OnGUI()
+	{
+		if (this.m_guiState == MenuMultiJoin.GUIState.SHOW_POPUP_FIELDS)
+		{
+			this.m_gameIDToConnectTo = ModGUIHelper.CenteredTextField(new Vector3((float)Screen.width / 2f, (float)Screen.height / 2f + 15f), new Vector2((float)Screen.width * 0.25f, 30f), this.m_gameIDToConnectTo, FontStyle.Normal, 32);
+			this.m_gameIDToConnectTo = new string(Array.FindAll<char>(this.m_gameIDToConnectTo.ToCharArray(), (char c) => char.IsDigit(c)));
+			return;
+		}
+		if (this.m_guiState == MenuMultiJoin.GUIState.SHOW_DIRECT_CONNECT && ModGUIHelper.CenteredButton(this.m_directConnectButtonPosition, new Vector2((float)Screen.width * 0.25f, (float)Screen.height * 0.1f), "Direct Connect", ""))
+		{
+			Popup2Choices popup2Choices = (Popup2Choices)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG_2CHOICES, false);
+			popup2Choices.ShowText("Enter Game ID Below:", delegate(object unused)
+			{
+				this.m_guiState = MenuMultiJoin.GUIState.SHOW_DIRECT_CONNECT;
+			}, new Popup2Choices.Callback(this.StartDirectConnection), new object(), "Cancel", "MENU_POPUP_OK");
+			this.m_popupTextPosition = this.m_oMenuCamera.camera.WorldToScreenPoint(popup2Choices.Text.GetComponent<UILabel>().transform.position);
+			this.m_guiState = MenuMultiJoin.GUIState.SHOW_POPUP_FIELDS;
+		}
+	}
+
+	private void StartDirectConnection(object unused)
+	{
+		this.networkMgr.PrivateServerToConnectTo = this.m_gameIDToConnectTo;
+		bool flag = false;
+		using (SHA512 sha = new SHA512Managed())
+		{
+			foreach (KeyValuePair<int, HostData> keyValuePair in this.m_oHostDataDic)
+			{
+				string[] array = keyValuePair.Value.comment.Split(new char[]
+				{
+					','
+				});
+				if (array.Length >= 7 && array[6] == this.networkMgr.ComputeConnectionChallenge(sha, this.m_gameIDToConnectTo, array[3]))
+				{
+					this.OnServer(keyValuePair.Key);
+					flag = true;
+					break;
+				}
+			}
+		}
+		if (!flag)
+		{
+			PopupDialog popupDialog = (PopupDialog)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG, false);
+			popupDialog.OnQuitCallback = delegate()
+			{
+				this.m_guiState = MenuMultiJoin.GUIState.SHOW_DIRECT_CONNECT;
+			};
+			popupDialog.ShowText("Couldn't find a server with an ID of \"" + this.m_gameIDToConnectTo + "\".");
+			this.m_guiState = MenuMultiJoin.GUIState.SHOW_NONE;
+			this.m_gameIDToConnectTo = "";
+			return;
+		}
+		this.m_guiState = MenuMultiJoin.GUIState.SHOW_DIRECT_CONNECT;
+	}
+
+	private int GameTypeStringToInt(string gameTypeString)
+	{
+		if (gameTypeString.Equals("Single race"))
+		{
+			return 0;
+		}
+		return 1;
+	}
+
 	public GameObject m_oScrollPanel;
 
 	public GameObject m_oButtonServerTemplate;
@@ -331,4 +442,19 @@ public class MenuMultiJoin : AbstractMenu
 	private float m_fSpeedScroll;
 
 	private float m_fTimeScroll = 0.3f;
+
+	private Vector3 m_directConnectButtonPosition;
+
+	private string m_gameIDToConnectTo = "";
+
+	private Vector3 m_popupTextPosition;
+
+	private MenuMultiJoin.GUIState m_guiState;
+
+	private enum GUIState
+	{
+		SHOW_DIRECT_CONNECT,
+		SHOW_POPUP_FIELDS,
+		SHOW_NONE
+	}
 }
diff --git a/Assembly-CSharp/MenuMultiWaitingRoom.cs b/Assembly-CSharp/MenuMultiWaitingRoom.cs
index 0e14f5b..a8ae7bf 100644
--- a/Assembly-CSharp/MenuMultiWaitingRoom.cs
+++ b/Assembly-CSharp/MenuMultiWaitingRoom.cs
@@ -4,6 +4,14 @@ using UnityEngine;
 
 public class MenuMultiWaitingRoom : AbstractMenu
 {
+	public MenuMultiWaitingRoom()
+	{
+		this.columnOneX = (float)Screen.width / 3f;
+		this.rowIncrement = (float)Screen.height / 5f;
+		this.buttonSize = new Vector2(this.columnOneX - 30f, this.rowIncrement - 20f);
+		this.columnTwoX = this.columnOneX * 2f;
+	}
+
 	public override void Awake()
 	{
 		base.Awake();
@@ -46,11 +54,9 @@ public class MenuMultiWaitingRoom : AbstractMenu
 		if (Network.isServer)
 		{
 			this.IconType.ChangeTexture(1);
+			return;
 		}
-		else
-		{
-			this.IconType.ChangeTexture(0);
-		}
+		this.IconType.ChangeTexture(0);
 	}
 
 	public override void Update()
@@ -93,24 +99,24 @@ public class MenuMultiWaitingRoom : AbstractMenu
 		{
 			return;
 		}
-		int i = 0;
+		int num = 0;
 		this.m_oPlayerList.Clear();
 		this.m_oPlayerColor.Clear();
-		int num = 0;
+		int num2 = 0;
 		foreach (KeyValuePair<NetworkPlayer, Color> keyValuePair in this.networkMgr.PlayersColor)
 		{
-			this.m_oPlayerColor.Add(num, keyValuePair.Value);
-			num++;
+			this.m_oPlayerColor.Add(num2, keyValuePair.Value);
+			num2++;
 		}
-		num = 0;
+		num2 = 0;
 		foreach (KeyValuePair<NetworkPlayer, string> keyValuePair2 in this.networkMgr.PeerNames)
 		{
-			this.m_oPlayerList.Add(num, keyValuePair2.Value);
-			num++;
+			this.m_oPlayerList.Add(num2, keyValuePair2.Value);
+			num2++;
 		}
-		if (this.m_iLastNbPeers != num)
+		if (this.m_iLastNbPeers != num2)
 		{
-			this.m_iLastNbPeers = num;
+			this.m_iLastNbPeers = num2;
 			if (this.m_iLastNbPeers < 2)
 			{
 				this.m_oNextButton.SetActive(false);
@@ -120,35 +126,44 @@ public class MenuMultiWaitingRoom : AbstractMenu
 				this.m_oNextButton.SetActive(Network.isServer);
 			}
 		}
-		foreach (KeyValuePair<int, string> keyValuePair3 in this.m_oPlayerList)
+		using (Dictionary<int, string>.Enumerator enumerator3 = this.m_oPlayerList.GetEnumerator())
 		{
-			if (this.m_oPlayerLabel[i])
-			{
-				this.m_oPlayerLabel[i].text = keyValuePair3.Value;
-			}
-			if (this.PlayerBackground[i])
+			while (enumerator3.MoveNext())
 			{
-				this.PlayerBackground[i].color = this.m_oPlayerColor[i];
-				this.PlayerBackground[i].gameObject.SetActive(true);
+				KeyValuePair<int, string> keyValuePair3 = enumerator3.Current;
+				if (this.m_oPlayerLabel[num])
+				{
+					this.m_oPlayerLabel[num].text = keyValuePair3.Value;
+				}
+				if (this.PlayerBackground[num])
+				{
+					this.PlayerBackground[num].color = this.m_oPlayerColor[num];
+					this.PlayerBackground[num].gameObject.SetActive(true);
+				}
+				num++;
 			}
-			i++;
+			goto IL_1FC;
 		}
-		while (i < 6)
+		IL_1AD:
+		if (this.m_oPlayerLabel[num])
 		{
-			if (this.m_oPlayerLabel[i])
-			{
-				this.m_oPlayerLabel[i].text = string.Empty;
-			}
-			if (this.PlayerBackground[i])
-			{
-				this.PlayerBackground[i].gameObject.SetActive(false);
-			}
-			i++;
+			this.m_oPlayerLabel[num].text = string.Empty;
 		}
-		if (this.m_oNbPlayersLabel)
+		if (this.PlayerBackground[num])
 		{
-			this.m_oNbPlayersLabel.text = string.Format("{0} / 6 ", this.networkMgr.NbPeers) + Localization.instance.Get("MENU_PLAYERS");
+			this.PlayerBackground[num].gameObject.SetActive(false);
 		}
+		num++;
+		IL_1FC:
+		if (num >= 6)
+		{
+			if (this.m_oNbPlayersLabel)
+			{
+				this.m_oNbPlayersLabel.text = string.Format("{0} / 6 ", this.networkMgr.NbPeers) + Localization.instance.Get("MENU_PLAYERS");
+			}
+			return;
+		}
+		goto IL_1AD;
 	}
 
 	public override void OnEnter()
@@ -169,6 +184,21 @@ public class MenuMultiWaitingRoom : AbstractMenu
 			this.ServerName.text = this.networkMgr.ServerName;
 			this.NotifySelectingTrack();
 		}
+		foreach (UISlicedSprite uislicedSprite in base.GetComponentsInChildren<UISlicedSprite>())
+		{
+			if (uislicedSprite.spriteName == "gui_back_inactive")
+			{
+				Vector3 vector = this.m_oMenuCamera.camera.WorldToScreenPoint(uislicedSprite.transform.position);
+				Vector3 vector2 = this.m_oMenuCamera.camera.WorldToScreenPoint(uislicedSprite.cachedTransform.lossyScale);
+				Rect rect = new Rect(vector.x - vector2.x / 2f, vector.y - vector2.y / 2f, vector2.x, vector2.y);
+				int num = 200;
+				this.m_serverVisibilityPositioningRect = new Rect((float)Screen.width / 2f - (float)num / 2f, 0f, (float)num, 0f)
+				{
+					yMin = rect.yMax - 0.25f * rect.height + 15f,
+					yMax = rect.yMax - 10f
+				};
+			}
+		}
 	}
 
 	public override void OnExit()
@@ -180,14 +210,14 @@ public class MenuMultiWaitingRoom : AbstractMenu
 
 	public void OnBackButton()
 	{
-		base.ActSwapMenu(this.m_eFromMenu);
+		this.ActSwapMenu(EMenus.MENU_MULTI);
 		Network.Disconnect();
 	}
 
 	public void OnNextButton()
 	{
 		this.networkMgr.networkView.RPC("AssignPlayerColor", RPCMode.All, new object[0]);
-		base.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
+		this.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
 		if (Network.isServer)
 		{
 			Network.maxConnections = 0;
@@ -197,15 +227,8 @@ public class MenuMultiWaitingRoom : AbstractMenu
 			}
 		}
 		this.networkMgr.networkView.RPC("NotifySelectingTrack", RPCMode.Others, new object[0]);
-		MasterServer.RegisterHost("GK12", "GK12", string.Concat(new string[]
-		{
-			"Championship,",
-			(!this.networkMgr.BLanOnly) ? "WAN," : "LAN,",
-			this.networkMgr.SGameName,
-			",",
-			Network.player.externalIP,
-			",startGame"
-		}));
+		this.networkMgr.GameStage = "startGame";
+		this.networkMgr.RegisterHost();
 	}
 
 	public void NotifySelectingTrack()
@@ -226,7 +249,7 @@ public class MenuMultiWaitingRoom : AbstractMenu
 
 	public void OnFailedToConnectToMasterServer(NetworkConnectionError Error)
 	{
-		base.ActSwapMenu(EMenus.MENU_SOLO);
+		this.ActSwapMenu(EMenus.MENU_SOLO);
 		PopupDialog popupDialog = (PopupDialog)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG, false);
 		if (popupDialog)
 		{
@@ -235,6 +258,89 @@ public class MenuMultiWaitingRoom : AbstractMenu
 		Network.Disconnect();
 	}
 
+	public void OnGUI()
+	{
+		if (!Network.isServer)
+		{
+			return;
+		}
+		if (GUI.Button(new Rect(100f, (float)Screen.height - 200f, 200f, 200f), new GUIContent(), new GUIStyle()))
+		{
+			this.OnBackButton();
+		}
+		Rect serverVisibilityPositioningRect = this.m_serverVisibilityPositioningRect;
+		float num = (float)Screen.width * 0.08f;
+		serverVisibilityPositioningRect.x -= num;
+		if (ModGUIHelper.RectButton(serverVisibilityPositioningRect, "Game Settings", ""))
+		{
+			this.m_isSettingsMenuOpen = true;
+		}
+		Rect serverVisibilityPositioningRect2 = this.m_serverVisibilityPositioningRect;
+		serverVisibilityPositioningRect2.xMin = serverVisibilityPositioningRect.xMax;
+		serverVisibilityPositioningRect2.xMax += num;
+		GUI.Box(serverVisibilityPositioningRect2, new GUIContent
+		{
+			text = string.Format("Your game is currently {0}." + (this.networkMgr.Private ? " Other users can direct connect using the ID: <b>{1}</b>" : ""), this.networkMgr.Private ? "private" : "public", this.networkMgr.DirectConnectID)
+		}, new GUIStyle(GUI.skin.box)
+		{
+			wordWrap = true,
+			richText = true,
+			alignment = TextAnchor.MiddleCenter
+		});
+		if (this.m_isSettingsMenuOpen)
+		{
+			this.DrawSettingsWindow();
+		}
+	}
+
+	public new void Start()
+	{
+		foreach (UIButtonScale uibuttonScale in base.GetComponentsInChildren<UIButtonScale>())
+		{
+			if (uibuttonScale.name == "ButtonPrev")
+			{
+				Transform componentInChildren = uibuttonScale.GetComponentInChildren<Transform>();
+				componentInChildren.localScale = new Vector3(-50f, 50f);
+				uibuttonScale.tweenTarget = componentInChildren;
+			}
+		}
+	}
+
+	private void DrawSettingsWindow()
+	{
+		GUI.Box(new Rect(0f, 0f, (float)Screen.width, (float)Screen.height), "");
+		ModGUIHelper.CenteredLabel(new Vector3((float)Screen.width / 2f, this.rowIncrement * 1.5f), this.buttonSize, "Settings", 32);
+		if (ModGUIHelper.CenteredButton(new Vector3(80f, 80f), new Vector2(60f, 60f), "X", ""))
+		{
+			this.m_isSettingsMenuOpen = false;
+		}
+		if (ModGUIHelper.CenteredButton(new Vector3(this.columnOneX, this.rowIncrement * 2f), this.buttonSize, "Make " + ((!this.networkMgr.Private) ? "Private" : "Public"), ""))
+		{
+			this.networkMgr.Private = !this.networkMgr.Private;
+			this.networkMgr.RegisterHost();
+		}
+		this.ModifierToggleButton(ref Singleton<GameManager>.Instance.Modifiers.KickCheaters, this.columnTwoX, 2f, "Kick Baddies", "");
+		this.ModifierToggleButton(ref Singleton<GameManager>.Instance.Modifiers.JumpyBots, this.columnOneX, 3f, "Jumpy Bots", "Make NPCs drive... differently.");
+		this.ModifierToggleButton(ref Singleton<GameManager>.Instance.Modifiers.BottomlessPowerups, this.columnTwoX, 3f, "Unlimited Powerups", "Never run out of powerups.");
+		this.ModifierToggleButton(ref Singleton<GameManager>.Instance.Modifiers.SleepsOnly, this.columnOneX, 4f, "Sleeps Only", "Only give players sleep powerups.");
+		if (GUI.tooltip != "")
+		{
+			GUI.Box(new Rect(Input.mousePosition.x, (float)Screen.height - Input.mousePosition.y, 150f, 38f), GUI.tooltip, new GUIStyle(GUI.skin.box)
+			{
+				wordWrap = true,
+				alignment = TextAnchor.MiddleCenter
+			});
+		}
+	}
+
+	private void ModifierToggleButton(ref bool modifier, float xPosition, float row, string text, string tooltip)
+	{
+		if (ModGUIHelper.CenteredButton(new Vector3(xPosition, this.rowIncrement * row), this.buttonSize, text, tooltip, modifier))
+		{
+			modifier = !modifier;
+		}
+	}
+
 	private EMenus m_eFromMenu;
 
 	private Dictionary<int, string> m_oPlayerList = new Dictionary<int, string>();
@@ -268,4 +374,20 @@ public class MenuMultiWaitingRoom : AbstractMenu
 	private bool m_bRefreshPanel;
 
 	private bool m_bInitCalled;
+
+	private List<Tuple<string, Rect>> m_componentPositions = new List<Tuple<string, Rect>>();
+
+	private Rect m_serverVisibilityPositioningRect;
+
+	private bool m_isPublic = true;
+
+	private bool m_isSettingsMenuOpen;
+
+	private float columnOneX;
+
+	private float rowIncrement;
+
+	private Vector2 buttonSize;
+
+	private float columnTwoX;
 }
diff --git a/Assembly-CSharp/MenuOption.cs b/Assembly-CSharp/MenuOption.cs
index 1532fcf..dab889f 100644
--- a/Assembly-CSharp/MenuOption.cs
+++ b/Assembly-CSharp/MenuOption.cs
@@ -10,13 +10,26 @@ public class MenuOption : AbstractMenu
 		{
 			this.m_oIconLanguage.ChangeTexture((int)Singleton<GameOptionManager>.Instance.GetCurrentLangId());
 		}
-		if (this.Controls && Application.platform != RuntimePlatform.Android && Application.platform != RuntimePlatform.IPhonePlayer)
+		if (this.Languages)
 		{
-			this.Controls.SetActive(false);
+			if (Localization.instance.languages.Length > 1)
+			{
+				this.Languages.SetActive(true);
+			}
+			else
+			{
+				this.Languages.SetActive(false);
+			}
+		}
+		if (this.Controls)
+		{
+			this.Controls.GetComponentInChildren<UILocalize>().key = "Multiplayer";
 		}
 	}
 
 	public UITexturePattern m_oIconLanguage;
 
 	public GameObject Controls;
+
+	public GameObject Languages;
 }
diff --git a/Assembly-CSharp/MenuOptionInput.cs b/Assembly-CSharp/MenuOptionInput.cs
index 1b962ce..e8774ff 100644
--- a/Assembly-CSharp/MenuOptionInput.cs
+++ b/Assembly-CSharp/MenuOptionInput.cs
@@ -1,47 +1,179 @@
 ï»¿using System;
+using System.Diagnostics;
+using System.IO;
+using System.Reflection;
 using UnityEngine;
 
 public class MenuOptionInput : AbstractMenu
 {
+	public MenuOptionInput()
+	{
+		this.m_matchmakingServers = new Tuple<string, string>[3];
+		this.m_matchmakingServers[0] = new Tuple<string, string>("Pietroglyph's Server", MenuOptionInput.defaultMatchmakingServer);
+		this.m_matchmakingServers[1] = new Tuple<string, string>("Vanilla Game Server", "94.23.51.63");
+		this.m_matchmakingServers[2] = new Tuple<string, string>("Custom", "");
+		string text = Uri.UnescapeDataString(new UriBuilder(Assembly.GetExecutingAssembly().CodeBase).Path);
+		this.m_lastPatchedTimestamp = File.GetLastWriteTime(text).ToString("hh:mm tt on MM/dd/yyyy");
+		FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(text);
+		this.m_version = versionInfo.FileMajorPart + "." + versionInfo.FileMinorPart;
+	}
+
 	public override void OnEnter()
 	{
 		base.OnEnter();
-		this.m_fGyroSensibility = Singleton<GameOptionManager>.Instance.GetGyroSensibility();
-		E_InputType inputType = Singleton<GameOptionManager>.Instance.GetInputType();
-		if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
+		this.m_pBtnGyro.active = false;
+		this.m_pBtnTouched.active = false;
+		this.m_pGyroSlider.active = false;
+		if (this.m_relabelled)
+		{
+			this.UpdateMatchmakingServerFromGameSave();
+			return;
+		}
+		foreach (UILocalize uilocalize in base.GetComponentsInChildren<UILocalize>())
 		{
-			if (inputType == E_InputType.Gyroscopic)
+			if (uilocalize.key == "MENU_CONTROLE")
+			{
+				uilocalize.key = "Multiplayer Settings";
+			}
+			else if (uilocalize.key == "MENU_BT_GYRO")
+			{
+				uilocalize.key = "Matchmaking Server";
+			}
+			else if (uilocalize.key == "MENU_BT_SENSIBILITY")
+			{
+				this.m_serverNameLabel = uilocalize;
+				this.m_serverNameLabel.key = this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item1;
+				this.m_serverNameLabel.Localize();
+			}
+			else if (uilocalize.key == "MENU_BT_TOUCH")
 			{
-				this.m_pBtnGyro.isChecked = true;
-				this.m_pBtnTouched.isChecked = false;
+				uilocalize.key = "About";
+				this.m_secondPanelTitlePosition = this.m_oMenuCamera.camera.WorldToScreenPoint(uilocalize.transform.position);
 			}
 			else
 			{
-				this.m_pBtnTouched.isChecked = true;
-				this.m_pBtnGyro.isChecked = false;
+				UILabel componentInChildren = uilocalize.GetComponentInChildren<UILabel>();
+				if (componentInChildren != null)
+				{
+					componentInChildren.active = false;
+				}
 			}
-			if (this.m_pGyroSlider)
+		}
+		this.m_relabelled = true;
+	}
+
+	public override void OnExit()
+	{
+		this.UpdateMatchmakingServerInGameSave();
+		base.OnExit();
+	}
+
+	public void OnGUI()
+	{
+		this.DrawFirstPanel();
+		this.DrawSecondPanel();
+	}
+
+	public override void Awake()
+	{
+		base.Awake();
+		this.UpdateMatchmakingServerFromGameSave();
+		this.m_networkManager = (NetworkMgr)UnityEngine.Object.FindObjectOfType(typeof(NetworkMgr));
+	}
+
+	private void UpdateMatchmakingServerFromGameSave()
+	{
+		string matchmakingServer = Singleton<GameSaveManager>.Instance.GetMatchmakingServer();
+		int num = -1;
+		Tuple<string, string>[] matchmakingServers = this.m_matchmakingServers;
+		for (int i = 0; i < matchmakingServers.Length; i++)
+		{
+			if (matchmakingServers[i].Item2 == matchmakingServer)
 			{
-				this.m_pGyroSlider.sliderValue = this.m_fGyroSensibility;
+				num = i;
+				break;
 			}
 		}
+		if (num == -1)
+		{
+			num = 2;
+			this.m_matchmakingServers[num].Item2 = matchmakingServer;
+		}
+		this.m_currentMatchmakingServerIndex = num;
 	}
 
-	public void OnSelectInput(int iInput)
+	private void UpdateMatchmakingServerInGameSave()
 	{
-		Singleton<GameOptionManager>.Instance.SetInputType((E_InputType)iInput, true);
+		Singleton<GameSaveManager>.Instance.SetMatchmakingServer(this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item2, true);
+		this.m_networkManager.MatchmakingServer = this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item2;
 	}
 
-	public void OnChangeSensibility(float fValue)
+	private void DrawFirstPanel()
 	{
-		this.m_fGyroSensibility = fValue;
-		Singleton<GameOptionManager>.Instance.SetGyroSensibility(this.m_fGyroSensibility, false);
+		Vector3 vector = this.m_oMenuCamera.camera.WorldToScreenPoint(this.m_serverNameLabel.transform.position);
+		vector.y += 200f;
+		float x = 270f;
+		int num = this.m_currentMatchmakingServerIndex;
+		if (ModGUIHelper.CenteredTickerButton(new Vector2(vector.x - 50f, vector.y), ModGUIHelper.TickerDirection.LEFT))
+		{
+			num--;
+		}
+		else if (ModGUIHelper.CenteredTickerButton(new Vector2(vector.x + 50f, vector.y), ModGUIHelper.TickerDirection.RIGHT))
+		{
+			num++;
+		}
+		if (num != this.m_currentMatchmakingServerIndex)
+		{
+			if (num >= this.m_matchmakingServers.Length)
+			{
+				num = 0;
+			}
+			else if (num < 0)
+			{
+				num = this.m_matchmakingServers.Length - 1;
+			}
+			this.m_currentMatchmakingServerIndex = num;
+			this.m_serverNameLabel.key = this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item1;
+			this.m_serverNameLabel.Localize();
+			this.UpdateMatchmakingServerInGameSave();
+		}
+		vector.y -= 100f;
+		string text = ModGUIHelper.CenteredTextField(vector, new Vector2(x, 42f), this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item2, (this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item1 == "Custom") ? FontStyle.Normal : FontStyle.Italic, 32);
+		if (this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item1 == "Custom")
+		{
+			if (this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item2 != text)
+			{
+				this.m_matchmakingServers[this.m_currentMatchmakingServerIndex].Item2 = text;
+				this.m_customServerUnsaved = true;
+			}
+			if (this.m_customServerUnsaved)
+			{
+				vector.y += 250f;
+				if (ModGUIHelper.CenteredButton(vector, new Vector2(80f, 30f), "Save", ""))
+				{
+					this.m_customServerUnsaved = false;
+					this.UpdateMatchmakingServerInGameSave();
+				}
+			}
+		}
 	}
 
-	public override void OnExit()
+	private void DrawSecondPanel()
 	{
-		Singleton<GameOptionManager>.Instance.SetGyroSensibility(this.m_fGyroSensibility, true);
-		base.OnExit();
+		Vector3 vector = new Vector3(this.m_secondPanelTitlePosition.x, this.m_secondPanelTitlePosition.y + 258f);
+		string text = string.Concat(new string[]
+		{
+			"Version ",
+			this.m_version,
+			".\r\n\r\nGame patched on ",
+			this.m_lastPatchedTimestamp,
+			".\r\n\r\nThis mod was written in 2018 by Declan Freeman-Gleason. I originally reversed this game and saw that multiplayer was already in the code, but disabled, so I enabled it and added some features. Then, literally the day before I was going to release the patch they enabled mutliplayer in the beta channel of the game (lucky me), so I added hacks. You can view more of my work at https://github.com/pietroglyph."
+		});
+		ModGUIHelper.CenteredLabel(vector, new Vector2(120f, 500f), text);
+		if (ModGUIHelper.CenteredButton(new Vector3(vector.x, this.m_secondPanelTitlePosition.y), new Vector2(200f, 70f), "Mod Website", ""))
+		{
+			Process.Start("https://github.com/pietroglyph/lasagne");
+		}
 	}
 
 	public UICheckbox m_pBtnGyro;
@@ -51,4 +183,26 @@ public class MenuOptionInput : AbstractMenu
 	public UISlider m_pGyroSlider;
 
 	private float m_fGyroSensibility;
+
+	private bool m_relabelled;
+
+	private Tuple<string, string>[] m_matchmakingServers;
+
+	private int m_currentMatchmakingServerIndex;
+
+	private const string k_customServerKey = "Custom";
+
+	private NetworkMgr m_networkManager;
+
+	public static string defaultMatchmakingServer = "matchmaking.lasagne.margo.ml";
+
+	private UILocalize m_serverNameLabel;
+
+	private bool m_customServerUnsaved;
+
+	private Vector3 m_secondPanelTitlePosition;
+
+	private string m_lastPatchedTimestamp;
+
+	private string m_version;
 }
diff --git a/Assembly-CSharp/MenuOptionLanguage.cs b/Assembly-CSharp/MenuOptionLanguage.cs
index 18cc728..bccc1d1 100644
--- a/Assembly-CSharp/MenuOptionLanguage.cs
+++ b/Assembly-CSharp/MenuOptionLanguage.cs
@@ -25,7 +25,7 @@ public class MenuOptionLanguage : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_OPTIONS);
+			this.ActSwapMenu(EMenus.MENU_OPTIONS);
 		}
 	}
 
diff --git a/Assembly-CSharp/MenuOptionSound.cs b/Assembly-CSharp/MenuOptionSound.cs
index f4f5845..82227d7 100644
--- a/Assembly-CSharp/MenuOptionSound.cs
+++ b/Assembly-CSharp/MenuOptionSound.cs
@@ -51,7 +51,7 @@ public class MenuOptionSound : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_OPTIONS);
+			this.ActSwapMenu(EMenus.MENU_OPTIONS);
 		}
 	}
 
diff --git a/Assembly-CSharp/MenuPlaySolo.cs b/Assembly-CSharp/MenuPlaySolo.cs
index cb13a4c..36584e0 100644
--- a/Assembly-CSharp/MenuPlaySolo.cs
+++ b/Assembly-CSharp/MenuPlaySolo.cs
@@ -14,10 +14,9 @@ public class MenuPlaySolo : AbstractMenu
 			this.Input.maxChars = 8;
 			this.Input.selected = false;
 		}
-		if (Network.isServer)
-		{
-			Network.Disconnect();
-		}
+		this.MultiButton.SetActive(true);
+		this.MultiBackgroundButton.SetActive(true);
+		this.MultiTextTitle.SetActive(true);
 	}
 
 	public override void OnExit()
@@ -31,22 +30,34 @@ public class MenuPlaySolo : AbstractMenu
 
 	public void OnButtonSingleRace()
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("1J_DEMARRER_COURSE_UNIQUE");
+		}
 		this.OnSubmit();
-		base.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
+		this.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
 		Singleton<GameConfigurator>.Instance.GameModeType = E_GameModeType.SINGLE;
 	}
 
 	public void OnButtonChampionship()
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("1J_DEMARRER_GRAND_PRIX");
+		}
 		this.OnSubmit();
-		base.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
+		this.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
 		Singleton<GameConfigurator>.Instance.GameModeType = E_GameModeType.CHAMPIONSHIP;
 	}
 
 	public void OnButtonTimeTrial()
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("1J_DEMARRER_CONTRE_LA_MONTRE");
+		}
 		this.OnSubmit();
-		base.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
+		this.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
 		Singleton<GameConfigurator>.Instance.GameModeType = E_GameModeType.TIME_TRIAL;
 	}
 
@@ -54,11 +65,14 @@ public class MenuPlaySolo : AbstractMenu
 	{
 		if (this.Input != null)
 		{
-			string text = NGUITools.StripSymbols(this.Input.text);
-			string text2 = text.Trim();
-			if (!string.IsNullOrEmpty(text2) && text2 != Localization.instance.Get("MENU_PLAYER"))
+			if (ASE_Tools.Available)
 			{
-				Singleton<GameSaveManager>.Instance.SetPseudo(text2, true);
+				ASE_Flurry.LogEvent("1J_TON_NOM");
+			}
+			string text = NGUITools.StripSymbols(this.Input.text).Trim();
+			if (!string.IsNullOrEmpty(text) && text != Localization.instance.Get("MENU_PLAYER"))
+			{
+				Singleton<GameSaveManager>.Instance.SetPseudo(text, true);
 			}
 			else if (this.Input.text.Equals(string.Empty))
 			{
@@ -68,7 +82,29 @@ public class MenuPlaySolo : AbstractMenu
 		}
 	}
 
+	public override void ActSwapMenu(EMenus NextMenu)
+	{
+		if (ASE_Tools.Available)
+		{
+			if (NextMenu == EMenus.MENU_WELCOME)
+			{
+				ASE_Flurry.LogEvent("1J_RETOUR_MENU_PRINCIPAL");
+			}
+			else if (NextMenu == EMenus.MENU_MULTI)
+			{
+				ASE_Flurry.LogEvent("MJ_SELECTION_ONGLET_MULTI");
+			}
+		}
+		base.ActSwapMenu(NextMenu);
+	}
+
 	public UIInput Input;
 
 	private bool isEntered;
+
+	public GameObject MultiButton;
+
+	public GameObject MultiBackgroundButton;
+
+	public GameObject MultiTextTitle;
 }
diff --git a/Assembly-CSharp/MenuSelectKart.cs b/Assembly-CSharp/MenuSelectKart.cs
index 3a3ef4e..51b8b6d 100644
--- a/Assembly-CSharp/MenuSelectKart.cs
+++ b/Assembly-CSharp/MenuSelectKart.cs
@@ -20,23 +20,19 @@ public class MenuSelectKart : AbstractMenu
 	{
 		base.Awake();
 		this.m_oNetworkMgr = (NetworkMgr)UnityEngine.Object.FindObjectOfType(typeof(NetworkMgr));
-		UnityEngine.Object[] array = Resources.LoadAll("Character", typeof(CharacterCarac));
-		foreach (UnityEngine.Object @object in array)
+		foreach (UnityEngine.Object @object in Resources.LoadAll("Character", typeof(CharacterCarac)))
 		{
 			this.m_oCharacterList.Add((CharacterCarac)@object);
 		}
-		UnityEngine.Object[] array3 = Resources.LoadAll("Hat", typeof(BonusCustom));
-		foreach (UnityEngine.Object object2 in array3)
+		foreach (UnityEngine.Object object2 in Resources.LoadAll("Hat", typeof(BonusCustom)))
 		{
 			this.m_oHatList.Add((BonusCustom)object2);
 		}
-		UnityEngine.Object[] array5 = Resources.LoadAll("Kart", typeof(KartCarac));
-		foreach (UnityEngine.Object object3 in array5)
+		foreach (UnityEngine.Object object3 in Resources.LoadAll("Kart", typeof(KartCarac)))
 		{
 			this.m_oKartList.Add((KartCarac)object3);
 		}
-		UnityEngine.Object[] array7 = Resources.LoadAll("Kart", typeof(KartCustom));
-		foreach (UnityEngine.Object object4 in array7)
+		foreach (UnityEngine.Object object4 in Resources.LoadAll("Kart", typeof(KartCustom)))
 		{
 			if (object4.name.Contains("_Def"))
 			{
@@ -47,13 +43,11 @@ public class MenuSelectKart : AbstractMenu
 				this.m_oKartCustomList.Add((KartCustom)object4);
 			}
 		}
-		UnityEngine.Object[] array9 = Resources.LoadAll("InApp", typeof(InAppCarac));
-		foreach (UnityEngine.Object object5 in array9)
+		foreach (UnityEngine.Object object5 in Resources.LoadAll("InApp", typeof(InAppCarac)))
 		{
 			this.m_oCoinsCaracList.Add((InAppCarac)object5);
 		}
-		UnityEngine.Object[] array11 = Resources.LoadAll("Advantages", typeof(AdvantageData));
-		foreach (UnityEngine.Object object6 in array11)
+		foreach (UnityEngine.Object object6 in Resources.LoadAll("Advantages", typeof(AdvantageData)))
 		{
 			this.m_oAdvantagesList.Add((AdvantageData)object6);
 		}
@@ -76,8 +70,8 @@ public class MenuSelectKart : AbstractMenu
 		}
 		else
 		{
-			E_UnlockableItemSate e_UnlockableItemSate = Singleton<GameSaveManager>.Instance.GetCharacterState(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter);
-			if (e_UnlockableItemSate == E_UnlockableItemSate.NewUnlocked || e_UnlockableItemSate == E_UnlockableItemSate.Unlocked)
+			E_UnlockableItemSate characterState = Singleton<GameSaveManager>.Instance.GetCharacterState(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter);
+			if (characterState == E_UnlockableItemSate.NewUnlocked || characterState == E_UnlockableItemSate.Unlocked)
 			{
 				this.m_eLastValidCharacter = Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter;
 			}
@@ -92,8 +86,8 @@ public class MenuSelectKart : AbstractMenu
 		}
 		else
 		{
-			E_UnlockableItemSate e_UnlockableItemSate = Singleton<GameSaveManager>.Instance.GetKartState(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart);
-			if (e_UnlockableItemSate == E_UnlockableItemSate.NewUnlocked || e_UnlockableItemSate == E_UnlockableItemSate.Unlocked)
+			E_UnlockableItemSate kartState = Singleton<GameSaveManager>.Instance.GetKartState(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart);
+			if (kartState == E_UnlockableItemSate.NewUnlocked || kartState == E_UnlockableItemSate.Unlocked)
 			{
 				this.m_eLastValidKart = Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart;
 			}
@@ -104,14 +98,14 @@ public class MenuSelectKart : AbstractMenu
 		}
 		if (text2 == "None")
 		{
-			text2 = Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter.ToString()[0] + "_DefaultHat";
+			text2 = Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter.ToString()[0].ToString() + "_DefaultHat";
 		}
 		else
 		{
-			E_UnlockableItemSate e_UnlockableItemSate = Singleton<GameSaveManager>.Instance.GetHatState(text2);
-			if (e_UnlockableItemSate != E_UnlockableItemSate.NewUnlocked && e_UnlockableItemSate != E_UnlockableItemSate.Unlocked)
+			E_UnlockableItemSate hatState = Singleton<GameSaveManager>.Instance.GetHatState(text2);
+			if (hatState != E_UnlockableItemSate.NewUnlocked && hatState != E_UnlockableItemSate.Unlocked)
 			{
-				text2 = Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter.ToString()[0] + "_DefaultHat";
+				text2 = Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter.ToString()[0].ToString() + "_DefaultHat";
 			}
 		}
 		foreach (BonusCustom bonusCustom in this.m_oHatList)
@@ -124,14 +118,14 @@ public class MenuSelectKart : AbstractMenu
 		}
 		if (text == "None")
 		{
-			text = "K" + Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart.ToString()[0] + "C_Default";
+			text = "K" + Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart.ToString()[0].ToString() + "C_Default";
 		}
 		else
 		{
-			E_UnlockableItemSate e_UnlockableItemSate = Singleton<GameSaveManager>.Instance.GetCustomState(text);
-			if (e_UnlockableItemSate != E_UnlockableItemSate.NewUnlocked && e_UnlockableItemSate != E_UnlockableItemSate.Unlocked)
+			E_UnlockableItemSate customState = Singleton<GameSaveManager>.Instance.GetCustomState(text);
+			if (customState != E_UnlockableItemSate.NewUnlocked && customState != E_UnlockableItemSate.Unlocked)
 			{
-				text = "K" + Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart.ToString()[0] + "C_Default";
+				text = "K" + Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart.ToString()[0].ToString() + "C_Default";
 			}
 		}
 		foreach (KartCustom kartCustom in this.m_oKartCustomList)
@@ -149,7 +143,7 @@ public class MenuSelectKart : AbstractMenu
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		InAppManager instance = Singleton<InAppManager>.Instance;
 		instance.OnPurchaseSucceed = (AInAppService.PurchaseDelegate)Delegate.Remove(instance.OnPurchaseSucceed, new AInAppService.PurchaseDelegate(this.PurchaseSucceed));
@@ -289,8 +283,7 @@ public class MenuSelectKart : AbstractMenu
 		this.m_bBackToPreviousState = (iEntryPoint != 0);
 		if (this.m_oPanelAdvantages)
 		{
-			PanelAdvantages component = this.m_oPanelAdvantages.GetComponent<PanelAdvantages>();
-			component.Initialize();
+			this.m_oPanelAdvantages.GetComponent<PanelAdvantages>().Initialize();
 		}
 		if (Network.peerType == NetworkPeerType.Disconnected || this.m_oTimerLabel == null)
 		{
@@ -362,7 +355,7 @@ public class MenuSelectKart : AbstractMenu
 		base.OnExit();
 	}
 
-	private void LateUpdate()
+	public void LateUpdate()
 	{
 		if (this.m_bNeedSelectTabAtUpdate)
 		{
@@ -413,19 +406,25 @@ public class MenuSelectKart : AbstractMenu
 		{
 			Dictionary<NetworkPlayer, bool> readyToGo = this.m_oNetworkMgr.ReadyToGo;
 			int num = 0;
-			foreach (KeyValuePair<NetworkPlayer, bool> keyValuePair in readyToGo)
+			using (Dictionary<NetworkPlayer, bool>.Enumerator enumerator = readyToGo.GetEnumerator())
 			{
-				if (keyValuePair.Value)
+				while (enumerator.MoveNext())
 				{
-					this.ClientState[num].ChangeTexture(this.m_oNetworkMgr.SelectedColors.IndexOf(this.m_oNetworkMgr.PlayersColor[keyValuePair.Key]));
+					KeyValuePair<NetworkPlayer, bool> keyValuePair = enumerator.Current;
+					if (keyValuePair.Value)
+					{
+						this.ClientState[num].ChangeTexture(this.m_oNetworkMgr.SelectedColors.IndexOf(this.m_oNetworkMgr.PlayersColor[keyValuePair.Key]));
+					}
+					num++;
 				}
-				num++;
+				goto IL_101;
 			}
 		}
-		else if (this.goNet && this.wasServer)
+		if (this.goNet && this.wasServer)
 		{
 			this.Go(null);
 		}
+		IL_101:
 		if (!this.m_bTrackInfoLoadingDone && this.m_oNetworkMgr.TrackChoiceReceived && Singleton<GameConfigurator>.Instance.ChampionShipData != null)
 		{
 			this.UpdateTrackInfo();
@@ -443,21 +442,20 @@ public class MenuSelectKart : AbstractMenu
 			{
 				component.ValidSlots();
 			}
-			if (Singleton<GameConfigurator>.Instance.PlayerConfig.GetAdvantages().Count == 0 && Singleton<GameConfigurator>.Instance.GameModeType != E_GameModeType.TIME_TRIAL && !Singleton<ChallengeManager>.Instance.IsActive)
+			if (Singleton<GameConfigurator>.Instance.PlayerConfig.GetAdvantages().Count != 0 || Network.isClient || Network.isServer || Singleton<GameConfigurator>.Instance.GameModeType == E_GameModeType.TIME_TRIAL || Singleton<ChallengeManager>.Instance.IsActive)
 			{
-				this.OnSelectTab(4);
-				this.m_oButtonAdvantages.GetComponent<UICheckbox>().isChecked = true;
-				Popup2Choices popup2Choices = (Popup2Choices)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG_2CHOICES, false);
-				if (popup2Choices)
-				{
-					Popup2Choices popup2Choices2 = popup2Choices;
-					Popup2Choices.Callback oCbRight = new Popup2Choices.Callback(this.Go);
-					popup2Choices2.Show("MENU_POPUP_NO_ADVANTAGE", null, oCbRight, null, "MENU_POPUP_NO", "MENU_POPUP_YES");
-				}
+				this.Go(null);
+				return;
 			}
-			else
+			this.OnSelectTab(4);
+			this.m_oButtonAdvantages.GetComponent<UICheckbox>().isChecked = true;
+			Popup2Choices popup2Choices = (Popup2Choices)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG_2CHOICES, false);
+			if (popup2Choices)
 			{
-				this.Go(null);
+				Popup2Choices popup2Choices2 = popup2Choices;
+				Popup2Choices.Callback oCbRight = new Popup2Choices.Callback(this.Go);
+				popup2Choices2.Show("MENU_POPUP_NO_ADVANTAGE", null, oCbRight, null, "MENU_POPUP_NO", "MENU_POPUP_YES");
+				return;
 			}
 		}
 		else
@@ -553,9 +551,7 @@ public class MenuSelectKart : AbstractMenu
 	{
 		this.RevertToLastValidState();
 		Singleton<GameSaveManager>.Instance.SetPlayerConfig(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter, Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oKartCustom.name, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oHat.name, true);
-		if (LogManager.Instance != null)
-		{
-		}
+		LogManager instance = LogManager.Instance;
 		if (this.m_bBackToPreviousState)
 		{
 			this.m_pMenuEntryPoint.SetPreviousState();
@@ -567,13 +563,11 @@ public class MenuSelectKart : AbstractMenu
 		}
 		if (Network.isClient || Network.isServer)
 		{
-			base.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
+			this.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
 			Network.Disconnect();
+			return;
 		}
-		else
-		{
-			base.ActSwapMenu(EMenus.MENU_SELECT_TRACK);
-		}
+		this.ActSwapMenu(EMenus.MENU_SELECT_TRACK);
 	}
 
 	public void Go(object oParam = null)
@@ -581,19 +575,20 @@ public class MenuSelectKart : AbstractMenu
 		Singleton<GameSaveManager>.Instance.SetPlayerConfig(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter, Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oKartCustom.name, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oHat.name, true);
 		if (LogManager.Instance != null)
 		{
-			PlayerConfig playerConfig = Singleton<GameConfigurator>.Instance.PlayerConfig;
-			foreach (EAdvantage eadvantage in playerConfig.GetAdvantages())
+			foreach (EAdvantage eadvantage in Singleton<GameConfigurator>.Instance.PlayerConfig.GetAdvantages())
 			{
 			}
-			if ((Application.platform != RuntimePlatform.Android && Application.platform != RuntimePlatform.IPhonePlayer) || Singleton<GameOptionManager>.Instance.GetInputType() == E_InputType.Gyroscopic)
+			if (Application.platform == RuntimePlatform.Android || Application.platform == RuntimePlatform.IPhonePlayer)
 			{
+				Singleton<GameOptionManager>.Instance.GetInputType();
 			}
 		}
 		if (Network.peerType == NetworkPeerType.Disconnected)
 		{
 			LoadingManager.LoadLevel(Singleton<GameConfigurator>.Instance.StartScene);
+			return;
 		}
-		else if (!this.goNet)
+		if (!this.goNet)
 		{
 			this.goNet = true;
 			this.m_oButtonNext.SetActive(false);
@@ -627,6 +622,12 @@ public class MenuSelectKart : AbstractMenu
 		{
 			return;
 		}
+		if (iTab == 4 && (Network.isClient || Network.isServer))
+		{
+			this.OnSelectTab(0);
+			this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG, false).ShowText("Boosts are disabled in multiplayer.");
+			return;
+		}
 		bool active = true;
 		this.m_iCurrentTab = iTab;
 		this.RemoveAllItems();
@@ -820,6 +821,10 @@ public class MenuSelectKart : AbstractMenu
 
 	public bool IsAdvantageAvailable(EAdvantage eAdvantage)
 	{
+		if (Network.isClient || Network.isServer)
+		{
+			return false;
+		}
 		foreach (AdvantageData advantageData in this.m_oAdvantagesList)
 		{
 			if (advantageData.AdvantageType == eAdvantage)
@@ -832,6 +837,10 @@ public class MenuSelectKart : AbstractMenu
 
 	private bool IsAdvantageAvailable(AdvantageData oAdvantage)
 	{
+		if (Network.isClient || Network.isServer)
+		{
+			return false;
+		}
 		switch (this.m_eAdvantageRestrictions)
 		{
 		case MenuSelectKart.EAdvantageRestrictions.SINGLE_RESTRICTION:
@@ -848,7 +857,7 @@ public class MenuSelectKart : AbstractMenu
 
 	public void InitAdvantages()
 	{
-		if (!this.m_oPanelAdvantages)
+		if (!this.m_oPanelAdvantages || Network.isClient || Network.isServer)
 		{
 			return;
 		}
@@ -1073,11 +1082,9 @@ public class MenuSelectKart : AbstractMenu
 		if (this.m_iCurrentTab == 5)
 		{
 			this.UpdateInAppPanel((IconCarac)oData);
+			return;
 		}
-		else
-		{
-			this.UpdateTextPanel((IconCarac)oData, e_UnlockableItemSate);
-		}
+		this.UpdateTextPanel((IconCarac)oData, e_UnlockableItemSate);
 	}
 
 	private void UpdatePanel(Transform oBtn)
@@ -1180,8 +1187,7 @@ public class MenuSelectKart : AbstractMenu
 		{
 			return;
 		}
-		KartPreviewBuilder component = this.m_oKartPreview.GetComponent<KartPreviewBuilder>();
-		component.Build(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter, Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oKartCustom.name, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oHat.name);
+		this.m_oKartPreview.GetComponent<KartPreviewBuilder>().Build(Singleton<GameConfigurator>.Instance.PlayerConfig.m_eCharacter, Singleton<GameConfigurator>.Instance.PlayerConfig.m_eKart, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oKartCustom.name, Singleton<GameConfigurator>.Instance.PlayerConfig.m_oHat.name);
 	}
 
 	public void OnPurchase()
@@ -1281,7 +1287,7 @@ public class MenuSelectKart : AbstractMenu
 			if (btnItem.IsDataEqual(oItemData))
 			{
 				btnItem.RefreshState(eState);
-				break;
+				return;
 			}
 		}
 	}
@@ -1321,7 +1327,7 @@ public class MenuSelectKart : AbstractMenu
 		if (Network.isClient)
 		{
 			this.RevertToLastValidState();
-			base.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
+			this.ActSwapMenu(EMenus.MENU_MULTI_JOIN);
 		}
 	}
 
diff --git a/Assembly-CSharp/MenuSelectTrack.cs b/Assembly-CSharp/MenuSelectTrack.cs
index f63979a..8246b49 100644
--- a/Assembly-CSharp/MenuSelectTrack.cs
+++ b/Assembly-CSharp/MenuSelectTrack.cs
@@ -48,7 +48,7 @@ public class MenuSelectTrack : AbstractMenu
 		Resources.UnloadAsset(this.TrackScreenshot.mainTexture);
 	}
 
-	private void LateUpdate()
+	public void LateUpdate()
 	{
 		if (!this.m_bLateInitialized)
 		{
@@ -64,7 +64,7 @@ public class MenuSelectTrack : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
+			this.ActSwapMenu(EMenus.MENU_CHAMPIONSHIP);
 		}
 	}
 
@@ -113,6 +113,23 @@ public class MenuSelectTrack : AbstractMenu
 		}
 	}
 
+	public override void ActSwapMenu(EMenus NextMenu)
+	{
+		if (ASE_Tools.Available && NextMenu == EMenus.MENU_SELECT_KART)
+		{
+			ASE_Flurry.LogEvent("1J_SELECTION", new string[]
+			{
+				"DIFFICULTY",
+				"CUP"
+			}, new string[]
+			{
+				Singleton<GameConfigurator>.Instance.Difficulty.ToString(),
+				Singleton<GameConfigurator>.Instance.ChampionShipData.ChampionShipName
+			});
+		}
+		base.ActSwapMenu(NextMenu);
+	}
+
 	private int m_iCurrentTrack;
 
 	public UILabel TrackName;
diff --git a/Assembly-CSharp/MenuTutorial.cs b/Assembly-CSharp/MenuTutorial.cs
index db74a08..a5e3b24 100644
--- a/Assembly-CSharp/MenuTutorial.cs
+++ b/Assembly-CSharp/MenuTutorial.cs
@@ -123,7 +123,7 @@ public class MenuTutorial : AbstractMenu
 	{
 		if (Application.platform == RuntimePlatform.Android && Input.GetKeyDown(KeyCode.Escape))
 		{
-			base.ActSwapMenu(EMenus.MENU_TUTO_HUB);
+			this.ActSwapMenu(EMenus.MENU_TUTO_HUB);
 		}
 	}
 
diff --git a/Assembly-CSharp/MenuWelcome.cs b/Assembly-CSharp/MenuWelcome.cs
index 2dab0df..41c3a3f 100644
--- a/Assembly-CSharp/MenuWelcome.cs
+++ b/Assembly-CSharp/MenuWelcome.cs
@@ -37,12 +37,14 @@ public class MenuWelcome : AbstractMenu
 		if (component.DisplayHighlightTutorial)
 		{
 			this.HighlightTutorial(null);
+			return;
 		}
-		else if (component.AskForRating)
+		if (component.AskForRating)
 		{
 			this.OnAskForRating();
+			return;
 		}
-		else if (component.ShowInterstitial)
+		if (component.ShowInterstitial)
 		{
 			this.ShowInterstitial();
 		}
@@ -121,6 +123,10 @@ public class MenuWelcome : AbstractMenu
 
 	public void OnShop()
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("MP_DEMARRER_MAGASIN");
+		}
 		this.m_pMenuEntryPoint.SetState(EMenus.MENU_SELECT_KART, 1);
 	}
 
@@ -143,33 +149,43 @@ public class MenuWelcome : AbstractMenu
 
 	public void OnPlay(object param = null)
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("MP_DEMARRER_MODE_PRINCIPAL");
+		}
 		if (Singleton<GameSaveManager>.Instance.GetFirstTime())
 		{
 			Popup2Choices popup2Choices = (Popup2Choices)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG_2CHOICES, false);
 			if (popup2Choices)
 			{
 				popup2Choices.Show("MENU_POPUP_FIRSTTIME", new Popup2Choices.Callback(this.HighlightTutorial), new Popup2Choices.Callback(this.LaunchIGTutorial), EMenus.MENU_SOLO, "MENU_POPUP_NO", "MENU_POPUP_YES");
+				return;
 			}
 		}
 		else
 		{
-			base.ActSwapMenu(EMenus.MENU_SOLO);
+			this.ActSwapMenu(EMenus.MENU_SOLO);
 		}
 	}
 
 	public void OnChallenge(object param = null)
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("MP_DEMARRER_CHALLENGE_DU_JOUR");
+		}
 		if (Singleton<GameSaveManager>.Instance.GetFirstTime())
 		{
 			Popup2Choices popup2Choices = (Popup2Choices)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_DIALOG_2CHOICES, false);
 			if (popup2Choices)
 			{
 				popup2Choices.Show("MENU_POPUP_FIRSTTIME", new Popup2Choices.Callback(this.HighlightTutorial), new Popup2Choices.Callback(this.LaunchIGTutorial), EMenus.MENU_CHALLENGE, "MENU_POPUP_NO", "MENU_POPUP_YES");
+				return;
 			}
 		}
 		else
 		{
-			base.ActSwapMenu(EMenus.MENU_CHALLENGE);
+			this.ActSwapMenu(EMenus.MENU_CHALLENGE);
 		}
 	}
 
@@ -179,7 +195,7 @@ public class MenuWelcome : AbstractMenu
 		{
 			if (param != null)
 			{
-				base.ActSwapMenu((EMenus)((int)param));
+				this.ActSwapMenu((EMenus)((int)param));
 			}
 			return;
 		}
@@ -188,11 +204,9 @@ public class MenuWelcome : AbstractMenu
 		if (param != null)
 		{
 			this.m_eOnHighlightTutorialExit = (EMenus)((int)param);
+			return;
 		}
-		else
-		{
-			this.m_eOnHighlightTutorialExit = EMenus.MENU_WELCOME;
-		}
+		this.m_eOnHighlightTutorialExit = EMenus.MENU_WELCOME;
 	}
 
 	public void OnHighlightTutorialExit()
@@ -223,8 +237,7 @@ public class MenuWelcome : AbstractMenu
 		{
 			popup3Choices.Show("MENU_POPUP_RATING", new Popup3Choices.Callback(this.OnNeverRate), new Popup3Choices.Callback(this.OnRate), new Popup3Choices.Callback(this.OnRemindRatingLater), null, "MENU_POPUP_NEVER_RATE", "MENU_POPUP_RATE_LATER", "MENU_POPUP_RATE");
 		}
-		EntryPoint component = GameObject.Find("EntryPoint").GetComponent<EntryPoint>();
-		component.AskForRating = false;
+		GameObject.Find("EntryPoint").GetComponent<EntryPoint>().AskForRating = false;
 	}
 
 	public void OnNeverRate(object param)
@@ -243,13 +256,16 @@ public class MenuWelcome : AbstractMenu
 
 	public void OnAskForSharing()
 	{
+		if (ASE_Tools.Available)
+		{
+			ASE_Flurry.LogEvent("MP_PARTAGE_FACEBOOK");
+		}
 		Popup2Choices popup2Choices = (Popup2Choices)this.m_pMenuEntryPoint.ShowPopup(EPopUps.POPUP_FACEBOOK, false);
 		if (popup2Choices)
 		{
 			popup2Choices.Show(null, new Popup2Choices.Callback(this.NoShare), new Popup2Choices.Callback(this.YesShare), null, null, null);
 		}
-		EntryPoint component = GameObject.Find("EntryPoint").GetComponent<EntryPoint>();
-		component.AskForSharing = false;
+		GameObject.Find("EntryPoint").GetComponent<EntryPoint>().AskForSharing = false;
 	}
 
 	public void NoShare(object param)
@@ -258,8 +274,7 @@ public class MenuWelcome : AbstractMenu
 
 	public void YesShare(object param)
 	{
-		EntryPoint component = GameObject.Find("EntryPoint").GetComponent<EntryPoint>();
-		component.DoSharing();
+		GameObject.Find("EntryPoint").GetComponent<EntryPoint>().DoSharing();
 	}
 
 	public void ShowInterstitial()
@@ -274,11 +289,35 @@ public class MenuWelcome : AbstractMenu
 	{
 		if (ASE_Tools.Available)
 		{
-			ASE_Facebook.Logout();
+			ASE_Flurry.LogEvent("MP_DEMARRER_MORE_APPS");
 			ASE_ChartBoost.ShowMoreApps();
 		}
 	}
 
+	public override void ActSwapMenu(EMenus NextMenu)
+	{
+		if (ASE_Tools.Available)
+		{
+			if (NextMenu == EMenus.MENU_CREDITS)
+			{
+				ASE_Flurry.LogEvent("MP_DEMARRER_CREDITS");
+			}
+			else if (NextMenu == EMenus.MENU_OPTIONS)
+			{
+				ASE_Flurry.LogEvent("MP_DEMARRER_REGLAGES");
+			}
+			else if (NextMenu == EMenus.MENU_BEST_OF_GARFIELD)
+			{
+				ASE_Flurry.LogEvent("MP_DEMARRER_PUZZLE");
+			}
+			else if (NextMenu == EMenus.MENU_TUTO_HUB)
+			{
+				ASE_Flurry.LogEvent("MP_DEMARRER_TUTO");
+			}
+		}
+		base.ActSwapMenu(NextMenu);
+	}
+
 	private List<InAppCarac> pCoinsCarac = new List<InAppCarac>();
 
 	public UISprite ChallengeType;
diff --git a/Assembly-CSharp/ModGUIHelper.cs b/Assembly-CSharp/ModGUIHelper.cs
new file mode 100644
index 0000000..a274e57
--- /dev/null
+++ b/Assembly-CSharp/ModGUIHelper.cs
@@ -0,0 +1,116 @@
+ï»¿using System;
+using System.IO;
+using UnityEngine;
+
+internal class ModGUIHelper
+{
+	static ModGUIHelper()
+	{
+		ModGUIHelper.tickerArrowTextures = new Tuple<Texture2D, Texture2D>(ModGUIHelper.getTexture("arrow_left.png", 77, 78), ModGUIHelper.getTexture("arrow_right.png", 77, 78));
+		ModGUIHelper.tickerGUIStyle = new GUIStyle(GUI.skin.button);
+		ModGUIHelper.tickerGUIStyle.fontSize = 24;
+		ModGUIHelper.tickerGUIStyle.alignment = TextAnchor.MiddleCenter;
+		Texture2D texture = ModGUIHelper.getTexture("ticker_texture.png", (int)ModGUIHelper.tickerSize.x, (int)ModGUIHelper.tickerSize.y);
+		ModGUIHelper.tickerGUIStyle.normal.background = texture;
+		ModGUIHelper.tickerGUIStyle.hover.background = texture;
+		ModGUIHelper.tickerGUIStyle.active.background = texture;
+		ModGUIHelper.buttonGUIStyle = new GUIStyle(GUI.skin.button);
+		ModGUIHelper.buttonGUIStyle.fontSize = ((Screen.width < 1000) ? 20 : 28);
+		ModGUIHelper.buttonGUIStyle.alignment = TextAnchor.MiddleCenter;
+		ModGUIHelper.buttonGUIStyle.normal.background = ModGUIHelper.getTexture("button_texture.png", 12, 12);
+		ModGUIHelper.buttonGUIStyle.hover.background = ModGUIHelper.getTexture("button_hover_texture.png", 12, 12);
+		ModGUIHelper.buttonGUIStyle.active.background = ModGUIHelper.getTexture("button_active_texture.png", 12, 12);
+	}
+
+	public static bool CenteredButton(Vector3 center, Vector2 size, string text, string tooltip)
+	{
+		GUIContent guicontent = new GUIContent();
+		guicontent.text = text;
+		guicontent.tooltip = tooltip;
+		size /= 2f;
+		return GUI.Button(new Rect(center.x - size.x, center.y - size.y, size.x * 2f, size.y * 2f), guicontent, ModGUIHelper.buttonGUIStyle);
+	}
+
+	public static bool CenteredTickerButton(Vector3 center, ModGUIHelper.TickerDirection direction)
+	{
+		GUIContent guicontent = new GUIContent();
+		guicontent.image = ((direction == ModGUIHelper.TickerDirection.LEFT) ? ModGUIHelper.tickerArrowTextures.Item1 : ModGUIHelper.tickerArrowTextures.Item2);
+		Vector2 vector = new Vector2(ModGUIHelper.tickerSize.x, ModGUIHelper.tickerSize.y) / 2f;
+		return GUI.Button(new Rect(center.x - vector.x, center.y - vector.y, vector.x * 2f, vector.y * 2f), guicontent, ModGUIHelper.tickerGUIStyle);
+	}
+
+	private static Texture2D getTexture(string fileName, int width, int height)
+	{
+		Texture2D texture2D = new Texture2D(width, height, TextureFormat.ARGB32, false);
+		WWW www = new WWW(ModGUIHelper.baseResourcesURL + fileName);
+		www.LoadImageIntoTexture(texture2D);
+		while (!www.isDone)
+		{
+		}
+		return texture2D;
+	}
+
+	public static void CenteredLabel(Vector3 center, Vector2 size, string text)
+	{
+		ModGUIHelper.CenteredLabel(center, size, text, GUI.skin.label.fontSize);
+	}
+
+	public static string CenteredTextField(Vector3 center, Vector2 size, string defaultText, FontStyle textStyle = FontStyle.Normal, int fontSize = 32)
+	{
+		GUIStyle guistyle = new GUIStyle(GUI.skin.textField);
+		guistyle.alignment = TextAnchor.MiddleCenter;
+		guistyle.fontSize = fontSize;
+		guistyle.fontStyle = textStyle;
+		size /= 2f;
+		return GUI.TextField(new Rect(center.x - size.x, center.y - size.y, size.x * 2f, size.y * 2f), defaultText, guistyle);
+	}
+
+	public static bool RectButton(Rect rect, string text, string tooltip = "")
+	{
+		return GUI.Button(rect, new GUIContent
+		{
+			text = text,
+			tooltip = tooltip
+		}, ModGUIHelper.buttonGUIStyle);
+	}
+
+	public static bool CenteredButton(Vector3 center, Vector2 size, string text, string tooltip, bool isActive)
+	{
+		GUIContent guicontent = new GUIContent();
+		guicontent.text = text;
+		guicontent.tooltip = tooltip;
+		size /= 2f;
+		GUIStyle guistyle = ModGUIHelper.buttonGUIStyle;
+		if (isActive)
+		{
+			guistyle = new GUIStyle(ModGUIHelper.buttonGUIStyle);
+			guistyle.normal = guistyle.active;
+			guistyle.hover = guistyle.active;
+		}
+		return GUI.Button(new Rect(center.x - size.x, center.y - size.y, size.x * 2f, size.y * 2f), guicontent, guistyle);
+	}
+
+	public static void CenteredLabel(Vector3 center, Vector2 size, string text, int fontSize)
+	{
+		GUIStyle guistyle = new GUIStyle(GUI.skin.label);
+		guistyle.alignment = TextAnchor.UpperCenter;
+		guistyle.fontSize = fontSize;
+		GUI.Label(new Rect(center.x - size.x, center.y - size.y, size.x * 2f, size.y * 2f), text, guistyle);
+	}
+
+	private static GUIStyle buttonGUIStyle;
+
+	private static string baseResourcesURL = "file://" + new DirectoryInfo(Application.dataPath + "/Resources/").FullName;
+
+	private static GUIStyle tickerGUIStyle;
+
+	private static Tuple<Texture2D, Texture2D> tickerArrowTextures;
+
+	private static Vector2 tickerSize = new Vector2(96f, 99f);
+
+	public enum TickerDirection
+	{
+		LEFT,
+		RIGHT
+	}
+}
diff --git a/Assembly-CSharp/MoodBox.cs b/Assembly-CSharp/MoodBox.cs
index 77ee470..5482d0d 100644
--- a/Assembly-CSharp/MoodBox.cs
+++ b/Assembly-CSharp/MoodBox.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class MoodBox : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.manager = base.transform.parent.GetComponent<MoodBoxManager>();
 		if (!this.manager)
@@ -12,7 +12,7 @@ public class MoodBox : MonoBehaviour
 		}
 	}
 
-	private void OnDrawGizmos()
+	public void OnDrawGizmos()
 	{
 		if (base.transform.parent)
 		{
@@ -21,7 +21,7 @@ public class MoodBox : MonoBehaviour
 		}
 	}
 
-	private void OnDrawGizmosSelected()
+	public void OnDrawGizmosSelected()
 	{
 		if (base.transform.parent)
 		{
@@ -30,7 +30,7 @@ public class MoodBox : MonoBehaviour
 		}
 	}
 
-	private void OnTriggerEnter(Collider other)
+	public void OnTriggerEnter(Collider other)
 	{
 		if (other.tag == "Player")
 		{
@@ -40,7 +40,10 @@ public class MoodBox : MonoBehaviour
 
 	private void ApplyMoodBox()
 	{
-		MoodBoxManager.current = this;
+		if (this.manager)
+		{
+			this.manager.CurrentMoodBox = this;
+		}
 	}
 
 	public MoodBoxData data;
diff --git a/Assembly-CSharp/MoodBoxManager.cs b/Assembly-CSharp/MoodBoxManager.cs
index baddbfa..0d34475 100644
--- a/Assembly-CSharp/MoodBoxManager.cs
+++ b/Assembly-CSharp/MoodBoxManager.cs
@@ -3,21 +3,32 @@ using UnityEngine;
 
 public class MoodBoxManager : MonoBehaviour
 {
-	private void Start()
+	public MoodBox CurrentMoodBox
 	{
-		MoodBoxManager.current = this.startMoodBox;
-		this.UpdateFromMoodBox();
-		if (this.CurrentCamera)
+		get
 		{
-			this.CurrentBloom = this.CurrentCamera.GetComponent<Bloom>();
-			this.CurrentBloom.bloomIntensity = this.IntensityBloom;
-			this.CurrentBloom.bloomThreshhold = this.IntensityThreshlod;
+			return this.currentMoodBox;
+		}
+		set
+		{
+			this.currentMoodBox = value;
+			this.UpdateFromMoodBox();
 		}
 	}
 
-	private void Update()
+	public void Start()
 	{
+		this.CurrentMoodBox = this.startMoodBox;
 		this.UpdateFromMoodBox();
+		if (this.CurrentCamera)
+		{
+			this.CurrentBloom = this.CurrentCamera.GetComponent<Bloom>();
+			if (this.CurrentBloom)
+			{
+				this.CurrentBloom.bloomIntensity = this.IntensityBloom;
+				this.CurrentBloom.bloomThreshhold = this.IntensityThreshlod;
+			}
+		}
 	}
 
 	public MoodBoxData GetData()
@@ -27,23 +38,22 @@ public class MoodBoxManager : MonoBehaviour
 
 	private void UpdateFromMoodBox()
 	{
-		this.currentMoodBox = MoodBoxManager.current;
-		if (MoodBoxManager.current)
+		if (this.CurrentMoodBox)
 		{
 			if (!Application.isPlaying)
 			{
-				this.currentData.FogStart = MoodBoxManager.current.data.FogStart;
-				this.currentData.FogEnd = MoodBoxManager.current.data.FogEnd;
-				this.currentData.FogColor = MoodBoxManager.current.data.FogColor;
-				this.currentData.outside = MoodBoxManager.current.data.outside;
+				this.currentData.FogStart = this.CurrentMoodBox.data.FogStart;
+				this.currentData.FogEnd = this.CurrentMoodBox.data.FogEnd;
+				this.currentData.FogColor = this.CurrentMoodBox.data.FogColor;
+				this.currentData.outside = this.CurrentMoodBox.data.outside;
 			}
 			else
 			{
 				float deltaTime = Time.deltaTime;
-				this.currentData.FogStart = Mathf.Lerp(this.currentData.FogStart, MoodBoxManager.current.data.FogStart, deltaTime);
-				this.currentData.FogEnd = Mathf.Lerp(this.currentData.FogEnd, MoodBoxManager.current.data.FogEnd, deltaTime);
-				this.currentData.FogColor = Color.Lerp(this.currentData.FogColor, MoodBoxManager.current.data.FogColor, deltaTime);
-				this.currentData.outside = MoodBoxManager.current.data.outside;
+				this.currentData.FogStart = Mathf.Lerp(this.currentData.FogStart, this.CurrentMoodBox.data.FogStart, deltaTime);
+				this.currentData.FogEnd = Mathf.Lerp(this.currentData.FogEnd, this.CurrentMoodBox.data.FogEnd, deltaTime);
+				this.currentData.FogColor = Color.Lerp(this.currentData.FogColor, this.CurrentMoodBox.data.FogColor, deltaTime);
+				this.currentData.outside = this.CurrentMoodBox.data.outside;
 			}
 		}
 		RenderSettings.fogColor = this.currentData.FogColor;
@@ -59,8 +69,6 @@ public class MoodBoxManager : MonoBehaviour
 
 	public float IntensityThreshlod;
 
-	public static MoodBox current;
-
 	public MoodBoxData currentData;
 
 	public MoodBox startMoodBox;
diff --git a/Assembly-CSharp/NamePlate.cs b/Assembly-CSharp/NamePlate.cs
index 15e9d26..b14ed4e 100644
--- a/Assembly-CSharp/NamePlate.cs
+++ b/Assembly-CSharp/NamePlate.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class NamePlate : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.m_oThisTransform = base.transform;
 		this.m_oMainCam = Camera.main;
@@ -22,7 +22,7 @@ public class NamePlate : MonoBehaviour
 		this.m_fSquaredDisplayDistance = this.m_fDisplayDistance * this.m_fDisplayDistance;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		float sqrMagnitude = (this.m_oCamTransform.position - this.m_oTargetTransform.position).sqrMagnitude;
 		if (sqrMagnitude < this.m_fSquaredDisplayDistance)
diff --git a/Assembly-CSharp/NapBonusEffect.cs b/Assembly-CSharp/NapBonusEffect.cs
index e31fd85..68c185e 100644
--- a/Assembly-CSharp/NapBonusEffect.cs
+++ b/Assembly-CSharp/NapBonusEffect.cs
@@ -21,7 +21,7 @@ public class NapBonusEffect : BonusEffect
 		base.Start();
 	}
 
-	protected override void OnDestroy()
+	public override void OnDestroy()
 	{
 		if (this._attackEffect != null)
 		{
@@ -89,16 +89,16 @@ public class NapBonusEffect : BonusEffect
 		target.KartSound.PlayVoice(KartSound.EVoices.Awake);
 	}
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	public float SlowDownFactor = 50f;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	public float DecelerationSpeed = 0.5f;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	public float InertiaFactor = 0.5f;
 
 	public GameObject AttackEffect;
diff --git a/Assembly-CSharp/NetworkMgr.cs b/Assembly-CSharp/NetworkMgr.cs
index a88a32d..3c01af3 100644
--- a/Assembly-CSharp/NetworkMgr.cs
+++ b/Assembly-CSharp/NetworkMgr.cs
@@ -1,12 +1,22 @@
 ï»¿using System;
 using System.Collections;
 using System.Collections.Generic;
+using System.Net;
+using System.Security.Cryptography;
+using System.Text;
 using UnityEngine;
 
 public class NetworkMgr : MonoBehaviour
 {
 	public NetworkMgr()
 	{
+		this.m_sPlayerName = "Player";
+		this.m_sGameName = string.Empty;
+		this.waitForNamesSynchro = true;
+		this.waitForColorsSynchro = true;
+		this.m_fTestingTimeout = 10f;
+		this.m_bTestAsked = true;
+		this.m_eConnectionTestResult = ConnectionTesterStatus.Undetermined;
 		this.m_SynchronizeIndex = 0;
 		this.m_SynchronizeCounter = 0;
 		this.m_WaitingSynchronization = false;
@@ -150,20 +160,19 @@ public class NetworkMgr : MonoBehaviour
 		if (this.m_bTestAsked && !this.m_bDoneTesting)
 		{
 			this.m_eConnectionTestResult = Network.TestConnection();
-			ConnectionTesterStatus eConnectionTestResult = this.m_eConnectionTestResult;
-			switch (eConnectionTestResult + 2)
+			switch (this.m_eConnectionTestResult + 2)
 			{
 			case ConnectionTesterStatus.PrivateIPNoNATPunchthrough:
 				this.m_bDoneTesting = true;
-				goto IL_152;
+				goto IL_133;
 			case ConnectionTesterStatus.PrivateIPHasNATPunchThrough:
 				this.m_bDoneTesting = false;
-				goto IL_152;
+				goto IL_133;
 			case ConnectionTesterStatus.PublicIPNoServerStarted:
 				this.m_bUseNat = false;
 				this.m_bDoneTesting = true;
 				this.m_bCanConnect = true;
-				goto IL_152;
+				goto IL_133;
 			case ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted:
 				this.m_bUseNat = false;
 				if (!this.m_bProbingPublicIP)
@@ -172,33 +181,35 @@ public class NetworkMgr : MonoBehaviour
 					this.m_bProbingPublicIP = true;
 					Debug.LogWarning("Testing if blocked public IP can be circumvented");
 					this.m_fTimerNAT = Time.time + 10f;
+					goto IL_133;
 				}
-				else if (Time.time > this.m_fTimerNAT)
+				if (Time.time > this.m_fTimerNAT)
 				{
 					this.m_bProbingPublicIP = false;
 					this.m_bUseNat = true;
 					this.m_bDoneTesting = true;
+					goto IL_133;
 				}
-				goto IL_152;
+				goto IL_133;
 			case ConnectionTesterStatus.LimitedNATPunchthroughSymmetric:
-				goto IL_152;
+				goto IL_133;
 			case ConnectionTesterStatus.NATpunchthroughFullCone:
 				this.m_bUseNat = true;
 				this.m_bDoneTesting = true;
-				goto IL_152;
+				goto IL_133;
 			case ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone:
 				this.m_bUseNat = true;
 				this.m_bDoneTesting = true;
-				goto IL_152;
+				goto IL_133;
 			case (ConnectionTesterStatus)9:
 			case (ConnectionTesterStatus)10:
 				this.m_bUseNat = true;
 				this.m_bDoneTesting = true;
 				this.m_bCanConnect = true;
-				goto IL_152;
+				goto IL_133;
 			}
 			this.m_bDoneTesting = true;
-			IL_152:
+			IL_133:
 			this.m_fTimer += Time.deltaTime;
 			if (this.m_fTimer > this.m_fTestingTimeout)
 			{
@@ -294,10 +305,6 @@ public class NetworkMgr : MonoBehaviour
 		this.m_SynchronizeIndex = 0;
 		this.m_SynchronizeCounter = 0;
 		this.m_WaitingSynchronization = false;
-		MasterServer.ipAddress = "94.23.51.63";
-		MasterServer.port = 23466;
-		Network.natFacilitatorIP = MasterServer.ipAddress;
-		Network.natFacilitatorPort = 50005;
 		UnityEngine.Object.DontDestroyOnLoad(this);
 		this.selectorColorsInit();
 	}
@@ -313,11 +320,34 @@ public class NetworkMgr : MonoBehaviour
 
 	public void Update()
 	{
+		while (this.DirectConnectID == "")
+		{
+			RandomNumberGenerator randomNumberGenerator = new RNGCryptoServiceProvider();
+			byte[] array = new byte[2];
+			randomNumberGenerator.GetBytes(array);
+			this.DirectConnectID = BitConverter.ToUInt16(array, 0).ToString();
+			using (SHA512 sha = new SHA512Managed())
+			{
+				HostData[] array2 = MasterServer.PollHostList();
+				for (int i = 0; i < array2.Length; i++)
+				{
+					string[] array3 = array2[i].comment.Split(new char[]
+					{
+						','
+					});
+					if (array3.Length >= 7 && array3[6] == this.ComputeConnectionChallenge(sha, this.DirectConnectID, array3[3]))
+					{
+						this.DirectConnectID = "";
+						break;
+					}
+				}
+			}
+		}
 		this.TestConnection();
 		if (Network.isServer && this.m_SynchronizeCounter > Network.connections.Length && this.m_SynchronizeCounter > 0)
 		{
 			this.m_SynchronizeCounter = 0;
-			if (Network.connections.Length > 0)
+			if (Network.connections.Length != 0)
 			{
 				base.networkView.RPC("EndSynchronization", RPCMode.All, new object[]
 				{
@@ -501,9 +531,10 @@ public class NetworkMgr : MonoBehaviour
 		base.networkView.RPC("SetPeerName", RPCMode.Server, new object[]
 		{
 			Network.player,
-			this.m_sPlayerName,
+			this.m_sPlayerName + ((this.m_privateServerToConnectTo != "") ? ("\a" + this.m_privateServerToConnectTo) : ""),
 			true
 		});
+		this.m_privateServerToConnectTo = "";
 		base.networkView.RPC("SetReadyToGo", RPCMode.All, new object[]
 		{
 			Network.player,
@@ -526,6 +557,28 @@ public class NetworkMgr : MonoBehaviour
 	[RPC]
 	public void SetPeerName(NetworkPlayer player, string name, bool synchro)
 	{
+		if (Network.isServer && this.Private)
+		{
+			string[] array = name.Split(new char[]
+			{
+				'\a'
+			});
+			if (array.Length < 2 || (array.Length >= 2 && array[1] != this.DirectConnectID))
+			{
+				base.networkView.RPC("QuitToMenu", player, new object[]
+				{
+					17
+				});
+				Network.CloseConnection(player, true);
+				return;
+			}
+			name = array[0];
+		}
+		if (Network.isServer && Singleton<GameManager>.Instance.Modifiers.KickCheaters && name == GameManager.CHEATER_NAME)
+		{
+			Network.CloseConnection(player, true);
+			return;
+		}
 		if (this.peerNames.ContainsKey(player))
 		{
 			this.peerNames[player] = name;
@@ -546,11 +599,9 @@ public class NetworkMgr : MonoBehaviour
 		if (this.readyToGo.ContainsKey(player))
 		{
 			this.readyToGo[player] = ready;
+			return;
 		}
-		else
-		{
-			this.readyToGo.Add(player, ready);
-		}
+		this.readyToGo.Add(player, ready);
 	}
 
 	public void ResetReadyStates()
@@ -606,11 +657,9 @@ public class NetworkMgr : MonoBehaviour
 		if (this.playersColor.ContainsKey(Network.player))
 		{
 			Singleton<GameConfigurator>.Instance.PlayerConfig.PlayerColor = this.playersColor[Network.player];
+			return;
 		}
-		else
-		{
-			Singleton<GameConfigurator>.Instance.PlayerConfig.PlayerColor = Color.yellow;
-		}
+		Singleton<GameConfigurator>.Instance.PlayerConfig.PlayerColor = Color.yellow;
 	}
 
 	[RPC]
@@ -691,8 +740,9 @@ public class NetworkMgr : MonoBehaviour
 		if (Network.isServer)
 		{
 			hudpause.PanelPauseChampionship.SetActive(false);
+			return;
 		}
-		else if (Network.isClient)
+		if (Network.isClient)
 		{
 			hudpause.ShowEndOfRace();
 			hudinGame.HudEndChampionshipRace.SetActive(false);
@@ -720,12 +770,9 @@ public class NetworkMgr : MonoBehaviour
 	[RPC]
 	public void Synchronize(int networkID, int synchronizeIndex)
 	{
-		if (Network.isServer)
+		if (Network.isServer && synchronizeIndex == this.m_SynchronizeIndex)
 		{
-			if (synchronizeIndex == this.m_SynchronizeIndex)
-			{
-				this.m_SynchronizeCounter++;
-			}
+			this.m_SynchronizeCounter++;
 		}
 	}
 
@@ -735,12 +782,10 @@ public class NetworkMgr : MonoBehaviour
 		if (synchronizeIndex != this.m_SynchronizeIndex + 1)
 		{
 			Debug.LogError("[NETWORK] received wrong synchronization ended index");
+			return;
 		}
-		else
-		{
-			this.m_SynchronizeIndex = synchronizeIndex;
-			this.m_WaitingSynchronization = false;
-		}
+		this.m_SynchronizeIndex = synchronizeIndex;
+		this.m_WaitingSynchronization = false;
 	}
 
 	public void StartSynchronization()
@@ -751,8 +796,9 @@ public class NetworkMgr : MonoBehaviour
 			{
 				this.m_SynchronizeCounter++;
 				this.m_WaitingSynchronization = true;
+				return;
 			}
-			else if (Network.isClient)
+			if (Network.isClient)
 			{
 				this.m_WaitingSynchronization = true;
 				base.networkView.RPC("Synchronize", RPCMode.Server, new object[]
@@ -792,6 +838,119 @@ public class NetworkMgr : MonoBehaviour
 		LoadingManager.LevelIndex = iLevelIndex;
 	}
 
+	public string MatchmakingServer
+	{
+		get
+		{
+			return MasterServer.ipAddress;
+		}
+		set
+		{
+			IPAddress ipaddress;
+			try
+			{
+				ipaddress = Dns.GetHostAddresses(value)[0];
+				Debug.Log("Matchmaking server set to " + value);
+			}
+			catch
+			{
+				ipaddress = null;
+			}
+			Network.natFacilitatorIP = (MasterServer.ipAddress = ((ipaddress == null) ? value : ipaddress.ToString()));
+		}
+	}
+
+	public void Start()
+	{
+		this.MatchmakingServer = Singleton<GameSaveManager>.Instance.GetMatchmakingServer();
+		MasterServer.port = 23466;
+		Network.natFacilitatorPort = 50005;
+	}
+
+	public bool Private
+	{
+		get
+		{
+			return this.m_isPrivate;
+		}
+		set
+		{
+			this.m_isPrivate = value;
+		}
+	}
+
+	public string GameStage
+	{
+		get
+		{
+			return this.m_gameStage;
+		}
+		set
+		{
+			this.m_gameStage = value;
+		}
+	}
+
+	public string GameType
+	{
+		get
+		{
+			return this.m_gameType;
+		}
+		set
+		{
+			this.m_gameType = value;
+		}
+	}
+
+	public void RegisterHost()
+	{
+		using (SHA512 sha = new SHA512Managed())
+		{
+			MasterServer.RegisterHost("GK12", "GK12", string.Concat(new string[]
+			{
+				this.GameType,
+				",",
+				(!this.BLanOnly) ? "WAN" : "LAN",
+				",",
+				this.SGameName + (this.Private ? " [Private]" : ""),
+				",",
+				this.ExternalIP,
+				",",
+				this.GameStage,
+				",",
+				((int)this.ConnectionStatus).ToString(),
+				",",
+				this.Private ? this.ComputeConnectionChallenge(sha, this.DirectConnectID, this.ExternalIP) : ""
+			}));
+		}
+	}
+
+	public string ComputeConnectionChallenge(SHA512 shaM, string directConnectID, string salt)
+	{
+		return Convert.ToBase64String(shaM.ComputeHash(Encoding.UTF8.GetBytes(directConnectID + salt)));
+	}
+
+	public string DirectConnectID
+	{
+		get
+		{
+			return this.m_directConnectID;
+		}
+		set
+		{
+			this.m_directConnectID = value;
+		}
+	}
+
+	public string PrivateServerToConnectTo
+	{
+		set
+		{
+			this.m_privateServerToConnectTo = value;
+		}
+	}
+
 	public int port = 31069;
 
 	public int maxPlayers = 6;
@@ -820,25 +979,25 @@ public class NetworkMgr : MonoBehaviour
 
 	private bool m_bLanOnly;
 
-	private string m_sPlayerName = "Player";
+	private string m_sPlayerName;
 
-	private string m_sGameName = string.Empty;
+	private string m_sGameName;
 
 	public string ServerName;
 
 	private string m_sExternalIP;
 
-	private bool waitForNamesSynchro = true;
+	private bool waitForNamesSynchro;
 
-	private bool waitForColorsSynchro = true;
+	private bool waitForColorsSynchro;
 
-	public float m_fTestingTimeout = 10f;
+	public float m_fTestingTimeout;
 
 	private float m_fTimer;
 
 	private float m_fTimerNAT;
 
-	private bool m_bTestAsked = true;
+	private bool m_bTestAsked;
 
 	private bool m_bDoneTesting;
 
@@ -848,7 +1007,17 @@ public class NetworkMgr : MonoBehaviour
 
 	private bool m_bCanConnect;
 
-	private ConnectionTesterStatus m_eConnectionTestResult = ConnectionTesterStatus.Undetermined;
+	private ConnectionTesterStatus m_eConnectionTestResult;
 
 	private bool m_bTrackChoiceReceived;
+
+	private string m_directConnectID = "";
+
+	private bool m_isPrivate;
+
+	private string m_gameType;
+
+	private string m_gameStage;
+
+	private string m_privateServerToConnectTo;
 }
diff --git a/Assembly-CSharp/PanelDataKart.cs b/Assembly-CSharp/PanelDataKart.cs
index 2f5372a..9f226ce 100644
--- a/Assembly-CSharp/PanelDataKart.cs
+++ b/Assembly-CSharp/PanelDataKart.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class PanelDataKart : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.m_fAcceleration = (this.m_fAccelerationTarget = 0f);
 		this.m_fSpeed = (this.m_fSpeedTarget = 0f);
@@ -21,7 +21,7 @@ public class PanelDataKart : MonoBehaviour
 		}
 	}
 
-	private void Update()
+	public void Update()
 	{
 		Vector3 localScale = new Vector3(1f, 1f, 1f);
 		if (this.m_oGaugeAcceleration)
diff --git a/Assembly-CSharp/ParfumeBonusEffect.cs b/Assembly-CSharp/ParfumeBonusEffect.cs
index e90e877..a40ab65 100644
--- a/Assembly-CSharp/ParfumeBonusEffect.cs
+++ b/Assembly-CSharp/ParfumeBonusEffect.cs
@@ -29,7 +29,7 @@ public class ParfumeBonusEffect : BonusEffect
 		this._badUsedEffect.transform.parent = this.m_pBonusEffectMgr.Target.Transform;
 	}
 
-	protected override void OnDestroy()
+	public override void OnDestroy()
 	{
 		if (this._attackEffect != null)
 		{
diff --git a/Assembly-CSharp/PathRecorder.cs b/Assembly-CSharp/PathRecorder.cs
index b3ac35c..35bd542 100644
--- a/Assembly-CSharp/PathRecorder.cs
+++ b/Assembly-CSharp/PathRecorder.cs
@@ -12,11 +12,11 @@ public class PathRecorder : MonoBehaviour
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this._target)
 		{
@@ -45,7 +45,7 @@ public class PathRecorder : MonoBehaviour
 		}
 	}
 
-	private void OnGUI()
+	public void OnGUI()
 	{
 		string str = "On";
 		if (!this._recording)
diff --git a/Assembly-CSharp/PlayerConfig.cs b/Assembly-CSharp/PlayerConfig.cs
index 3b9acd6..d759724 100644
--- a/Assembly-CSharp/PlayerConfig.cs
+++ b/Assembly-CSharp/PlayerConfig.cs
@@ -45,7 +45,7 @@ public class PlayerConfig : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		this.m_pSelectedAdvantage = EAdvantage.None;
 		this.playerColor = Color.yellow;
diff --git a/Assembly-CSharp/PlayerCustom.cs b/Assembly-CSharp/PlayerCustom.cs
index 702753a..b9d59c2 100644
--- a/Assembly-CSharp/PlayerCustom.cs
+++ b/Assembly-CSharp/PlayerCustom.cs
@@ -27,14 +27,14 @@ public class PlayerCustom : MonoBehaviour
 		}
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		this.m_pBonusCustom = null;
 		this.m_pKartCustom = null;
 		this.m_pPlayerCarac = null;
 	}
 
-	private void Start()
+	public void Start()
 	{
 		this.m_pPlayerCarac = base.transform.parent.FindChild("Tunning").GetComponent<PlayerCarac>();
 	}
diff --git a/Assembly-CSharp/PodiumGameState.cs b/Assembly-CSharp/PodiumGameState.cs
index 3635d2d..c6988ac 100644
--- a/Assembly-CSharp/PodiumGameState.cs
+++ b/Assembly-CSharp/PodiumGameState.cs
@@ -84,7 +84,7 @@ public class PodiumGameState : GameState
 		this.OnStateChanged(E_GameState.Result);
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		if (this.m_fFadeTimer >= 0f)
 		{
diff --git a/Assembly-CSharp/PopupDialog.cs b/Assembly-CSharp/PopupDialog.cs
index 5bc8847..e9540a6 100644
--- a/Assembly-CSharp/PopupDialog.cs
+++ b/Assembly-CSharp/PopupDialog.cs
@@ -2,4 +2,16 @@
 
 public class PopupDialog : AbstractPopup
 {
+	public override void OnQuit()
+	{
+		base.OnQuit();
+		if (this.OnQuitCallback != null)
+		{
+			this.OnQuitCallback();
+		}
+	}
+
+	public PopupDialog.Callback OnQuitCallback;
+
+	public delegate void Callback();
 }
diff --git a/Assembly-CSharp/PriceConfig.cs b/Assembly-CSharp/PriceConfig.cs
index a340b6f..abd5b72 100644
--- a/Assembly-CSharp/PriceConfig.cs
+++ b/Assembly-CSharp/PriceConfig.cs
@@ -26,8 +26,8 @@ public class PriceConfig : MonoBehaviour
 	[HideInInspector]
 	public int[] CustoPrices = new int[Enum.GetValues(typeof(ERarity)).Length];
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	public int[] HatPrices = new int[Enum.GetValues(typeof(ERarity)).Length];
 
 	[SerializeField]
diff --git a/Assembly-CSharp/Properties/AssemblyInfo.cs b/Assembly-CSharp/Properties/AssemblyInfo.cs
index 156f779..f087cf6 100644
--- a/Assembly-CSharp/Properties/AssemblyInfo.cs
+++ b/Assembly-CSharp/Properties/AssemblyInfo.cs
@@ -1,6 +1,12 @@
 ï»¿using System;
+using System.Diagnostics;
 using System.Reflection;
 using System.Runtime.CompilerServices;
+using System.Security;
+using System.Security.Permissions;
 
-[assembly: AssemblyVersion("0.0.0.0")]
+[assembly: AssemblyVersion("0.1.0.0")]
+[assembly: CompilationRelaxations(8)]
+[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)]
 [assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
+[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
diff --git a/Assembly-CSharp/PulseColor.cs b/Assembly-CSharp/PulseColor.cs
index 87c214b..f6edf01 100644
--- a/Assembly-CSharp/PulseColor.cs
+++ b/Assembly-CSharp/PulseColor.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class PulseColor : MonoBehaviour
 {
-	private void Update()
+	public void Update()
 	{
 		float t = Mathf.PingPong(Time.time, this.duration) / this.duration;
 		base.renderer.material.color = Color.Lerp(this.colorStart, this.colorEnd, t);
diff --git a/Assembly-CSharp/PuzzlePiece.cs b/Assembly-CSharp/PuzzlePiece.cs
index 338770a..24de64e 100644
--- a/Assembly-CSharp/PuzzlePiece.cs
+++ b/Assembly-CSharp/PuzzlePiece.cs
@@ -3,14 +3,14 @@ using UnityEngine;
 
 public class PuzzlePiece : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.Player = null;
 		this.m_pTransform = base.transform;
 		this.m_pAudio = base.GetComponent<AudioSource>();
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this.Player != null)
 		{
diff --git a/Assembly-CSharp/QuadShadow.cs b/Assembly-CSharp/QuadShadow.cs
index 04e4303..7c6e1d1 100644
--- a/Assembly-CSharp/QuadShadow.cs
+++ b/Assembly-CSharp/QuadShadow.cs
@@ -3,17 +3,17 @@ using UnityEngine;
 
 public class QuadShadow : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.m_pBoneAttach = base.transform.parent;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		this.m_bUpdated = false;
 	}
 
-	private void OnWillRenderObject()
+	public void OnWillRenderObject()
 	{
 		if (!this.m_bUpdated)
 		{
diff --git a/Assembly-CSharp/QualityManager.cs b/Assembly-CSharp/QualityManager.cs
index 31df16a..863564b 100644
--- a/Assembly-CSharp/QualityManager.cs
+++ b/Assembly-CSharp/QualityManager.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class QualityManager : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.FxPC = GameObject.Find("FxPC");
 		this.FxMobile = GameObject.Find("FxMobile");
@@ -11,7 +11,7 @@ public class QualityManager : MonoBehaviour
 		this.ApplyAndSetQuality(this.currentQuality);
 	}
 
-	private void Awake()
+	public void Awake()
 	{
 		this.AutoDetectQuality();
 	}
@@ -19,6 +19,10 @@ public class QualityManager : MonoBehaviour
 	private void AutoDetectQuality()
 	{
 		Shader.globalMaximumLOD = 1000;
+		this.PCbloom = base.gameObject.GetComponent<Bloom>();
+		this.PCdepthOfField = base.gameObject.GetComponent<DepthOfFieldScatter>();
+		this.PCVignetting = base.gameObject.GetComponent<Vignetting>();
+		this.PCScreenOverlay = base.gameObject.GetComponent<ScreenOverlay>();
 		if (SystemInfo.graphicsPixelFillrate < 2800)
 		{
 			this.currentQuality = Quality.High;
@@ -151,13 +155,13 @@ public class QualityManager : MonoBehaviour
 
 	public Quality currentQuality;
 
-	public DepthOfFieldScatter PCdepthOfField;
+	private DepthOfFieldScatter PCdepthOfField;
 
-	public ScreenOverlay PCScreenOverlay;
+	private ScreenOverlay PCScreenOverlay;
 
-	public Bloom PCbloom;
+	private Bloom PCbloom;
 
-	public Vignetting PCVignetting;
+	private Vignetting PCVignetting;
 
 	public static Quality quality;
 }
diff --git a/Assembly-CSharp/RaceCoin.cs b/Assembly-CSharp/RaceCoin.cs
index b5df531..d3b93c9 100644
--- a/Assembly-CSharp/RaceCoin.cs
+++ b/Assembly-CSharp/RaceCoin.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class RaceCoin : RaceItem
 {
-	protected override void Awake()
+	public override void Awake()
 	{
 		this._sendEvent = false;
 		if (Singleton<GameConfigurator>.Instance.GameModeType == E_GameModeType.TIME_TRIAL)
diff --git a/Assembly-CSharp/RaceGameState.cs b/Assembly-CSharp/RaceGameState.cs
index f25afa0..c857f42 100644
--- a/Assembly-CSharp/RaceGameState.cs
+++ b/Assembly-CSharp/RaceGameState.cs
@@ -38,7 +38,7 @@ public class RaceGameState : GameState
 	{
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		if (this.selfEnded)
 		{
diff --git a/Assembly-CSharp/RaceItem.cs b/Assembly-CSharp/RaceItem.cs
index 31a20bb..e9c9170 100644
--- a/Assembly-CSharp/RaceItem.cs
+++ b/Assembly-CSharp/RaceItem.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public abstract class RaceItem : MonoBehaviour
 {
-	protected virtual void Awake()
+	public virtual void Awake()
 	{
 		if (base.networkView != null)
 		{
diff --git a/Assembly-CSharp/RacePuzzlePiece.cs b/Assembly-CSharp/RacePuzzlePiece.cs
index 6206938..0a8f7ef 100644
--- a/Assembly-CSharp/RacePuzzlePiece.cs
+++ b/Assembly-CSharp/RacePuzzlePiece.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class RacePuzzlePiece : RaceItem
 {
-	protected override void Awake()
+	public override void Awake()
 	{
 		if (Singleton<GameConfigurator>.Instance.GameModeType == E_GameModeType.TIME_TRIAL || Network.peerType != NetworkPeerType.Disconnected)
 		{
diff --git a/Assembly-CSharp/RaceTutorialGameState.cs b/Assembly-CSharp/RaceTutorialGameState.cs
index f9a7778..bfe8736 100644
--- a/Assembly-CSharp/RaceTutorialGameState.cs
+++ b/Assembly-CSharp/RaceTutorialGameState.cs
@@ -14,7 +14,7 @@ public class RaceTutorialGameState : GameState
 		}
 	}
 
-	public void OnDestroy()
+	public new void OnDestroy()
 	{
 		GameEntryPoint.OnVehicleCreated = (Action)Delegate.Remove(GameEntryPoint.OnVehicleCreated, new Action(this.VehicleCreated));
 	}
@@ -63,7 +63,7 @@ public class RaceTutorialGameState : GameState
 	{
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		EVehiclePlacementState placeVehicles = ((InGameGameMode)this.m_pGameMode).PlaceVehicles;
 		if (placeVehicles == EVehiclePlacementState.Init)
diff --git a/Assembly-CSharp/RcHumanController.cs b/Assembly-CSharp/RcHumanController.cs
index e4a51ea..48da2cf 100644
--- a/Assembly-CSharp/RcHumanController.cs
+++ b/Assembly-CSharp/RcHumanController.cs
@@ -10,6 +10,7 @@ public class RcHumanController : RcController
 		this.m_fTakeOffSteer = 0f;
 		this.m_fPrevDriftInput = 0f;
 		this.m_pGyroscope = null;
+		this.m_bAccelerometer = false;
 	}
 
 	public int LogBrake
@@ -56,6 +57,10 @@ public class RcHumanController : RcController
 			this.RadianThreshold = 3.14159274f * this.DegreeThresholdGyroMax / 180f;
 			this.m_fLastGyroValue = 0f;
 		}
+		else if (SystemInfo.supportsAccelerometer)
+		{
+			this.m_bAccelerometer = true;
+		}
 	}
 
 	public virtual void Stop()
@@ -241,6 +246,11 @@ public class RcHumanController : RcController
 			num3 = Mathf.Clamp(num3, -this.RadianThreshold, this.RadianThreshold) / this.RadianThreshold;
 			num4 = -num3;
 		}
+		else if (Singleton<GameOptionManager>.Instance.GetInputType() == E_InputType.Gyroscopic && this.m_bAccelerometer)
+		{
+			float num5 = 2f * Mathf.Max(0.3f, Singleton<GameOptionManager>.Instance.GetGyroSensibility());
+			num4 = Input.acceleration.x * num5;
+		}
 		else
 		{
 			num4 = Singleton<InputManager>.Instance.GetAction(EAction.Steer);
@@ -284,6 +294,8 @@ public class RcHumanController : RcController
 
 	protected Gyroscope m_pGyroscope;
 
+	protected bool m_bAccelerometer;
+
 	public float DegreeThresholdGyroMin = 15f;
 
 	public float DegreeThresholdGyroMax = 35f;
diff --git a/Assembly-CSharp/RcKinematicStatistics.cs b/Assembly-CSharp/RcKinematicStatistics.cs
index 8a5e7aa..3147946 100644
--- a/Assembly-CSharp/RcKinematicStatistics.cs
+++ b/Assembly-CSharp/RcKinematicStatistics.cs
@@ -113,7 +113,7 @@ public class RcKinematicStatistics : MonoBehaviour
 		}
 	}
 
-	private void OnDrawGizmos()
+	public void OnDrawGizmos()
 	{
 		if (this.m_pRecord != null)
 		{
diff --git a/Assembly-CSharp/RcNetworkController.cs b/Assembly-CSharp/RcNetworkController.cs
index 26a47dc..7467eb7 100644
--- a/Assembly-CSharp/RcNetworkController.cs
+++ b/Assembly-CSharp/RcNetworkController.cs
@@ -18,7 +18,7 @@ public class RcNetworkController : RcController
 		base.networkView.observed = this;
 	}
 
-	private void OnNetworkInstantiate(NetworkMessageInfo info)
+	public void OnNetworkInstantiate(NetworkMessageInfo info)
 	{
 		if (!base.networkView.isMine)
 		{
@@ -26,7 +26,7 @@ public class RcNetworkController : RcController
 		}
 	}
 
-	private void OnSerializeNetworkView(BitStream stream, NetworkMessageInfo info)
+	public void OnSerializeNetworkView(BitStream stream, NetworkMessageInfo info)
 	{
 		if (base.networkView.stateSynchronization == NetworkStateSynchronization.ReliableDeltaCompressed)
 		{
@@ -38,7 +38,7 @@ public class RcNetworkController : RcController
 		}
 	}
 
-	private void OnSerializeNetworkViewReliable(BitStream stream, NetworkMessageInfo info)
+	public void OnSerializeNetworkViewReliable(BitStream stream, NetworkMessageInfo info)
 	{
 		if (stream.isWriting)
 		{
@@ -58,8 +58,9 @@ public class RcNetworkController : RcController
 			float arcadeDriftFactor = this.m_pVehicle.GetArcadeDriftFactor();
 			stream.Serialize(ref wheelSpeedMS);
 			stream.Serialize(ref arcadeDriftFactor);
+			return;
 		}
-		else if (this.m_pVehicle.GetControlType() == RcVehicle.ControlType.Net)
+		if (this.m_pVehicle.GetControlType() == RcVehicle.ControlType.Net)
 		{
 			Vector3 zero = Vector3.zero;
 			Vector3 zero2 = Vector3.zero;
@@ -96,7 +97,7 @@ public class RcNetworkController : RcController
 		}
 	}
 
-	private void OnSerializeNetworkViewUnreliable(BitStream stream, NetworkMessageInfo info)
+	public void OnSerializeNetworkViewUnreliable(BitStream stream, NetworkMessageInfo info)
 	{
 		if (stream.isWriting && this.m_pVehicle.GetControlType() != RcVehicle.ControlType.Net)
 		{
@@ -120,8 +121,9 @@ public class RcNetworkController : RcController
 			short num4 = RcUtils.CompressFloat(arcadeDriftFactor, -1f, 1f);
 			stream.Serialize(ref num3);
 			stream.Serialize(ref num4);
+			return;
 		}
-		else if (this.m_pVehicle.GetControlType() == RcVehicle.ControlType.Net)
+		if (this.m_pVehicle.GetControlType() == RcVehicle.ControlType.Net)
 		{
 			Vector3 pos = Vector3.zero;
 			Vector3 vel = Vector3.zero;
diff --git a/Assembly-CSharp/RcRace.cs b/Assembly-CSharp/RcRace.cs
index 82e05fe..bba7583 100644
--- a/Assembly-CSharp/RcRace.cs
+++ b/Assembly-CSharp/RcRace.cs
@@ -300,7 +300,7 @@ public class RcRace : MonoBehaviour
 		base.networkView.observed = base.transform;
 	}
 
-	private void OnSerializeNetworkView(BitStream stream, NetworkMessageInfo info)
+	public void OnSerializeNetworkView(BitStream stream, NetworkMessageInfo info)
 	{
 		if (!Network.isClient && stream.isWriting)
 		{
diff --git a/Assembly-CSharp/ResultGameState.cs b/Assembly-CSharp/ResultGameState.cs
index de142d7..172dd7c 100644
--- a/Assembly-CSharp/ResultGameState.cs
+++ b/Assembly-CSharp/ResultGameState.cs
@@ -12,7 +12,7 @@ public class ResultGameState : GameState
 	{
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		if (!Singleton<GameManager>.Instance.SoundManager.SoundsList[3].isPlaying && !Singleton<GameManager>.Instance.SoundManager.SoundsList[4].isPlaying)
 		{
diff --git a/Assembly-CSharp/RewardManager.cs b/Assembly-CSharp/RewardManager.cs
index 2f994cb..ee8acb5 100644
--- a/Assembly-CSharp/RewardManager.cs
+++ b/Assembly-CSharp/RewardManager.cs
@@ -426,8 +426,7 @@ public class RewardManager : Singleton<RewardManager>
 
 	public void CheckCoins()
 	{
-		UnityEngine.Object[] array = Resources.LoadAll("Reward", typeof(RewardBase));
-		foreach (UnityEngine.Object @object in array)
+		foreach (UnityEngine.Object @object in Resources.LoadAll("Reward", typeof(RewardBase)))
 		{
 			if (@object is RewardBase)
 			{
@@ -444,8 +443,9 @@ public class RewardManager : Singleton<RewardManager>
 		if (pRewardType == E_RewardType.Custom)
 		{
 			this.UnlockCustom(pReward, pRarity);
+			return;
 		}
-		else if (pRewardType == E_RewardType.Hat)
+		if (pRewardType == E_RewardType.Hat)
 		{
 			this.UnlockHat(pReward, pRarity);
 		}
@@ -461,8 +461,9 @@ public class RewardManager : Singleton<RewardManager>
 		{
 			rpReward = availableHats[num2];
 			rpRewardType = E_RewardType.Hat;
+			return;
 		}
-		else if (num2 >= availableHats.Count)
+		if (num2 >= availableHats.Count)
 		{
 			int index = num2 - availableHats.Count;
 			rpReward = availableCustoms[index];
@@ -621,8 +622,7 @@ public class RewardManager : Singleton<RewardManager>
 
 	public ERarity GetChallengeItemRarity()
 	{
-		int num = Singleton<RandomManager>.Instance.Next(0, 99);
-		if (num < 65)
+		if (Singleton<RandomManager>.Instance.Next(0, 99) < 65)
 		{
 			return ERarity.Base;
 		}
diff --git a/Assembly-CSharp/Rotate.cs b/Assembly-CSharp/Rotate.cs
index 257a199..a55ccf3 100644
--- a/Assembly-CSharp/Rotate.cs
+++ b/Assembly-CSharp/Rotate.cs
@@ -3,12 +3,12 @@ using UnityEngine;
 
 public class Rotate : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
 		this.m_oTransform = base.gameObject.transform;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		Vector3 a = new Vector3((!this._x) ? 0f : 1f, (!this._y) ? 0f : 1f, (!this._z) ? 0f : 1f);
 		this.m_oTransform.Rotate(a * Time.deltaTime * this.vitesse);
diff --git a/Assembly-CSharp/SceneEntryPoint.cs b/Assembly-CSharp/SceneEntryPoint.cs
index ae36eae..a482d71 100644
--- a/Assembly-CSharp/SceneEntryPoint.cs
+++ b/Assembly-CSharp/SceneEntryPoint.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class SceneEntryPoint : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 	}
 }
diff --git a/Assembly-CSharp/SplashScreen.cs b/Assembly-CSharp/SplashScreen.cs
new file mode 100644
index 0000000..fda126b
--- /dev/null
+++ b/Assembly-CSharp/SplashScreen.cs
@@ -0,0 +1,132 @@
+ï»¿using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Reflection;
+using UnityEngine;
+
+public class SplashScreen : MonoBehaviour
+{
+	private void Awake()
+	{
+		if (Application.platform != RuntimePlatform.Android && Application.platform != RuntimePlatform.IPhonePlayer)
+		{
+			List<FileInfo> list = new List<FileInfo>();
+			list.AddRange(new DirectoryInfo(Application.dataPath + "/../External/").GetFiles("*.png"));
+			list.AddRange(new DirectoryInfo(Application.dataPath + "/../PatchTest/").GetFiles("*.png"));
+			foreach (FileInfo fileInfo in list)
+			{
+				WWW www = new WWW("file://" + fileInfo.FullName);
+				while (!www.isDone)
+				{
+				}
+				Texture2D texture2D = new Texture2D(1024, 768, TextureFormat.ARGB32, false);
+				www.LoadImageIntoTexture(texture2D);
+				this.m_vTextures.Add(texture2D);
+			}
+			this.m_oTweenColor = this.Texture.GetComponent<TweenColor>();
+			this.m_oTexture = this.Texture.GetComponent<UITexture>();
+		}
+	}
+
+	private void OnDestroy()
+	{
+		if (this.m_oTexture)
+		{
+			this.m_oTexture.mainTexture = null;
+		}
+		foreach (Texture2D obj in this.m_vTextures)
+		{
+			UnityEngine.Object.Destroy(obj);
+		}
+	}
+
+	private void Update()
+	{
+		if (this.m_vTextures == null || this.m_vTextures.Count == 0)
+		{
+			Application.LoadLevel("RootScene");
+			return;
+		}
+		if (this.m_iIndex == -1)
+		{
+			this.m_bFadeIn = true;
+			this.m_iIndex = 0;
+			this.Texture.SetActive(true);
+			this.m_oTexture.mainTexture = this.m_vTextures[this.m_iIndex];
+			this.m_oTexture.MakePixelPerfect();
+			this.m_oTweenColor.enabled = true;
+			this.m_oTweenColor.duration = this.FadeTimer;
+			this.m_oTweenColor.Play(true);
+		}
+		else
+		{
+			base.GetComponentInChildren<Camera>().backgroundColor = this.m_vTextures[this.m_iIndex].GetPixel(0, 0);
+		}
+		if (this.m_fTimer >= 0f)
+		{
+			this.m_fTimer += Time.deltaTime;
+			if (this.m_fTimer >= this.SplashTimer)
+			{
+				this.m_bFadeIn = false;
+				this.m_oTweenColor.duration = this.FadeTimer - (this.m_fTimer - this.SplashTimer);
+				this.m_fTimer = -1f;
+				this.m_oTweenColor.Play(false);
+			}
+		}
+	}
+
+	public void DoSplashFinished()
+	{
+		if (this.m_iIndex == -1)
+		{
+			return;
+		}
+		if (this.m_bFadeIn)
+		{
+			this.m_fTimer = 0f;
+			return;
+		}
+		this.Texture.SetActive(false);
+		if (this.m_iIndex < this.m_vTextures.Count - 1)
+		{
+			this.m_iIndex++;
+			this.Texture.SetActive(true);
+			this.m_oTexture.mainTexture = this.m_vTextures[this.m_iIndex];
+			this.m_oTexture.MakePixelPerfect();
+			this.m_oTweenColor.enabled = true;
+			this.m_oTweenColor.duration = this.FadeTimer;
+			this.m_oTweenColor.Play(true);
+			this.m_bFadeIn = true;
+			return;
+		}
+		Application.LoadLevel("RootScene");
+	}
+
+	private void OnGUI()
+	{
+		if (!Debug.isDebugBuild)
+		{
+			return;
+		}
+		string str = File.GetLastWriteTime(Uri.UnescapeDataString(new UriBuilder(Assembly.GetExecutingAssembly().CodeBase).Path)).ToString("hh:mm tt on MM/dd/yyyy");
+		GUI.Label(new Rect(0f, 0f, (float)Screen.width, (float)Screen.height), "Patched at " + str);
+	}
+
+	public float FadeTimer = 0.5f;
+
+	public float SplashTimer = 1f;
+
+	public GameObject Texture;
+
+	private float m_fTimer = -1f;
+
+	private bool m_bFadeIn;
+
+	private int m_iIndex = -1;
+
+	private TweenColor m_oTweenColor;
+
+	private UITexture m_oTexture;
+
+	private List<Texture2D> m_vTextures = new List<Texture2D>();
+}
diff --git a/Assembly-CSharp/SplineController.cs b/Assembly-CSharp/SplineController.cs
index 98ea8d0..3aacc67 100644
--- a/Assembly-CSharp/SplineController.cs
+++ b/Assembly-CSharp/SplineController.cs
@@ -28,7 +28,7 @@ public class SplineController : MonoBehaviour
 		}
 	}
 
-	private void Start()
+	public void Start()
 	{
 		this.mSplineInterp = (base.GetComponent(typeof(SplineInterpolator)) as SplineInterpolator);
 		this.mTransforms = this.GetTransforms();
diff --git a/Assembly-CSharp/SplineInterpolator.cs b/Assembly-CSharp/SplineInterpolator.cs
index 7201290..1dc23a6 100644
--- a/Assembly-CSharp/SplineInterpolator.cs
+++ b/Assembly-CSharp/SplineInterpolator.cs
@@ -4,7 +4,7 @@ using UnityEngine;
 
 public class SplineInterpolator : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
 		this.Reset();
 	}
@@ -102,7 +102,7 @@ public class SplineInterpolator : MonoBehaviour
 		this.mNodes.Add(splineNode2);
 	}
 
-	private void Update()
+	public void Update()
 	{
 		if (this.mState == "Reset" || this.mState == "Stopped" || this.mNodes.Count < 4)
 		{
diff --git a/Assembly-CSharp/StartGameState.cs b/Assembly-CSharp/StartGameState.cs
index 8e01abc..1fe6bb0 100644
--- a/Assembly-CSharp/StartGameState.cs
+++ b/Assembly-CSharp/StartGameState.cs
@@ -36,13 +36,13 @@ public class StartGameState : GameState
 		this.Reset();
 	}
 
-	private void Reset()
+	public void Reset()
 	{
 		this._startTimer = 1f;
 		this._startCounter = 4;
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		float deltaTime = Time.deltaTime;
 		if (this._startCounter > 0)
diff --git a/Assembly-CSharp/SteerButton.cs b/Assembly-CSharp/SteerButton.cs
index edb2822..7b40455 100644
--- a/Assembly-CSharp/SteerButton.cs
+++ b/Assembly-CSharp/SteerButton.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class SteerButton : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		BoxCollider boxCollider = base.collider as BoxCollider;
 		this.m_pBounds.center = boxCollider.center;
@@ -11,7 +11,7 @@ public class SteerButton : MonoBehaviour
 		this.m_pBounds.height = boxCollider.size.y;
 	}
 
-	private void Update()
+	public void Update()
 	{
 		foreach (Touch touch in Input.touches)
 		{
diff --git a/Assembly-CSharp/TimeTrialConfig.cs b/Assembly-CSharp/TimeTrialConfig.cs
index 1e043d1..ad3094c 100644
--- a/Assembly-CSharp/TimeTrialConfig.cs
+++ b/Assembly-CSharp/TimeTrialConfig.cs
@@ -3,14 +3,6 @@ using UnityEngine;
 
 public class TimeTrialConfig : MonoBehaviour
 {
-	private void Start()
-	{
-	}
-
-	private void Update()
-	{
-	}
-
 	public int Bronze;
 
 	public int Silver;
diff --git a/Assembly-CSharp/TimeTrialGameMode.cs b/Assembly-CSharp/TimeTrialGameMode.cs
index 18c13fe..6a14e89 100644
--- a/Assembly-CSharp/TimeTrialGameMode.cs
+++ b/Assembly-CSharp/TimeTrialGameMode.cs
@@ -17,7 +17,7 @@ public class TimeTrialGameMode : InGameGameMode
 		chanceDispatcher.OnCreatePlayer = (Action<PlayerData, int>)Delegate.Combine(chanceDispatcher.OnCreatePlayer, new Action<PlayerData, int>(this.AddPlayerData));
 	}
 
-	protected override void Start()
+	public override void Start()
 	{
 		base.Start();
 		Singleton<BonusMgr>.Instance.Reset();
diff --git a/Assembly-CSharp/TimeTrialUFO.cs b/Assembly-CSharp/TimeTrialUFO.cs
index 3bf10bb..d63e748 100644
--- a/Assembly-CSharp/TimeTrialUFO.cs
+++ b/Assembly-CSharp/TimeTrialUFO.cs
@@ -3,13 +3,13 @@ using UnityEngine;
 
 public class TimeTrialUFO : MonoBehaviour
 {
-	private void Awake()
+	public void Awake()
 	{
 		this.m_pTransform = base.transform;
 		base.renderer.enabled = false;
 	}
 
-	private void FixedUpdate()
+	public void FixedUpdate()
 	{
 		if (!this._Active)
 		{
diff --git a/Assembly-CSharp/TrackPresentationGameState.cs b/Assembly-CSharp/TrackPresentationGameState.cs
index 250308f..260352e 100644
--- a/Assembly-CSharp/TrackPresentationGameState.cs
+++ b/Assembly-CSharp/TrackPresentationGameState.cs
@@ -9,7 +9,7 @@ public class TrackPresentationGameState : GameState
 		this.networkMgr = (NetworkMgr)UnityEngine.Object.FindObjectOfType(typeof(NetworkMgr));
 	}
 
-	public void OnDestroy()
+	public new void OnDestroy()
 	{
 		GameEntryPoint.OnVehicleCreated = (Action)Delegate.Remove(GameEntryPoint.OnVehicleCreated, new Action(this.VehicleCreated));
 	}
@@ -56,7 +56,7 @@ public class TrackPresentationGameState : GameState
 		((InGameGameMode)this.m_pGameMode).VehicleCreated();
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 		EVehiclePlacementState placeVehicles = ((InGameGameMode)this.m_pGameMode).PlaceVehicles;
 		if (placeVehicles == EVehiclePlacementState.Init)
diff --git a/Assembly-CSharp/TutorialGameMode.cs b/Assembly-CSharp/TutorialGameMode.cs
index 73eb93a..92ae520 100644
--- a/Assembly-CSharp/TutorialGameMode.cs
+++ b/Assembly-CSharp/TutorialGameMode.cs
@@ -103,7 +103,7 @@ public class TutorialGameMode : InGameGameMode
 		this._state = E_GameState.RaceTutorial;
 	}
 
-	protected override void Start()
+	public override void Start()
 	{
 		base.Start();
 		Transform parent = base.Hud.transform.Find("Camera");
diff --git a/Assembly-CSharp/TutorialGameState.cs b/Assembly-CSharp/TutorialGameState.cs
index a73e7dc..c687b54 100644
--- a/Assembly-CSharp/TutorialGameState.cs
+++ b/Assembly-CSharp/TutorialGameState.cs
@@ -20,7 +20,7 @@ public class TutorialGameState : GameState
 		base.gameMode.Hud.StartRace();
 	}
 
-	protected override void Update()
+	public override void Update()
 	{
 	}
 
diff --git a/Assembly-CSharp/UFOAnimation.cs b/Assembly-CSharp/UFOAnimation.cs
index 66ab5dc..25d42a0 100644
--- a/Assembly-CSharp/UFOAnimation.cs
+++ b/Assembly-CSharp/UFOAnimation.cs
@@ -3,12 +3,12 @@ using UnityEngine;
 
 public class UFOAnimation : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		this.m_pParent = base.transform.parent.GetComponent<UFO>();
 	}
 
-	public void LeaveFinished()
+	public void DoLeaveFinished()
 	{
 		if (this.m_pParent)
 		{
@@ -16,7 +16,7 @@ public class UFOAnimation : MonoBehaviour
 		}
 	}
 
-	public void LaunchFinished()
+	public void DoLaunchFinished()
 	{
 		if (this.m_pParent)
 		{
diff --git a/Assembly-CSharp/UFOBonusEntity.cs b/Assembly-CSharp/UFOBonusEntity.cs
index b3400cc..b4133a9 100644
--- a/Assembly-CSharp/UFOBonusEntity.cs
+++ b/Assembly-CSharp/UFOBonusEntity.cs
@@ -46,6 +46,7 @@ public class UFOBonusEntity : BonusEntity
 	public override void Launch()
 	{
 		base.Launch();
+		this.m_fCurrentSafeCounter = 0f;
 		float num = this.SpeedForward + this.m_pLauncher.GetBonusMgr().GetBonusValue(EITEM.ITEM_UFO, EBonusCustomEffect.SPEED) * this.SpeedForward / 100f;
 		this.m_fCurrentSpeed = num / 3.6f;
 		if (this.Race != null)
@@ -226,6 +227,7 @@ public class UFOBonusEntity : BonusEntity
 				else if (this.m_eState == BonusEntity.BonusState.BONUS_TRIGGERED)
 				{
 					bool flag2 = true;
+					this.m_fCurrentSafeCounter += deltaTime;
 					for (int j = 0; j < this.m_pUfo.Count; j++)
 					{
 						if (this.m_pUfo[j].AnimLeaveIsPlaying())
@@ -234,6 +236,10 @@ public class UFOBonusEntity : BonusEntity
 							break;
 						}
 					}
+					if (this.m_fCurrentSafeCounter >= this.m_fSafeCounter)
+					{
+						flag2 = true;
+					}
 					if (flag2)
 					{
 						this.SynchronizeDestroy();
@@ -552,6 +558,10 @@ public class UFOBonusEntity : BonusEntity
 
 	private float m_fCurrentTimerToDestroyUFO;
 
+	private float m_fSafeCounter = 6f;
+
+	private float m_fCurrentSafeCounter;
+
 	private float m_fBonusDuration;
 
 	public AudioSource SoundLaunched;
diff --git a/Assembly-CSharp/UIAtlas.cs b/Assembly-CSharp/UIAtlas.cs
index b2a6fa9..e04951f 100644
--- a/Assembly-CSharp/UIAtlas.cs
+++ b/Assembly-CSharp/UIAtlas.cs
@@ -337,8 +337,8 @@ public class UIAtlas : MonoBehaviour
 		}
 	}
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private Material material;
 
 	[HideInInspector]
diff --git a/Assembly-CSharp/UIButtonScale.cs b/Assembly-CSharp/UIButtonScale.cs
index f66508c..0fbe53f 100644
--- a/Assembly-CSharp/UIButtonScale.cs
+++ b/Assembly-CSharp/UIButtonScale.cs
@@ -63,6 +63,18 @@ public class UIButtonScale : MonoBehaviour
 		}
 	}
 
+	public Vector3 Scale
+	{
+		get
+		{
+			return this.mScale;
+		}
+		set
+		{
+			this.mScale = value;
+		}
+	}
+
 	public Transform tweenTarget;
 
 	public Vector3 hover = new Vector3(1.1f, 1.1f, 1.1f);
diff --git a/Assembly-CSharp/UICopySprite.cs b/Assembly-CSharp/UICopySprite.cs
index cffae74..17fbc14 100644
--- a/Assembly-CSharp/UICopySprite.cs
+++ b/Assembly-CSharp/UICopySprite.cs
@@ -3,7 +3,7 @@ using UnityEngine;
 
 public class UICopySprite : MonoBehaviour
 {
-	private void Start()
+	public void Start()
 	{
 		if (this.m_pCopiedSprite)
 		{
@@ -19,11 +19,11 @@ public class UICopySprite : MonoBehaviour
 		}
 	}
 
-	private void Update()
+	public void Update()
 	{
 	}
 
-	private void LateUpdate()
+	public void LateUpdate()
 	{
 		if (!this.m_pSpriteInstance || !this.m_pCopiedSprite || !this.m_pUISprite)
 		{
@@ -40,7 +40,7 @@ public class UICopySprite : MonoBehaviour
 		}
 	}
 
-	private void OnDestroy()
+	public void OnDestroy()
 	{
 		if (this.m_pSpriteInstance)
 		{
@@ -48,7 +48,7 @@ public class UICopySprite : MonoBehaviour
 		}
 	}
 
-	private void OnDisable()
+	public void OnDisable()
 	{
 		if (this.m_pSpriteInstance)
 		{
diff --git a/Assembly-CSharp/UIFont.cs b/Assembly-CSharp/UIFont.cs
index fdd9fad..61f3c02 100644
--- a/Assembly-CSharp/UIFont.cs
+++ b/Assembly-CSharp/UIFont.cs
@@ -1234,32 +1234,32 @@ public class UIFont : MonoBehaviour
 		return false;
 	}
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private Material mMat;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private Rect mUVRect = new Rect(0f, 0f, 1f, 1f);
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private BMFont mFont = new BMFont();
 
 	[HideInInspector]
 	[SerializeField]
 	private int mSpacingX;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private int mSpacingY;
 
 	[HideInInspector]
 	[SerializeField]
 	private UIAtlas mAtlas;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private UIFont mReplacement;
 
 	[SerializeField]
@@ -1274,8 +1274,8 @@ public class UIFont : MonoBehaviour
 	[HideInInspector]
 	private Font mDynamicFont;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private int mDynamicFontSize = 16;
 
 	[SerializeField]
diff --git a/Assembly-CSharp/UILabel.cs b/Assembly-CSharp/UILabel.cs
index a03acf5..b8c20d7 100644
--- a/Assembly-CSharp/UILabel.cs
+++ b/Assembly-CSharp/UILabel.cs
@@ -17,18 +17,16 @@ public class UILabel : UIWidget
 			{
 				this.mChanged = true;
 				this.mShouldBeProcessed = true;
+				return;
 			}
-			else
-			{
-				this.mShouldBeProcessed = false;
-				this.mLastText = this.text;
-				this.mLastWidth = this.mMaxLineWidth;
-				this.mLastEncoding = this.mEncoding;
-				this.mLastCount = this.mMaxLineCount;
-				this.mLastPass = this.mPassword;
-				this.mLastShow = this.mShowLastChar;
-				this.mLastEffect = this.mEffectStyle;
-			}
+			this.mShouldBeProcessed = false;
+			this.mLastText = this.text;
+			this.mLastWidth = this.mMaxLineWidth;
+			this.mLastEncoding = this.mEncoding;
+			this.mLastCount = this.mMaxLineCount;
+			this.mLastPass = this.mPassword;
+			this.mLastShow = this.mShowLastChar;
+			this.mLastEffect = this.mEffectStyle;
 		}
 	}
 
@@ -66,8 +64,9 @@ public class UILabel : UIWidget
 					this.mText = string.Empty;
 				}
 				this.hasChanged = true;
+				return;
 			}
-			else if (this.mText != value)
+			if (this.mText != value)
 			{
 				this.mText = value;
 				this.hasChanged = true;
@@ -372,7 +371,7 @@ public class UILabel : UIWidget
 						}
 						if (this.mText.Length > 0)
 						{
-							this.mProcessedText += this.mText[this.mText.Length - 1];
+							this.mProcessedText += this.mText[this.mText.Length - 1].ToString();
 						}
 					}
 					else
@@ -402,7 +401,7 @@ public class UILabel : UIWidget
 				this.mSize = (string.IsNullOrEmpty(this.mProcessedText) ? Vector2.one : this.mFont.CalculatePrintedSize(this.mProcessedText, this.mEncoding, this.mSymbols));
 				if (!this.mShrinkToFit)
 				{
-					goto IL_2F2;
+					goto IL_2A5;
 				}
 				if (this.mMaxLineCount <= 0 || this.mSize.y * num <= num2)
 				{
@@ -414,12 +413,11 @@ public class UILabel : UIWidget
 			if (this.mMaxLineWidth > 0)
 			{
 				float num4 = (float)this.mMaxLineWidth / num;
-				float a = (this.mSize.x * num <= num4) ? num : (num4 / this.mSize.x * num);
-				num = Mathf.Min(a, num);
+				num = Mathf.Min((this.mSize.x * num <= num4) ? num : (num4 / this.mSize.x * num), num);
 			}
 			num = Mathf.Round(num);
 			base.cachedTransform.localScale = new Vector3(num, num, 1f);
-			IL_2F2:
+			IL_2A5:
 			this.mSize.x = Mathf.Max(this.mSize.x, (num <= 0f) ? 1f : ((float)this.lineWidth / num));
 		}
 		else
@@ -452,6 +450,7 @@ public class UILabel : UIWidget
 			if (this.shrinkToFit)
 			{
 				this.ProcessText();
+				return;
 			}
 		}
 		else
@@ -526,8 +525,8 @@ public class UILabel : UIWidget
 		}
 	}
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private UIFont mFont;
 
 	[SerializeField]
@@ -542,12 +541,12 @@ public class UILabel : UIWidget
 	[SerializeField]
 	private bool mEncoding = true;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private int mMaxLineCount;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private bool mPassword;
 
 	[SerializeField]
@@ -558,8 +557,8 @@ public class UILabel : UIWidget
 	[SerializeField]
 	private UILabel.Effect mEffectStyle;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private Color mEffectColor = Color.black;
 
 	[SerializeField]
@@ -570,12 +569,12 @@ public class UILabel : UIWidget
 	[HideInInspector]
 	private Vector2 mEffectDistance = Vector2.one;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private bool mShrinkToFit;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private float mLineWidth;
 
 	[HideInInspector]
diff --git a/Assembly-CSharp/UIPanel.cs b/Assembly-CSharp/UIPanel.cs
index 2eb940e..10cefe0 100644
--- a/Assembly-CSharp/UIPanel.cs
+++ b/Assembly-CSharp/UIPanel.cs
@@ -637,12 +637,12 @@ public class UIPanel : MonoBehaviour
 	[HideInInspector]
 	public Matrix4x4 worldToLocal = Matrix4x4.identity;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private float mAlpha = 1f;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private UIPanel.DebugInfo mDebugInfo = UIPanel.DebugInfo.Gizmos;
 
 	[SerializeField]
@@ -653,8 +653,8 @@ public class UIPanel : MonoBehaviour
 	[HideInInspector]
 	private Vector4 mClipRange = Vector4.zero;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private Vector2 mClipSoftness = new Vector2(40f, 40f);
 
 	private BetterList<UIWidget> mWidgets = new BetterList<UIWidget>();
diff --git a/Assembly-CSharp/UISprite.cs b/Assembly-CSharp/UISprite.cs
index ff58ac5..57b7ded 100644
--- a/Assembly-CSharp/UISprite.cs
+++ b/Assembly-CSharp/UISprite.cs
@@ -933,8 +933,8 @@ public class UISprite : UIWidget
 		}
 	}
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private UIAtlas mAtlas;
 
 	[SerializeField]
@@ -945,12 +945,12 @@ public class UISprite : UIWidget
 	[SerializeField]
 	private bool mFillCenter = true;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private UISprite.Type mType;
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private UISprite.FillDirection mFillDirection = UISprite.FillDirection.Radial360;
 
 	[HideInInspector]
diff --git a/Assembly-CSharp/UISpriteAnimation.cs b/Assembly-CSharp/UISpriteAnimation.cs
index b4602ac..e26a472 100644
--- a/Assembly-CSharp/UISpriteAnimation.cs
+++ b/Assembly-CSharp/UISpriteAnimation.cs
@@ -127,12 +127,12 @@ public class UISpriteAnimation : MonoBehaviour
 		}
 	}
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private int mFPS = 30;
 
-	[HideInInspector]
 	[SerializeField]
+	[HideInInspector]
 	private string mPrefix = string.Empty;
 
 	[SerializeField]
diff --git a/Assembly-CSharp/UITexture.cs b/Assembly-CSharp/UITexture.cs
index 1fc8876..07eef80 100644
--- a/Assembly-CSharp/UITexture.cs
+++ b/Assembly-CSharp/UITexture.cs
@@ -185,12 +185,12 @@ public class UITexture : UIWidget
 		cols.Add(item);
 	}
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private Rect mRect = new Rect(0f, 0f, 1f, 1f);
 
-	[SerializeField]
 	[HideInInspector]
+	[SerializeField]
 	private Shader mShader;
 
 	[HideInInspector]
-- 
2.11.0.windows.1

